#!/usr/bin/env python3
"""
Script backup ƒë·ªãnh k·ª≥ t·ª± ƒë·ªông
Ch·∫°y backup m·ªói X ph√∫t ho·∫∑c khi c√≥ thay ƒë·ªïi file
"""

import os
import sys
import time
import datetime
import subprocess
import threading
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class CodeChangeHandler(FileSystemEventHandler):
    """Handler ƒë·ªÉ theo d√µi thay ƒë·ªïi file code"""
    
    def __init__(self, backup_callback):
        self.backup_callback = backup_callback
        self.last_backup = 0
        self.backup_cooldown = 300  # 5 ph√∫t cooldown gi·ªØa c√°c backup
        
    def on_modified(self, event):
        if event.is_directory:
            return
            
        # Ch·ªâ backup khi file .py ƒë∆∞·ª£c thay ƒë·ªïi
        if event.src_path.endswith('.py'):
            current_time = time.time()
            if current_time - self.last_backup > self.backup_cooldown:
                self.last_backup = current_time
                file_name = os.path.basename(event.src_path)
                self.backup_callback(f"Auto backup - {file_name} changed")

class ScheduledBackup:
    """Class qu·∫£n l√Ω backup ƒë·ªãnh k·ª≥"""
    
    def __init__(self):
        self.observer = None
        self.running = False
        
    def run_backup(self, message=None):
        """Ch·∫°y backup v·ªõi message"""
        try:
            if not message:
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                message = f"Scheduled backup - {timestamp}"
            
            print(f"üîÑ {message}")
            result = subprocess.run([
                sys.executable, 
                "auto_backup.py", 
                message
            ], check=False, capture_output=True, text=True, cwd=os.getcwd())
            
            if result.returncode == 0:
                print("‚úÖ Backup th√†nh c√¥ng!")
            else:
                print(f"‚ùå Backup th·∫•t b·∫°i: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå L·ªói backup: {e}")
    
    def scheduled_backup_worker(self, interval_minutes):
        """Worker thread cho backup ƒë·ªãnh k·ª≥"""
        while self.running:
            time.sleep(interval_minutes * 60)
            if self.running:
                self.run_backup()
    
    def start_monitoring(self, watch_directory=".", interval_minutes=30):
        """B·∫Øt ƒë·∫ßu theo d√µi v√† backup ƒë·ªãnh k·ª≥"""
        print(f"üöÄ B·∫Øt ƒë·∫ßu theo d√µi thay ƒë·ªïi trong: {os.path.abspath(watch_directory)}")
        print(f"‚è∞ Backup ƒë·ªãnh k·ª≥ m·ªói {interval_minutes} ph√∫t")
        print("üìù Backup t·ª± ƒë·ªông khi file .py ƒë∆∞·ª£c thay ƒë·ªïi")
        print("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng\n")
        
        # Thi·∫øt l·∫≠p file watcher
        event_handler = CodeChangeHandler(self.run_backup)
        self.observer = Observer()
        self.observer.schedule(event_handler, watch_directory, recursive=True)
        
        # B·∫Øt ƒë·∫ßu monitoring
        self.running = True
        self.observer.start()
        
        # B·∫Øt ƒë·∫ßu scheduled backup thread
        backup_thread = threading.Thread(
            target=self.scheduled_backup_worker, 
            args=(interval_minutes,),
            daemon=True
        )
        backup_thread.start()
        
        try:
            # Backup ƒë·∫ßu ti√™n
            self.run_backup("Monitoring started - Initial backup")
            
            # V√≤ng l·∫∑p ch√≠nh
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüõë ƒêang d·ª´ng monitoring...")
            self.stop_monitoring()
    
    def stop_monitoring(self):
        """D·ª´ng monitoring"""
        self.running = False
        if self.observer:
            self.observer.stop()
            self.observer.join()
        print("‚úÖ ƒê√£ d·ª´ng monitoring")

def main():
    """Main function"""
    if len(sys.argv) > 1:
        try:
            interval = int(sys.argv[1])
        except ValueError:
            print("‚ùå Interval ph·∫£i l√† s·ªë (ph√∫t)")
            sys.exit(1)
    else:
        interval = 30  # Default 30 ph√∫t
    
    # Ki·ªÉm tra dependencies
    try:
        import watchdog
    except ImportError:
        print("‚ùå C·∫ßn c√†i ƒë·∫∑t watchdog: pip install watchdog")
        print("Ho·∫∑c ch·∫°y backup th·ªß c√¥ng v·ªõi: python auto_backup.py")
        sys.exit(1)
    
    scheduler = ScheduledBackup()
    scheduler.start_monitoring(interval_minutes=interval)

if __name__ == "__main__":
    main() 