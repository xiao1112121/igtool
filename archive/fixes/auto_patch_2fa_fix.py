#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AUTO PATCH: T·ª± ƒë·ªông s·ª≠a l·ªói bot ƒë∆° sau 2FA
Ch·∫°y: python auto_patch_2fa_fix.py
"""

import os
import shutil
from datetime import datetime

def backup_file(file_path):
    """T·∫°o backup file tr∆∞·ªõc khi patch"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{file_path}.backup_{timestamp}"
    shutil.copy2(file_path, backup_path)
    print(f"‚úÖ ƒê√£ backup: {backup_path}")
    return backup_path

def apply_2fa_fix():
    """√Åp d·ª•ng fix cho 2FA hang issue"""
    
    file_path = "src/ui/account_management.py"
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(file_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}")
        return False
    
    # Backup file tr∆∞·ªõc
    backup_path = backup_file(file_path)
    
    # ƒê·ªçc n·ªôi dung file
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
        return False
    
    # Code c≈© c·∫ßn thay th·∫ø
    old_code = '''                        # ‚ö° NGAY L·∫¨P T·ª®C: Hi·ªÉn th·ªã dialog ƒë·ªÉ user x·ª≠ l√Ω 2FA
                        continue_result = self.show_captcha_dialog_safe(driver, username, "2fa")
                        if continue_result:
                            print(f"[DEBUG] User ƒë√£ nh·∫≠p 2FA v√† nh·∫•n ti·∫øp t·ª•c")
                            
                            # ‚ö° CH·ªú TH√äM TH·ªúI GIAN CHO 2FA X·ª¨ L√ù
                            print(f"[DEBUG] Ch·ªù 2FA ƒë∆∞·ª£c x·ª≠ l√Ω...")
                            time.sleep(3)  # Ch·ªù 3 gi√¢y ƒë·ªÉ 2FA ƒë∆∞·ª£c x·ª≠ l√Ω
                            
                            # Ki·ªÉm tra l·∫°i ƒëƒÉng nh·∫≠p th√†nh c√¥ng
                            if self.check_home_and_explore_icons(driver):
                                print(f"[SUCCESS] ‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng sau nh·∫≠p 2FA: {username}")
                                
                                # ‚≠ê SUCCESS HANDLING
                                account["status"] = "üéâ ƒê√£ v∆∞·ª£t qua 2FA - ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"
                                account["last_action"] = f"V∆∞·ª£t 2FA + ƒëƒÉng nh·∫≠p l√∫c {time.strftime('%H:%M:%S')}"
                                self.status_updated.emit(username, account["status"])
                                
                                # Background processing
                                from PySide6.QtCore import QCoreApplication
                                import threading
                                QCoreApplication.processEvents()
                                
                                def save_and_cleanup():
                                    try:
                                        self.save_cookies(driver, username)
                                        account["status"] = "ƒê√£ ƒëƒÉng nh·∫≠p"
                                        self.status_updated.emit(username, account["status"])
                                    except Exception as e:
                                        print(f"[WARN] L·ªói khi l∆∞u cookies: {e}")
                                    finally:
                                        self.close_browser_safely(driver, username)
                                
                                threading.Thread(target=save_and_cleanup, daemon=True).start()
                                print(f"[INFO] ===== HO√ÄN T·∫§T 2FA: {username} =====")
                                return "ƒê√£ ƒëƒÉng nh·∫≠p", "OK", None
                            else:
                                print(f"[WARN] 2FA ƒë√£ nh·∫≠p nh∆∞ng ch∆∞a th·∫•y icons, ti·∫øp t·ª•c ch·ªù...")
                                # Ti·∫øp t·ª•c v√≤ng l·∫∑p ƒë·ªÉ ch·ªù th√™m
                                continue'''
    
    # Code m·ªõi thay th·∫ø
    new_code = '''                        # ‚ö° NGAY L·∫¨P T·ª®C: Hi·ªÉn th·ªã dialog ƒë·ªÉ user x·ª≠ l√Ω 2FA
                        continue_result = self.show_captcha_dialog_safe(driver, username, "2fa")
                        if continue_result:
                            print(f"[DEBUG] User ƒë√£ nh·∫≠p 2FA v√† nh·∫•n ti·∫øp t·ª•c")
                            account["status"] = "üîÑ ƒêang x·ª≠ l√Ω sau 2FA..."
                            self.status_updated.emit(username, account["status"])
                            
                            # ‚≠ê LOGIC M·ªöI: RETRY NHI·ªÄU L·∫¶N SAU 2FA - TR√ÅNH B·ªä ƒê∆†
                            max_retry_after_2fa = 8  # Retry t·ªëi ƒëa 8 l·∫ßn
                            retry_interval = 2  # Ch·ªù 2 gi√¢y m·ªói l·∫ßn
                            
                            print(f"[DEBUG] B·∫Øt ƒë·∫ßu retry sau 2FA - t·ªëi ƒëa {max_retry_after_2fa} l·∫ßn")
                            
                            for retry_count in range(max_retry_after_2fa):
                                print(f"[DEBUG] Retry {retry_count + 1}/{max_retry_after_2fa} sau 2FA cho {username}")
                                
                                try:
                                    # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc m·ªói l·∫ßn check
                                    time.sleep(retry_interval)
                                    
                                    # Ki·ªÉm tra URL hi·ªán t·∫°i
                                    current_url = driver.current_url
                                    print(f"[DEBUG] URL sau 2FA (retry {retry_count + 1}): {current_url}")
                                    
                                    # ‚≠ê KI·ªÇM TRA SAVE LOGIN INFO TR∆Ø·ªöC (th∆∞·ªùng xu·∫•t hi·ªán sau 2FA)
                                    if self.check_save_login_info(driver):
                                        print(f"[INFO] üíæ Ph√°t hi·ªán form l∆∞u th√¥ng tin sau 2FA cho {username}")
                                        account["status"] = "ƒêang x·ª≠ l√Ω form l∆∞u th√¥ng tin sau 2FA"
                                        self.status_updated.emit(username, account["status"])
                                        
                                        if self.handle_save_login_info(driver, username):
                                            print(f"[SUCCESS] ƒê√£ x·ª≠ l√Ω form l∆∞u th√¥ng tin sau 2FA")
                                            time.sleep(2)  # Ch·ªù form ƒë√≥ng
                                        
                                        # Ti·∫øp t·ª•c check icons
                                        continue
                                    
                                    # ‚≠ê KI·ªÇM TRA ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG
                                    if self.check_home_and_explore_icons(driver):
                                        print(f"[SUCCESS] ‚úÖ ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG SAU 2FA (retry {retry_count + 1}): {username}")
                                        
                                        # ‚≠ê SUCCESS HANDLING
                                        account["status"] = "üéâ ƒê√£ v∆∞·ª£t qua 2FA - ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"
                                        account["last_action"] = f"V∆∞·ª£t 2FA + ƒëƒÉng nh·∫≠p l√∫c {time.strftime('%H:%M:%S')}"
                                        self.status_updated.emit(username, account["status"])
                                        
                                        # Background processing
                                        from PySide6.QtCore import QCoreApplication
                                        import threading
                                        QCoreApplication.processEvents()
                                        
                                        def save_and_cleanup():
                                            try:
                                                self.save_cookies(driver, username)
                                                account["status"] = "ƒê√£ ƒëƒÉng nh·∫≠p"
                                                self.status_updated.emit(username, account["status"])
                                            except Exception as e:
                                                print(f"[WARN] L·ªói khi l∆∞u cookies: {e}")
                                            finally:
                                                self.close_browser_safely(driver, username)
                                        
                                        threading.Thread(target=save_and_cleanup, daemon=True).start()
                                        print(f"[INFO] ===== HO√ÄN T·∫§T 2FA: {username} =====")
                                        return "ƒê√£ ƒëƒÉng nh·∫≠p", "OK", None
                                    
                                    # ‚≠ê KI·ªÇM TRA XEM C√ì V·∫™N ·ªû TRANG 2FA KH√îNG
                                    if self.check_2fa_required(driver):
                                        if retry_count < 3:  # Ch·ªâ log cho 3 l·∫ßn ƒë·∫ßu
                                            print(f"[DEBUG] V·∫´n c√≤n ·ªü trang 2FA, ch·ªù th√™m... (retry {retry_count + 1})")
                                        continue
                                    
                                    # ‚≠ê KI·ªÇM TRA C√ÅC TR∆Ø·ªúNG H·ª¢P KH√ÅC
                                    if self.check_captcha_required(driver):
                                        print(f"[WARN] Ph√°t hi·ªán captcha sau 2FA - tho√°t kh·ªèi retry loop")
                                        break  # Tho√°t kh·ªèi retry loop ƒë·ªÉ x·ª≠ l√Ω captcha
                                    
                                    if self.check_account_locked(driver):
                                        print(f"[ERROR] T√†i kho·∫£n b·ªã kh√≥a sau 2FA")
                                        account["status"] = "T√†i kho·∫£n Die sau 2FA"
                                        self.status_updated.emit(username, account["status"])
                                        driver.quit()
                                        return "T√†i kho·∫£n Die", "Die", None
                                    
                                    # N·∫øu kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát, ti·∫øp t·ª•c retry
                                    print(f"[DEBUG] Ch∆∞a th·∫•y k·∫øt qu·∫£, ti·∫øp t·ª•c retry... ({retry_count + 1}/{max_retry_after_2fa})")
                                    
                                except Exception as retry_error:
                                    print(f"[ERROR] L·ªói trong retry {retry_count + 1}: {retry_error}")
                                    # Ti·∫øp t·ª•c retry ngay c·∫£ khi c√≥ l·ªói
                                    continue
                            
                            # ‚≠ê SAU KHI H·∫æT RETRY - BREAK KH·ªéI V√íNG L·∫∂P CH√çNH
                            print(f"[WARN] ƒê√£ retry {max_retry_after_2fa} l·∫ßn sau 2FA nh∆∞ng ch∆∞a th√†nh c√¥ng")
                            account["status"] = "‚è∞ Timeout sau 2FA"
                            self.status_updated.emit(username, account["status"])
                            
                            # Tho√°t kh·ªèi v√≤ng l·∫∑p ch√≠nh ƒë·ªÉ kh√¥ng b·ªã loop v√¥ t·∫≠n
                            break'''
    
    # Ki·ªÉm tra c√≥ code c≈© kh√¥ng
    if old_code not in content:
        print("‚ùå Kh√¥ng t√¨m th·∫•y code c·∫ßn patch. C√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c patch r·ªìi ho·∫∑c code ƒë√£ thay ƒë·ªïi.")
        # Ki·ªÉm tra ƒë√£ patch ch∆∞a
        if "max_retry_after_2fa = 8" in content:
            print("‚úÖ Code ƒë√£ ƒë∆∞·ª£c patch tr∆∞·ªõc ƒë√≥!")
            return True
        return False
    
    # Thay th·∫ø code
    new_content = content.replace(old_code, new_code)
    
    # Ki·ªÉm tra c√≥ thay ƒë·ªïi kh√¥ng
    if new_content == content:
        print("‚ùå Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán")
        return False
    
    # Ghi file m·ªõi
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        print(f"‚úÖ ƒê√£ patch th√†nh c√¥ng: {file_path}")
        print("üéâ Fix 2FA hang issue ho√†n t·∫•t!")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi ghi file: {e}")
        # Kh√¥i ph·ª•c backup
        try:
            shutil.copy2(backup_path, file_path)
            print(f"‚úÖ ƒê√£ kh√¥i ph·ª•c t·ª´ backup: {backup_path}")
        except:
            pass
        return False

def main():
    print("üö® AUTO PATCH: 2FA Hang Fix")
    print("=" * 50)
    
    if apply_2fa_fix():
        print("=" * 50)
        print("‚úÖ TH√ÄNH C√îNG! C√°c thay ƒë·ªïi:")
        print("   ‚Ä¢ Lo·∫°i b·ªè infinite loop sau 2FA")
        print("   ‚Ä¢ Retry logic th√¥ng minh (8 l·∫ßn)")
        print("   ‚Ä¢ X·ª≠ l√Ω save login form t·ª± ƒë·ªông")
        print("   ‚Ä¢ Debug logging chi ti·∫øt")
        print("")
        print("üöÄ Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ √°p d·ª•ng fix!")
        print("‚úÖ Bot s·∫Ω kh√¥ng bao gi·ªù b·ªã ƒë∆° sau 2FA n·ªØa!")
    else:
        print("=" * 50)
        print("‚ùå TH·∫§T B·∫†I! Vui l√≤ng th·ª±c hi·ªán manual patch.")
        print("   Xem h∆∞·ªõng d·∫´n trong file: URGENT_FIX_2FA_HANG.py")
    
    print("=" * 50)

if __name__ == "__main__":
    main() 