import os
import sys
import time
import random
import json
import threading
import queue
from datetime import datetime
from PySide6.QtWidgets import QProgressDialog, QInputDialog, QLineEdit
from typing import Dict, List, Optional, Tuple, Any, Union
import traceback  # Th√™m import n√†y
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
    QLabel, QLineEdit, QTextEdit, QFileDialog, QMessageBox,
    QProgressBar, QComboBox, QCheckBox, QSpinBox, QGroupBox,
    QScrollArea, QFrame, QSplitter, QTabWidget, QApplication,
    QTableWidget, QTableWidgetItem, QAbstractItemView, QHeaderView, QSizePolicy, QStyledItemDelegate, QMenu, QProgressDialog, QInputDialog, QSlider)
from PySide6.QtCore import Qt, QThread, Signal, QTimer, QSize, QModelIndex, QRect, QEvent, QMetaObject, Slot
from PySide6.QtGui import QFont, QIcon, QPixmap, QColor, QPalette, QPainter, QPen, QGuiApplication, QAction
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
from seleniumwire import webdriver as wire_webdriver
from seleniumwire.utils import decode
from twocaptcha import TwoCaptcha
from src.ui.utils import random_delay, wait_for_element, wait_for_element_clickable, retry_operation
from src.ui.context_menus import AccountContextMenu
from concurrent.futures import ThreadPoolExecutor, as_completed
from selenium.webdriver.common.keys import Keys

class CheckboxDelegate(QStyledItemDelegate):
    # S·ª≠ d·ª•ng m·ªôt UserRole t√πy ch·ªânh ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi Qt.CheckStateRole m·∫∑c ƒë·ªãnh
    CheckboxStateRole = Qt.UserRole + 1
    checkbox_clicked = Signal(int, bool)  # Th√™m t√≠n hi·ªáu m·ªõi: row, new_state

    def paint(self, painter: QPainter, option, index: QModelIndex):
        super().paint(painter, option, index)  # G·ªçi ph∆∞∆°ng th·ª©c paint c·ªßa l·ªõp cha ƒë·ªÉ v·∫Ω n·ªÅn m·∫∑c ƒë·ªãnh (bao g·ªìm c·∫£ m√†u ch·ªçn)
        # L·∫•y tr·∫°ng th√°i checkbox t·ª´ model b·∫±ng UserRole t√πy ch·ªânh
        check_state_data = index.data(self.CheckboxStateRole)
        is_checked = bool(check_state_data)  # Convert to boolean

        # T√≠nh to√°n v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc cho checkbox 15x15px, cƒÉn gi·ªØa trong √¥
        checkbox_size = 14 
        rect = option.rect
        x = rect.x() + (rect.width() - checkbox_size) // 2
        y = rect.y() + (rect.height() - checkbox_size) // 2
        checkbox_rect = QRect(x, y, checkbox_size, checkbox_size)

        painter.save()
        painter.setRenderHint(QPainter.Antialiasing)

        # V·∫Ω n·ªÅn v√† vi·ªÅn c·ªßa checkbox
        if is_checked:
            painter.setBrush(QColor("#1976D2"))  # M√†u xanh lam khi ch·ªçn
            painter.setPen(QColor("#1976D2"))
        else:
            painter.setBrush(Qt.white)  # N·ªÅn tr·∫Øng khi kh√¥ng ch·ªçn
            painter.setPen(QColor("#CCCCCC"))  # Vi·ªÅn x√°m khi kh√¥ng ch·ªçn

        painter.drawRoundedRect(checkbox_rect, 2, 2)  # V·∫Ω h√¨nh vu√¥ng bo g√≥c

        # V·∫Ω d·∫•u t√≠ch n·∫øu ƒë√£ ch·ªçn
        if is_checked:
            # V·∫Ω d·∫•u t√≠ch tr·∫Øng ƒë∆°n gi·∫£n
            painter.setPen(QPen(Qt.white, 2))  # B√∫t m√†u tr·∫Øng, ƒë·ªô d√†y 2
            # ƒê∆∞·ªùng ch√©o th·ª© nh·∫•t c·ªßa d·∫•u t√≠ch (t·ª´ d∆∞·ªõi l√™n)
            painter.drawLine(x + 3, y + 7, x + 6, y + 10)
            # ƒê∆∞·ªùng ch√©o th·ª© hai c·ªßa d·∫•u t√≠ch (t·ª´ ƒëi·ªÉm gi·ªØa l√™n tr√™n)
            painter.drawLine(x + 6, y + 10, x + 12, y + 4)

        painter.restore()

    def editorEvent(self, event, model, option, index: QModelIndex):
        if event.type() == QEvent.MouseButtonPress and event.button() == Qt.LeftButton:
            # L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i t·ª´ UserRole t√πy ch·ªânh
            current_state = index.data(self.CheckboxStateRole)
            new_state = not bool(current_state)

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i trong model b·∫±ng UserRole t√πy ch·ªânh
            model.setData(index, new_state, self.CheckboxStateRole)

            # Ph√°t t√≠n hi·ªáu khi checkbox ƒë∆∞·ª£c click
            self.checkbox_clicked.emit(index.row(), new_state)
            return True  # ƒê√£ x·ª≠ l√Ω s·ª± ki·ªán
        return False  # Quan tr·ªçng: Tr·∫£ v·ªÅ False ƒë·ªÉ c√°c s·ª± ki·ªán kh√¥ng ph·∫£i click ƒë∆∞·ª£c x·ª≠ l√Ω m·∫∑c ƒë·ªãnh

class CheckableHeaderView(QHeaderView):
    toggleAllCheckboxes = Signal(bool)  # T√≠n hi·ªáu ƒë·ªÉ th√¥ng b√°o khi checkbox trong header ƒë∆∞·ª£c toggle

    def __init__(self, orientation, parent=None):
        super().__init__(orientation, parent)
        self._checked = False  # Tr·∫°ng th√°i c·ªßa checkbox trong header
        self.setSectionsClickable(True)

    def paintSection(self, painter, rect, logicalIndex):
        # Lu√¥n v·∫Ω n·ªÅn/vi·ªÅn 3D m·∫∑c ƒë·ªãnh tr∆∞·ªõc
        super().paintSection(painter, rect, logicalIndex)
        if logicalIndex == 0:  # C·ªôt ƒë·∫ßu ti√™n l√† c·ªôt checkbox
            checkbox_size = 14  # K√≠ch th∆∞·ªõc c·ªßa checkbox
            x = rect.x() + (rect.width() - checkbox_size) // 2
            y = rect.y() + (rect.height() - checkbox_size) // 2
            checkbox_rect = QRect(x, y, checkbox_size, checkbox_size)

            painter.save()
            painter.setRenderHint(QPainter.Antialiasing)
            # V·∫Ω n·ªÅn v√† vi·ªÅn c·ªßa checkbox
            if self._checked:
                painter.setBrush(QColor("#1976D2"))
                painter.setPen(QColor("#1976D2"))
            else:
                painter.setBrush(Qt.white)
                painter.setPen(QColor("#CCCCCC"))
            painter.drawRoundedRect(checkbox_rect, 2, 2)
            # V·∫Ω d·∫•u t√≠ch n·∫øu ƒë√£ ch·ªçn
            if self._checked:
                painter.setPen(QPen(Qt.white, 2))
                painter.drawLine(x + 3, y + 7, x + 6, y + 10)
                painter.drawLine(x + 6, y + 10, x + 12, y + 4)
            painter.restore()
        else:
            # G·ªçi ph∆∞∆°ng th·ª©c g·ªëc ƒë·ªÉ v·∫Ω ph·∫ßn c√≤n l·∫°i c·ªßa header cho c√°c c·ªôt kh√°c
            super().paintSection(painter, rect, logicalIndex)

    def mousePressEvent(self, event):
        if self.logicalIndexAt(event.pos()) == 0 and event.button() == Qt.LeftButton:  # Ch·ªâ x·ª≠ l√Ω click tr√™n c·ªôt ƒë·∫ßu ti√™n
            self._checked = not self._checked
            self.toggleAllCheckboxes.emit(self._checked)
            self.viewport().update()  # C·∫≠p nh·∫≠t l·∫°i giao di·ªán header ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i checkbox m·ªõi
            event.accept()  # Ch·∫•p nh·∫≠n s·ª± ki·ªán ƒë·ªÉ ngƒÉn x·ª≠ l√Ω m·∫∑c ƒë·ªãnh
        else:
            super().mousePressEvent(event)


class AccountManagementTab(QWidget):
    # ƒê·ªãnh nghƒ©a t√≠n hi·ªáu ƒë·ªÉ th√¥ng b√°o khi d·ªØ li·ªáu proxy ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    proxy_updated = Signal()
    # Th√™m signal ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ thread
    status_updated = Signal(str, str)  # username, status
    # ‚≠ê TH√äM T√çN HI·ªÜU ƒê·ªíNG B·ªò FOLDERS
    folders_updated = Signal()

    USER_AGENTS = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
    ]

    LANGUAGES = [
        "en-US,en;q=0.9",  # English (United States), English
        "vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7",  # Vietnamese, English
        "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",  # French, English
        "de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7",  # German, English
        "ja-JP,ja;q=0.9,en-US;q=0.8,en;q=0.7"  # Japanese, English
    ]

    PROXY_USAGE_THRESHOLD = 5  # Ng∆∞·ª°ng s·ª≠ d·ª•ng proxy tr∆∞·ªõc khi xoay v√≤ng
    RECAPTCHA_RETRY_COUNT = 3  # S·ªë l·∫ßn th·ª≠ l·∫°i khi g·∫∑p reCAPTCHA
    RECAPTCHA_WAIT_TIME = 10  # Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠ (gi√¢y)

    def __init__(self, proxy_tab_instance=None, parent=None):
        super().__init__(parent)
        self.proxy_tab = proxy_tab_instance
        self.accounts_file = "accounts.json"
        self.folder_map_file = os.path.join("data", "folder_map.json")  # S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n ƒë√∫ng
        self.accounts = self.load_accounts()
        self.folder_map = self.load_folder_map()
        self.active_drivers = []
        self.stealth_mode_enabled = False
        self.proxies = self.load_proxies()
        
        # ƒê·ªçc tr·∫°ng th√°i s·ª≠ d·ª•ng proxy t·ª´ file (n·∫øu c√≥)
        self.settings_file = "account_settings.json"
        self.use_proxy = True
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, "r", encoding="utf-8") as f:
                    settings = json.load(f)
                    self.use_proxy = settings.get("use_proxy", True)
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ ƒë·ªçc tr·∫°ng th√°i s·ª≠ d·ª•ng proxy: {e}")
        
        # üî• FIX: Kh·ªüi t·∫°o UI TR∆Ø·ªöC KHI s·ª≠ d·ª•ng self.sidebar_layout
        self.init_ui()
        self.update_account_table()
        
        # K·∫øt n·ªëi signal status_updated ƒë·ªÉ c·∫≠p nh·∫≠t t·ª´ thread
        self.status_updated.connect(self.on_status_updated)

    def init_driver(self, proxy=None, username=None):
        print("[DEBUG] üöÄ Kh·ªüi t·∫°o ULTRA FAST + STEALTH driver...")
        from selenium.webdriver.chrome.options import Options
        options = Options()
        
        # üî• CHROME 137+ RENDERER TIMEOUT FIX
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-infobars")
        options.add_argument("--disable-notifications")
        options.add_argument("--no-first-run")
        
        # üî• RENDERER COMMUNICATION FIX (Chrome 137+ specific)
        options.add_argument("--disable-renderer-backgrounding")
        options.add_argument("--disable-background-timer-throttling")
        options.add_argument("--disable-backgrounding-occluded-windows")
        options.add_argument("--disable-ipc-flooding-protection")
        options.add_argument("--max_old_space_size=4096")
        
        # üîá HIDE SECURITY WARNINGS: ·∫®n c·∫£nh b√°o "Kh√¥ng an to√†n"
        options.add_argument("--allow-running-insecure-content")
        options.add_argument("--ignore-certificate-errors")
        options.add_argument("--ignore-ssl-errors")
        options.add_argument("--ignore-certificate-errors-spki-list")
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-mixed-content")
        options.add_argument("--suppress-message-center-popups")
        options.add_argument("--disable-features=VizDisplayCompositor,InsecureDownloadWarnings")
        print("[DEBUG] üîá Security warnings suppression enabled")
        
        # ü•∑ MINIMAL STEALTH (avoid conflicts)
        options.add_experimental_option("excludeSwitches", [
            "enable-automation",
            "enable-logging", 
            "enable-blink-features=AutomationControlled"
        ])
        options.add_experimental_option("useAutomationExtension", False)
        
        # üî• MINIMAL PREFS (Chrome 137+ compatible)
        prefs = {
            "credentials_enable_service": False,
            "profile.password_manager_enabled": False,
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_setting_values.mixed_script": 1,  # Allow mixed content
            "profile.managed_default_content_settings.notifications": 2,
            "security.mixed_content.warnings": False,  # Disable mixed content warnings
            "security.insecure_form_warnings": False,  # Disable insecure form warnings
        }
        options.add_experimental_option("prefs", prefs)
        
        # User agent v√† ng√¥n ng·ªØ
        random_user_agent = random.choice(self.USER_AGENTS)
        options.add_argument(f"user-agent={random_user_agent}")
        random_language = random.choice(self.LANGUAGES)
        options.add_argument(f"--lang={random_language}")
        options.add_argument(f"--accept-lang={random_language}")
        print(f"[DEBUG] S·ª≠ d·ª•ng User-Agent: {random_user_agent}")
        print(f"[DEBUG] S·ª≠ d·ª•ng Ng√¥n ng·ªØ: {random_language}")
        
        # Ch·∫ø ƒë·ªô ·∫©n danh n·∫øu ƒë∆∞·ª£c b·∫≠t
        if self.stealth_mode_enabled:
            options.add_argument("--incognito")
            print("[DEBUG] Ch·∫ø ƒë·ªô ·∫©n danh ƒë∆∞·ª£c b·∫≠t.")
        
        # K√≠ch th∆∞·ªõc c·ª≠a s·ªï m·∫∑c ƒë·ªãnh 500x492px
        options.add_argument("--window-size=500,492")
        
        # C·∫•u h√¨nh proxy
        proxy_options = {}
        if proxy: 
            print(f"[DEBUG] Proxy ƒë∆∞·ª£c cung c·∫•p: {proxy}")
            proxy_parts = proxy.split(':')
            if len(proxy_parts) == 4:
                proxy_ip_port = f"{proxy_parts[0]}:{proxy_parts[1]}"
                proxy_user = proxy_parts[2]
                proxy_pass = proxy_parts[3]
                proxy_options = {
                    'proxy': {
                        'http': f'http://{proxy_user}:{proxy_pass}@{proxy_ip_port}',
                        'https': f'https://{proxy_user}:{proxy_pass}@{proxy_ip_port}',
                        'no_proxy': 'localhost,127.0.0.1' 
                    }
                }
                print(f"[DEBUG] S·ª≠ d·ª•ng proxy c√≥ x√°c th·ª±c v·ªõi selenium-wire: {proxy_ip_port}")
            elif len(proxy_parts) == 2:
                proxy_ip_port = f"{proxy_parts[0]}:{proxy_parts[1]}"
                proxy_options = {
                    'proxy': {
                        'http': f'http://{proxy_ip_port}',
                        'https': f'https://{proxy_ip_port}'
                    }
                }
                print(f"[DEBUG] S·ª≠ d·ª•ng proxy kh√¥ng x√°c th·ª±c v·ªõi selenium-wire: {proxy_ip_port}")
            else:
                print(f"[WARN] ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá, b·ªè qua: {proxy}")
                proxy = None
        else:
            print("[DEBUG] Kh√¥ng c√≥ proxy ƒë∆∞·ª£c cung c·∫•p")
        
        print("[DEBUG] ƒêang kh·ªüi t·∫°o Chrome driver...")
        
        # Th√™m user-data-dir ri√™ng cho t·ª´ng t√†i kho·∫£n n·∫øu c√≥ username
        if username:
            profile_dir = os.path.abspath(f'sessions/{username}_profile')
            os.makedirs(profile_dir, exist_ok=True)
            options.add_argument(f'--user-data-dir={profile_dir}')
        
        try:
            driver = wire_webdriver.Chrome(seleniumwire_options=proxy_options, options=options)
            print("[DEBUG] Chrome app mode driver ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng")
            
            # üî• TIMEOUT FIX: Tr√°nh renderer timeout v·ªõi Chrome 137+
            driver.set_page_load_timeout(30)  # 30 gi√¢y cho Chrome 137+
            driver.implicitly_wait(3)         # 3 gi√¢y implicit wait
            driver.set_script_timeout(15)     # 15 gi√¢y script timeout
            print("[DEBUG] ‚úÖ ƒê√£ set timeout: page_load=30s, implicit=3s, script=15s")
            
            # ü•∑ MINIMAL STEALTH: Only essential (Chrome 137+ safe)
            try:
                driver.execute_script("""
                    // Remove webdriver property only
                    Object.defineProperty(navigator, 'webdriver', {
                        get: () => undefined,
                    });
                """)
                print("[DEBUG] ü•∑ Minimal stealth script injected")
            except Exception as e:
                print(f"[WARN] Stealth injection failed: {e}")
            
            return driver
        except Exception as e:
            print(f"[ERROR] L·ªói khi kh·ªüi t·∫°o Chrome driver: {str(e)}")
            raise

    def init_ui(self):
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)  # Remove margins
        main_layout.setSpacing(0)  # Remove spacing

        # Sidebar on the left (15%)
        sidebar_widget = QWidget()
        self.sidebar_layout = QVBoxLayout(sidebar_widget)
        self.sidebar_layout.setContentsMargins(10, 10, 10, 10)
        self.sidebar_layout.setSpacing(10)

        # Functions
        btn_add_account = QPushButton("Load Sessions Telegram")
        btn_add_account.clicked.connect(self.load_telegram_sessions)
        self.sidebar_layout.addWidget(btn_add_account)

        btn_import_accounts = QPushButton("Import .txt/.csv")
        btn_import_accounts.clicked.connect(self.import_accounts)
        self.sidebar_layout.addWidget(btn_import_accounts)

        btn_add_folder = QPushButton("Qu·∫£n l√Ω th∆∞ m·ª•c")
        btn_add_folder.clicked.connect(self.open_folder_manager)
        self.sidebar_layout.addWidget(btn_add_folder)

        self.sidebar_layout.addStretch()  # Add stretch to push buttons to top

        main_layout.addWidget(sidebar_widget, stretch=15)

        # Right panel (85%)
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        right_layout.setContentsMargins(0, 0, 0, 0)  # Remove margins
        right_layout.setSpacing(0)  # Remove spacing

        # Toolbar placed in QFrame for alignment
        toolbar_frame = QFrame()
        toolbar_frame.setStyleSheet("QFrame { padding-top: 6px; padding-bottom: 6px; }\n")
        toolbar_layout = QHBoxLayout(toolbar_frame)
        toolbar_layout.setSpacing(8)
        toolbar_layout.setContentsMargins(0, 0, 0, 0)

        # ComboBox for Category
        self.category_combo = QComboBox()
        self.category_combo.addItem("T·∫•t c·∫£")
        self.load_folder_list_to_combo()  # Load folders into combobox
        self.category_combo.currentIndexChanged.connect(self.on_folder_changed)
        self.category_combo.setFixedSize(200, 30)  # K√≠ch th∆∞·ªõc 200x35px
        toolbar_layout.addWidget(self.category_combo)

        # ƒê·∫©y c√°c widget tr∆∞·ªõc sang tr√°i
        toolbar_layout.addStretch(1)
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("T√¨m ki·∫øm username, s·ªë ƒëi·ªán tho·∫°i...")
        self.search_input.textChanged.connect(self.filter_accounts)
        self.search_input.setFixedWidth(180)
        self.search_input.setFixedHeight(35)
        toolbar_layout.addWidget(self.search_input)

        btn_search = QPushButton("üîç")
        btn_search.clicked.connect(lambda: self.filter_accounts(self.search_input.text()))
        btn_search.setFixedSize(50, 35)
        btn_search.setProperty("role", "main")
        btn_search.setProperty("color", "blue")
        toolbar_layout.addWidget(btn_search)

        right_layout.addWidget(toolbar_frame)

        # Account table
        self.account_table = QTableWidget()
        self.account_table.setColumnCount(10)  # ‚≠ê Gi·∫£m xu·ªëng 10 c·ªôt sau khi x√≥a 3 c·ªôt
        self.account_table.setHorizontalHeaderLabels([
            "‚úì", "STT", "S·ªë ƒëi·ªán tho·∫°i", "M·∫≠t kh·∫©u 2FA", "Username", "ID", "Tr·∫°ng th√°i ƒëƒÉng nh·∫≠p", 
            "Proxy hi·ªán t·∫°i", "Tr·∫°ng th√°i Proxy", "H√†nh ƒë·ªông g·∫ßn nh·∫•t"
        ])

        # Thi·∫øt l·∫≠p delegate cho c·ªôt "Ch·ªçn"
        self.checkbox_delegate = CheckboxDelegate(self)
        self.account_table.setItemDelegateForColumn(0, self.checkbox_delegate)
        # K·∫øt n·ªëi t√≠n hi·ªáu checkbox_clicked t·ª´ delegate
        self.checkbox_delegate.checkbox_clicked.connect(self.on_checkbox_clicked)

        # Thay th·∫ø QHeaderView m·∫∑c ƒë·ªãnh b·∫±ng CheckableHeaderView
        self.header_checkbox = CheckableHeaderView(Qt.Horizontal, self.account_table)
        self.account_table.setHorizontalHeader(self.header_checkbox)
        header = self.header_checkbox  # G√°n l·∫°i bi·∫øn header ƒë·ªÉ c√°c d√≤ng code sau v·∫´n s·ª≠ d·ª•ng ƒë∆∞·ª£c

        header.setSectionResizeMode(0, QHeaderView.Fixed)  # C·ªôt "‚úì"
        self.account_table.setColumnWidth(0, 32)
        header.setSectionResizeMode(1, QHeaderView.Fixed)  # C·ªôt "STT"
        self.account_table.setColumnWidth(1, 42)  # TƒÉng ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß "STT"
        header.setSectionResizeMode(2, QHeaderView.Fixed)  # C·ªôt "S·ªë ƒëi·ªán tho·∫°i"
        self.account_table.setColumnWidth(2, 140)  # TƒÉng ƒë·ªÉ hi·ªÉn th·ªã s·ªë ƒëi·ªán tho·∫°i d√†i
        header.setSectionResizeMode(3, QHeaderView.Fixed)  # C·ªôt "M·∫≠t kh·∫©u 2FA"
        self.account_table.setColumnWidth(3, 120)  # M·∫≠t kh·∫©u 2FA
        header.setSectionResizeMode(4, QHeaderView.Fixed)  # C·ªôt "Username"
        self.account_table.setColumnWidth(4, 130)  # Username
        header.setSectionResizeMode(5, QHeaderView.Fixed)  # C·ªôt "ID"
        self.account_table.setColumnWidth(5, 100)  # ID
        header.setSectionResizeMode(6, QHeaderView.Fixed)  # C·ªôt "Tr·∫°ng th√°i ƒëƒÉng nh·∫≠p"
        self.account_table.setColumnWidth(6, 140)  # TƒÉng ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ
        header.setSectionResizeMode(7, QHeaderView.Fixed)  # C·ªôt "Proxy hi·ªán t·∫°i"
        self.account_table.setColumnWidth(7, 130)  # T·ªëi ∆∞u cho ti√™u ƒë·ªÅ m·ªõi
        header.setSectionResizeMode(8, QHeaderView.Fixed)  # C·ªôt "Tr·∫°ng th√°i Proxy"
        self.account_table.setColumnWidth(8, 115)  # T·ªëi ∆∞u cho ti√™u ƒë·ªÅ
        header.setSectionResizeMode(9, QHeaderView.Stretch)  # C·ªôt "H√†nh ƒë·ªông g·∫ßn nh·∫•t" - Gi·ªØ nguy√™n Stretch
        self.account_table.verticalHeader().setDefaultSectionSize(40)
        self.account_table.horizontalHeader().setFixedHeight(40)

        # ƒê·∫£m b·∫£o c·ªôt cu·ªëi c√πng k√©o gi√£n ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß n·ªôi dung
        header.setStretchLastSection(True)

        # Thi·∫øt l·∫≠p cƒÉn l·ªÅ cho c√°c ti√™u ƒë·ªÅ c·ªôt
        self.account_table.horizontalHeader().setDefaultAlignment(Qt.AlignHCenter | Qt.AlignVCenter)

        self.account_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        # üîí KH√ìA CH·ªàNH S·ª¨A: Ch·ªâ cho ph√©p hi·ªÉn th·ªã, kh√¥ng cho edit
        self.account_table.setEditTriggers(QTableWidget.NoEditTriggers)  # Disable all editing
        self.account_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.account_table.customContextMenuRequested.connect(self.show_context_menu)
        # üîí REMOVED: itemChanged signal kh√¥ng c·∫ßn thi·∫øt v√¨ ƒë√£ disable editing
        # self.account_table.itemChanged.connect(self.handle_item_changed)  # ƒê√£ disable editing
        self.account_table.verticalHeader().setVisible(False)  # ·∫®n c·ªôt s·ªë th·ª© t·ª± b√™n tr√°i
        self.account_table.itemDoubleClicked.connect(self.on_table_item_double_clicked)  # Connect double click signal

        right_layout.addWidget(self.account_table)
        # Th√™m label th·ªëng k√™ d∆∞·ªõi b·∫£ng t√†i kho·∫£n (t√°ch ri√™ng)
        self.stats_label = QLabel()
        self.stats_label.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        self.stats_label.setStyleSheet("font-size: 15px; font-weight: bold; padding: 8px 12px;")
        right_layout.addWidget(self.stats_label)
        main_layout.addWidget(right_panel, stretch=85)

        # K·∫øt n·ªëi t√≠n hi·ªáu toggleAllCheckboxes t·ª´ CheckableHeaderView
        self.header_checkbox.toggleAllCheckboxes.connect(self.toggle_all_accounts_selection)
        
        # üî• FIX: Th√™m proxy switch setup AFTER sidebar_layout ƒë√£ ƒë∆∞·ª£c t·∫°o
        self.setup_proxy_switch()

    def setup_proxy_switch(self):
        """Setup proxy switch controls - ph·∫£i g·ªçi AFTER init_ui() ƒë·ªÉ ƒë·∫£m b·∫£o sidebar_layout ƒë√£ t·ªìn t·∫°i"""
        # Thay th·∫ø checkbox b·∫±ng drag switch (QSlider)
        self.proxy_switch_layout = QHBoxLayout()
        self.proxy_switch_label = QLabel("Proxy: OFF")
        self.proxy_switch_slider = QSlider(Qt.Horizontal)
        self.proxy_switch_slider.setMinimum(0)
        self.proxy_switch_slider.setMaximum(1)
        self.proxy_switch_slider.setSingleStep(1)
        self.proxy_switch_slider.setFixedWidth(80)
        self.proxy_switch_slider.setValue(1 if self.use_proxy else 0)
        self.proxy_switch_layout.addWidget(self.proxy_switch_label)
        self.proxy_switch_layout.addWidget(self.proxy_switch_slider)
        self.sidebar_layout.addLayout(self.proxy_switch_layout)
        self.proxy_switch_slider.valueChanged.connect(self.on_proxy_switch_changed)
        self.update_proxy_switch_label()

    def load_accounts(self):
        if os.path.exists(self.accounts_file):
            try:
                with open(self.accounts_file, 'r', encoding='utf-8') as f:
                    accounts_data = json.load(f)
                    # ‚≠ê MIGRATION: ƒê·∫£m b·∫£o m·ªói t√†i kho·∫£n c√≥ c√°c tr∆∞·ªùng m·ªõi
                    updated = False
                    for account in accounts_data:
                        # Legacy field: proxy_status
                        if "proxy_status" not in account:
                            account["proxy_status"] = "Ch∆∞a ki·ªÉm tra"
                            updated = True
                        # ‚≠ê NEW FIELD: permanent_proxy 
                        if "permanent_proxy" not in account:
                            account["permanent_proxy"] = ""
                            updated = True
                            print(f"[DEBUG] Migrated account {account.get('username', 'Unknown')} with permanent_proxy field")
                    
                    # L∆∞u l·∫°i n·∫øu c√≥ migration
                    if updated:
                        print(f"[DEBUG] Migration completed for {len(accounts_data)} accounts")
                        # L∆∞u ngay l·∫≠p t·ª©c v·ªõi data m·ªõi
                        try:
                            with open(self.accounts_file, 'w', encoding='utf-8') as f:
                                json.dump(accounts_data, f, indent=4, ensure_ascii=False)
                            print("[INFO] Migrated accounts data saved successfully.")
                        except Exception as e:
                            print(f"[ERROR] Failed to save migrated accounts: {e}")
                    
                    return accounts_data
            except json.JSONDecodeError:
                print("[ERROR] L·ªói ƒë·ªçc file accounts.json. File c√≥ th·ªÉ b·ªã h·ªèng.")
                return []
        return []

    def save_accounts(self):
        # S·ª≠ d·ª•ng lock ƒë·ªÉ tr√°nh race condition khi nhi·ªÅu thread c√πng l∆∞u
        import threading
        if not hasattr(self, '_save_lock'):
            self._save_lock = threading.Lock()
            
        with self._save_lock:
            try:
                with open(self.accounts_file, 'w', encoding='utf-8') as f:
                    json.dump(self.accounts, f, indent=4, ensure_ascii=False)
                    print("[INFO] T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u.")
            except Exception as e:
                print(f"[ERROR] L·ªói khi l∆∞u accounts: {e}")

    def sync_proxy_data(self):
        """ƒê·ªìng b·ªô proxy data t·ª´ ProxyManagementTab"""
        try:
            print("[DEBUG] ‚≠ê B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô proxy data t·ª´ ProxyManagementTab...")
            
            # Load proxy data t·ª´ proxy_status.json  
            proxy_file = 'proxy_status.json'
            if os.path.exists(proxy_file):
                with open(proxy_file, 'r', encoding='utf-8') as f:
                    proxy_data = json.load(f)
                
                print(f"[DEBUG] ƒê√£ load {len(proxy_data)} proxy t·ª´ proxy_status.json")
                
                # T·∫°o mapping: assigned_account -> proxy
                proxy_assignments = {}
                available_proxies = []
                
                for proxy_info in proxy_data:
                    proxy_string = proxy_info.get('proxy', '')
                    assigned_account = proxy_info.get('assigned_account', '').strip()
                    proxy_status = proxy_info.get('status', '')
                    
                    if assigned_account:
                        # Proxy ƒë√£ ƒë∆∞·ª£c g√°n cho t√†i kho·∫£n c·ª• th·ªÉ
                        proxy_assignments[assigned_account] = {
                            'proxy': proxy_string,
                            'status': proxy_status
                        }
                        print(f"[DEBUG] Proxy assigned: {assigned_account} -> {proxy_string}")
                    elif proxy_status.lower() == 'ok':
                        # Proxy kh·∫£ d·ª•ng ch∆∞a ƒë∆∞·ª£c g√°n
                        available_proxies.append(proxy_string)
                
                print(f"[DEBUG] Found {len(proxy_assignments)} assigned proxies")
                print(f"[DEBUG] Found {len(available_proxies)} available proxies")
                
                # C·∫≠p nh·∫≠t proxy cho c√°c t√†i kho·∫£n
                updated_count = 0
                auto_assigned_count = 0
                
                for account in self.accounts:
                    username = account.get('username', '')
                    current_proxy = account.get('proxy', '')
                    
                    # Ki·ªÉm tra xem c√≥ proxy ƒë∆∞·ª£c g√°n specifically cho t√†i kho·∫£n n√†y kh√¥ng
                    if username in proxy_assignments:
                        new_proxy = proxy_assignments[username]['proxy']
                        proxy_status = proxy_assignments[username]['status']
                        
                        if current_proxy != new_proxy:
                            account['proxy'] = new_proxy
                            account['proxy_status'] = proxy_status
                            print(f"[INFO] ‚úÖ Updated assigned proxy for {username}: {new_proxy}")
                            updated_count += 1
                    
                    # N·∫øu t√†i kho·∫£n ch∆∞a c√≥ proxy v√† c√≥ proxy kh·∫£ d·ª•ng
                    elif not current_proxy and available_proxies:
                        new_proxy = available_proxies.pop(0)  # L·∫•y proxy ƒë·∫ßu ti√™n
                        account['proxy'] = new_proxy
                        account['proxy_status'] = 'OK'  # Assume OK since it's from available list
                        print(f"[INFO] üîÑ Auto-assigned proxy for {username}: {new_proxy}")
                        auto_assigned_count += 1
                
                # L∆∞u thay ƒë·ªïi n·∫øu c√≥
                total_updates = updated_count + auto_assigned_count
                if total_updates > 0:
                    self.save_accounts()
                    self.update_account_table()
                    print(f"[SUCCESS] ‚úÖ Proxy sync completed!")
                    print(f"  - Manual assignments updated: {updated_count}")
                    print(f"  - Auto assignments: {auto_assigned_count}")
                    print(f"  - Total accounts updated: {total_updates}")
                    
                    # Show success message
                    from PySide6.QtWidgets import QMessageBox
                    QMessageBox.information(
                        self, 
                        "ƒê·ªìng b·ªô Proxy", 
                        f"‚úÖ ƒê√£ ƒë·ªìng b·ªô proxy th√†nh c√¥ng!\n\n"
                        f"üìã C·∫≠p nh·∫≠t proxy ƒë√£ g√°n: {updated_count}\n"
                        f"üîÑ T·ª± ƒë·ªông g√°n proxy m·ªõi: {auto_assigned_count}\n"
                        f"üìä T·ªïng t√†i kho·∫£n ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {total_updates}"
                    )
                else:
                    print("[INFO] üí° No proxy updates needed - all accounts already have correct proxies")
                    
                    # Show informational message
                    from PySide6.QtWidgets import QMessageBox
                    QMessageBox.information(
                        self, 
                        "ƒê·ªìng b·ªô Proxy", 
                        f"üí° Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t proxy!\n\n"
                        f"üìä C√≥ {len(proxy_assignments)} proxy ƒë√£ ƒë∆∞·ª£c g√°n\n"
                        f"üìä C√≥ {len(available_proxies)} proxy kh·∫£ d·ª•ng\n"
                        f"üí° T·∫•t c·∫£ t√†i kho·∫£n ƒë√£ c√≥ proxy ph√π h·ª£p."
                    )
                    
            else:
                print(f"[WARN] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {proxy_file}")
                from PySide6.QtWidgets import QMessageBox
                QMessageBox.warning(
                    self, 
                    "ƒê·ªìng b·ªô Proxy", 
                    f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file proxy_status.json\n\n"
                    f"Vui l√≤ng import proxy t·ª´ tab 'Qu·∫£n l√Ω Proxy' tr∆∞·ªõc!"
                )
                
        except Exception as e:
            print(f"[ERROR] ‚ùå L·ªói khi ƒë·ªìng b·ªô proxy data: {e}")
            import traceback
            traceback.print_exc()
            
            from PySide6.QtWidgets import QMessageBox
            QMessageBox.critical(
                self, 
                "L·ªói ƒë·ªìng b·ªô Proxy", 
                f"‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·ªìng b·ªô proxy:\n\n{str(e)}"
            )

    def login_telegram(self):
        """ƒêƒÉng nh·∫≠p Telegram trong background thread"""
        try:
            # B∆∞·ªõc 1: Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i  
            phone, ok = QInputDialog.getText(self, "ƒêƒÉng nh·∫≠p Telegram", "S·ªë ƒëi·ªán tho·∫°i (v·ªõi m√£ qu·ªëc gia):\nV√≠ d·ª•: +84123456789")
            if not ok or not phone.strip():
                return
            
            phone = phone.strip()
            if not phone.startswith('+'):
                QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i v·ªõi m√£ qu·ªëc gia (b·∫Øt ƒë·∫ßu b·∫±ng +)")
                return
            
            # Ki·ªÉm tra config tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            try:
                import json
                import os
                with open("telegram_config.json", "r") as f:
                    config = json.load(f)
                api_id = config["api_id"]  
                api_hash = config["api_hash"]
                
                if api_id == "YOUR_API_ID" or api_hash == "YOUR_API_HASH_FROM_MY_TELEGRAM_ORG":
                    QMessageBox.critical(self, "L·ªói", "Vui l√≤ng c·∫•u h√¨nh API ID v√† API Hash th·∫≠t trong telegram_config.json\n\nTruy c·∫≠p: https://my.telegram.org/apps ƒë·ªÉ l·∫•y API credentials")
                    return
                    
            except FileNotFoundError:
                QMessageBox.critical(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y file telegram_config.json\n\nVui l√≤ng t·∫°o file v·ªõi API credentials")
                return
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"L·ªói ƒë·ªçc config: {str(e)}")
                return
            
            # T·∫°o v√† ch·∫°y worker thread
            from PySide6.QtCore import QThread, Signal
            
            class TelegramLoginWorker(QThread):
                finished = Signal(str, str)  # status, message
                request_input = Signal(str, str)  # title, prompt
                
                def __init__(self, phone, api_id, api_hash):
                    super().__init__()
                    self.phone = phone
                    self.api_id = api_id
                    self.api_hash = api_hash
                    self.input_result = None
                    self.input_ready = False
                    
                def wait_for_input(self, title, prompt):
                    self.input_ready = False
                    self.request_input.emit(title, prompt)
                    # Polling wait
                    while not self.input_ready:
                        self.msleep(100)
                    return self.input_result
                
                def run(self):
                    try:
                        # Import trong thread ƒë·ªÉ tr√°nh conflict
                        import asyncio
                        import os
                        from telethon import TelegramClient
                        from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
                        
                        # T·∫°o session folder
                        os.makedirs('sessions', exist_ok=True)
                        
                        # T·∫°o new event loop cho thread n√†y
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        
                        try:
                            client = TelegramClient(f'sessions/{self.phone}', self.api_id, self.api_hash)
                            
                            # B∆∞·ªõc 1: G·ª≠i m√£
                            async def send_code():
                                await client.connect()
                                if await client.is_user_authorized():
                                    return "already_logged_in"
                                else:
                                    sent_code = await client.send_code_request(self.phone)
                                    return sent_code.phone_code_hash
                            
                            result = loop.run_until_complete(send_code())
                            
                            if result == "already_logged_in":
                                self.finished.emit("success", "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p Telegram!")
                                return
                            
                            phone_code_hash = result
                            
                            # B∆∞·ªõc 2: Nh·∫≠p m√£ x√°c minh
                            code = self.wait_for_input("M√£ x√°c minh", "Nh·∫≠p m√£ x√°c minh ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒëi·ªán tho·∫°i:")
                            if not code:
                                self.finished.emit("cancelled", "ƒê√£ h·ªßy")
                                return
                            
                            # B∆∞·ªõc 3: X√°c minh m√£
                            async def verify_code():
                                await client.sign_in(self.phone, code.strip(), phone_code_hash=phone_code_hash)
                                return "success"
                            
                            try:
                                loop.run_until_complete(verify_code())
                                self.finished.emit("success", "ƒêƒÉng nh·∫≠p Telegram th√†nh c√¥ng!")
                                
                            except SessionPasswordNeededError:
                                # C·∫ßn 2FA
                                password_2fa = self.wait_for_input("M·∫≠t kh·∫©u 2FA", "T√†i kho·∫£n c√≥ m·∫≠t kh·∫©u b·∫£o v·ªá.\nNh·∫≠p m·∫≠t kh·∫©u 2FA:")
                                if not password_2fa:
                                    self.finished.emit("cancelled", "ƒê√£ h·ªßy")
                                    return
                                
                                async def verify_2fa():
                                    await client.sign_in(password=password_2fa.strip())
                                
                                try:
                                    loop.run_until_complete(verify_2fa())
                                    self.finished.emit("success", "ƒêƒÉng nh·∫≠p Telegram th√†nh c√¥ng (2FA)!")
                                except Exception as e:
                                    self.finished.emit("error", f"M·∫≠t kh·∫©u 2FA kh√¥ng ƒë√∫ng: {str(e)}")
                                    
                            except PhoneCodeInvalidError:
                                self.finished.emit("error", "M√£ x√°c minh kh√¥ng ƒë√∫ng!")
                            except Exception as e:
                                self.finished.emit("error", f"L·ªói x√°c minh: {str(e)}")
                                
                        finally:
                            try:
                                loop.run_until_complete(client.disconnect())
                            except:
                                pass
                            loop.close()
                            
                    except Exception as e:
                        self.finished.emit("error", f"L·ªói kh√¥ng mong mu·ªën: {str(e)}")
            
            # T·∫°o worker
            self.telegram_worker = TelegramLoginWorker(phone, api_id, api_hash)
            
            # Progress dialog
            progress = QProgressDialog("ƒêang k·∫øt n·ªëi Telegram...", "H·ªßy", 0, 0, self)
            progress.setWindowModality(Qt.WindowModal)
            progress.show()
            
            def on_request_input(title, prompt):
                progress.hide()
                text, ok = QInputDialog.getText(self, title, prompt, QLineEdit.Password if "2FA" in title else QLineEdit.Normal)
                self.telegram_worker.input_result = text if ok else None
                self.telegram_worker.input_ready = True
                if ok:
                    progress.setLabelText("ƒêang x·ª≠ l√Ω...")
                    progress.show()
            
            def on_finished(status, message):
                progress.close()
                
                if status == "success":
                    QMessageBox.information(self, "Th√†nh c√¥ng", message)
                    
                    # Th√™m v√†o danh s√°ch accounts
                    new_account = {
                        "selected": False,
                        "username": phone,
                        "password": "",
                        "fullname": "",
                        "proxy": "",
                        "status": "ƒê√£ ƒëƒÉng nh·∫≠p Telegram" + (" (2FA)" if "2FA" in message else ""),
                        "gender": "-",
                        "followers": "",
                        "following": "",
                        "last_action": f"ƒêƒÉng nh·∫≠p Telegram l√∫c {datetime.now().strftime('%H:%M:%S')}",
                        "proxy_status": "Ch∆∞a ki·ªÉm tra",
                        "permanent_proxy": ""
                    }
                    self.accounts.append(new_account)
                    self.save_accounts()
                    self.update_account_table()
                    
                elif status == "error":
                    QMessageBox.critical(self, "L·ªói", message)
                # cancelled case - kh√¥ng l√†m g√¨
            
            # K·∫øt n·ªëi signals
            self.telegram_worker.request_input.connect(on_request_input)
            self.telegram_worker.finished.connect(on_finished)
            
            # B·∫Øt ƒë·∫ßu worker
            self.telegram_worker.start()
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói kh·ªüi t·∫°o: {str(e)}")

    def load_telegram_sessions(self):
        """Load t·∫•t c·∫£ session Telegram t·ª´ th∆∞ m·ª•c sessions - CH·ªà CH·∫†Y KHI USER CLICK BUTTON"""
        try:
            print("[DEBUG] üî• MANUAL SESSION LOAD: User clicked button to load Telegram sessions")
            
            import os
            import glob
            from datetime import datetime
            
            # ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c sessions  
            sessions_dir = os.path.join(os.getcwd(), "sessions")
            
            if not os.path.exists(sessions_dir):
                QMessageBox.warning(self, "L·ªói", f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c sessions:\n{sessions_dir}")
                return
            
            # T√¨m t·∫•t c·∫£ file .session
            session_files = glob.glob(os.path.join(sessions_dir, "*.session"))
            
            if not session_files:
                QMessageBox.information(self, "Th√¥ng b√°o", f"Kh√¥ng t√¨m th·∫•y file session n√†o trong:\n{sessions_dir}")
                return
            
            # H·ªèi user c√≥ mu·ªën load kh√¥ng ƒë·ªÉ tr√°nh t·ª± ƒë·ªông
            reply = QMessageBox.question(
                self, 
                "X√°c nh·∫≠n load sessions", 
                f"üîç T√¨m th·∫•y {len(session_files)} session files.\n\n"
                f"‚ö†Ô∏è Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t v√¨ c·∫ßn k·∫øt n·ªëi Telegram ƒë·ªÉ x√°c th·ª±c t·ª´ng session.\n\n"
                f"B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply != QMessageBox.Yes:
                print("[DEBUG] üõë User cancelled session loading")
                return
            
            # Progress dialog
            progress = QProgressDialog(f"ƒêang load {len(session_files)} session files...", "H·ªßy", 0, len(session_files), self)
            progress.setWindowModality(Qt.WindowModal)
            progress.show()
            
            loaded_count = 0
            error_count = 0
            
            # Ki·ªÉm tra config Telegram
            try:
                import json
                with open("telegram_config.json", "r") as f:
                    config = json.load(f)
                api_id = config["api_id"]  
                api_hash = config["api_hash"]
                
                if api_id == "YOUR_API_ID" or api_hash == "YOUR_API_HASH_FROM_MY_TELEGRAM_ORG":
                    progress.close()
                    QMessageBox.critical(self, "L·ªói", "Vui l√≤ng c·∫•u h√¨nh API ID v√† API Hash th·∫≠t trong telegram_config.json")
                    return
                    
            except Exception as e:
                progress.close()
                QMessageBox.critical(self, "L·ªói", f"L·ªói ƒë·ªçc config: {str(e)}")
                return
            
            # Import Telethon with warning
            try:
                print("[DEBUG] üì° Importing Telethon for session validation...")
                from telethon import TelegramClient
                from telethon.tl.functions.users import GetFullUserRequest
            except ImportError:
                progress.close()
                QMessageBox.critical(self, "L·ªói", "C·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán Telethon:\npip install telethon")
                return
            
            print(f"[DEBUG] üîÑ Starting session validation for {len(session_files)} files...")
            
            # Load t·ª´ng session
            for i, session_file in enumerate(session_files):
                if progress.wasCanceled():
                    print("[DEBUG] üõë User cancelled during loading")
                    break
                
                try:
                    # L·∫•y t√™n session (kh√¥ng c√≥ extension)
                    session_name = os.path.splitext(os.path.basename(session_file))[0]
                    progress.setLabelText(f"ƒêang load session: {session_name}")
                    progress.setValue(i)
                    
                    print(f"[DEBUG] üì± Validating session: {session_name}")
                    
                    # T·∫°o client v·ªõi session
                    client = TelegramClient(session_file.replace('.session', ''), api_id, api_hash)
                    
                    # K·∫øt n·ªëi v√† l·∫•y th√¥ng tin
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    try:
                        async def get_user_info():
                            await client.connect()
                            
                            if not await client.is_user_authorized():
                                return None
                            
                            # L·∫•y th√¥ng tin user hi·ªán t·∫°i
                            me = await client.get_me()
                            
                            # Th√¥ng tin c∆° b·∫£n
                            user_info = {
                                'id': me.id,
                                'phone': me.phone or session_name,
                                'username': me.username or '',
                                'first_name': me.first_name or '',
                                'last_name': me.last_name or '',
                                'is_premium': getattr(me, 'premium', False),
                                'is_verified': getattr(me, 'verified', False)
                            }
                            
                            return user_info
                        
                        user_info = loop.run_until_complete(get_user_info())
                        
                        if user_info:
                            # Ki·ªÉm tra xem ƒë√£ c√≥ trong danh s√°ch ch∆∞a
                            phone_or_username = user_info['phone'] or user_info['username'] 
                            existing = any(acc.get('username') == phone_or_username for acc in self.accounts)
                            
                            if not existing:
                                # Th√™m v√†o danh s√°ch accounts
                                new_account = {
                                    "selected": False,
                                    "username": phone_or_username,
                                    "password": "",
                                    "fullname": f"{user_info['first_name']} {user_info['last_name']}".strip(),
                                    "proxy": "",
                                    "status": "‚úÖ Telegram Session Active" + (" üëë" if user_info['is_premium'] else "") + (" ‚úì" if user_info['is_verified'] else ""),
                                    "gender": "-",
                                    "followers": str(user_info['id']),  # Hi·ªÉn th·ªã User ID
                                    "following": "Telegram",
                                    "last_action": f"Loaded session l√∫c {datetime.now().strftime('%H:%M:%S')}",
                                    "proxy_status": "Ch∆∞a ki·ªÉm tra",
                                    "permanent_proxy": ""
                                }
                                self.accounts.append(new_account)
                                loaded_count += 1
                                print(f"[DEBUG] ‚úÖ Loaded session: {phone_or_username} - {user_info['first_name']}")
                            else:
                                print(f"[DEBUG] üîÑ Session already exists: {phone_or_username}")
                        else:
                            error_count += 1
                            print(f"[DEBUG] ‚ùå Failed to load session: {session_name}")
                    
                    finally:
                        try:
                            loop.run_until_complete(client.disconnect())
                        except:
                            pass
                        loop.close()
                    
                except Exception as e:
                    error_count += 1
                    print(f"[ERROR] ‚ö†Ô∏è Error loading session {session_name}: {e}")
                    continue
            
            progress.close()
            
            # C·∫≠p nh·∫≠t UI v√† l∆∞u
            if loaded_count > 0:
                self.save_accounts()
                self.update_account_table()
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            result_msg = f"üìä K·∫øt qu·∫£ load sessions:\n\n"
            result_msg += f"‚úÖ Loaded th√†nh c√¥ng: {loaded_count}\n"
            result_msg += f"‚ùå L·ªói/kh√¥ng th·ªÉ load: {error_count}\n"
            result_msg += f"üìÅ T·ªïng session files: {len(session_files)}\n\n"
            
            if loaded_count > 0:
                result_msg += f"üéâ ƒê√£ th√™m {loaded_count} t√†i kho·∫£n Telegram v√†o b·∫£ng!"
            
            QMessageBox.information(self, "Ho√†n th√†nh", result_msg)
            print(f"[DEBUG] üèÅ Session loading completed: {loaded_count} success, {error_count} errors")
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói load sessions: {str(e)}")
            import traceback
            print(f"[ERROR] Load sessions error: {traceback.format_exc()}")

    def add_account(self):
        """Th√™m t√†i kho·∫£n Instagram (function c≈© ƒë∆∞·ª£c gi·ªØ l·∫°i)"""
        username, ok = QInputDialog.getText(self, "Th√™m t√†i kho·∫£n", "Username:")
        if ok and username:
            phone, ok = QInputDialog.getText(self, "Th√™m t√†i kho·∫£n", "S·ªë ƒëi·ªán tho·∫°i:")
            if ok:
                proxy, ok = QInputDialog.getText(self, "Th√™m t√†i kho·∫£n", "Proxy (t√πy ch·ªçn):")
                if ok:
                    new_account = {
                        "selected": False,
                        "username": username,
                        "password": phone,  # L∆∞u s·ªë ƒëi·ªán tho·∫°i v√†o tr∆∞·ªùng password
                        "fullname": "",  # NEW: Th√™m tr∆∞·ªùng H·ªç t√™n
                        "proxy": proxy,
                        "status": "Ch∆∞a ƒëƒÉng nh·∫≠p",
                        "gender": "-",  # Th√™m c·ªôt gi·ªõi t√≠nh
                        "followers": "",
                        "following": "",
                        "last_action": "",  # Th√™m c·ªôt h√†nh ƒë·ªông cu·ªëi
                        "proxy_status": "Ch∆∞a ki·ªÉm tra",  # Kh·ªüi t·∫°o tr·∫°ng th√°i proxy
                        "permanent_proxy": ""  # ‚≠ê TH√äM: Proxy vƒ©nh vi·ªÖn cho t√†i kho·∫£n
                    }
                    self.accounts.append(new_account)
                    self.save_accounts()
                    self.update_account_table()

                    QMessageBox.information(self, "Th√™m t√†i kho·∫£n", "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.")

    @Slot()
    def update_account_table(self, accounts_to_display=None):
        if accounts_to_display is None:
            accounts_to_display = self.accounts

        self.account_table.blockSignals(True)  # Block signals to prevent itemChanged from firing
        self.account_table.setRowCount(len(accounts_to_display))
        for row_idx, account in enumerate(accounts_to_display):
            # C·ªôt "Ch·ªçn" - KH√îNG setFlags ki·ªÉu checkbox n·ªØa, ch·ªâ ƒë·ªÉ delegate v·∫Ω
            item_checkbox = QTableWidgetItem()
            item_checkbox.setData(CheckboxDelegate.CheckboxStateRole, account.get("selected", False))
            self.account_table.setItem(row_idx, 0, item_checkbox)  # Thi·∫øt l·∫≠p item cho c·ªôt 0

            # STT
            stt_item = QTableWidgetItem(str(row_idx + 1))
            stt_item.setTextAlignment(Qt.AlignCenter)
            self.account_table.setItem(row_idx, 1, stt_item)

            # S·ªë ƒëi·ªán tho·∫°i - hi·ªÉn th·ªã username (c·ªôt 2)
            username_item = QTableWidgetItem(account.get("username", ""))
            username_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.account_table.setItem(row_idx, 2, username_item)

            # M·∫≠t kh·∫©u 2FA - hi·ªÉn th·ªã m·∫≠t kh·∫©u 2FA Telegram (c·ªôt 3)
            telegram_2fa = account.get("telegram_2fa", "") or account.get("two_fa_password", "") or account.get("password_2fa", "") or account.get("twofa", "")
            if not telegram_2fa:
                telegram_2fa = "Ch∆∞a c√≥ 2FA"
            phone_item = QTableWidgetItem(telegram_2fa)
            phone_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.account_table.setItem(row_idx, 3, phone_item)

            # Username - hi·ªÉn th·ªã username c·ªßa t√†i kho·∫£n (c·ªôt 4)
            account_username = account.get("telegram_username", "") or account.get("username_telegram", "") or account.get("tg_username", "") or ""
            if not account_username:
                account_username = "Ch∆∞a c√≥ username"
            username_tg_item = QTableWidgetItem(account_username)
            username_tg_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.account_table.setItem(row_idx, 4, username_tg_item)

            # ID - hi·ªÉn th·ªã ID c·ªßa t√†i kho·∫£n (c·ªôt 5)
            account_id = account.get("telegram_id", "") or account.get("id_telegram", "") or account.get("tg_id", "") or account.get("user_id", "") or ""
            if not account_id:
                account_id = "Ch∆∞a c√≥ ID"
            id_item = QTableWidgetItem(account_id)
            id_item.setTextAlignment(Qt.AlignCenter)
            self.account_table.setItem(row_idx, 5, id_item)

            # Tr·∫°ng th√°i
            status_item = QTableWidgetItem(account.get("status", "Ch∆∞a ƒëƒÉng nh·∫≠p"))
            status_item.setTextAlignment(Qt.AlignCenter)
            if account.get("status") == "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i":
                status_item.setForeground(QColor("red"))
            elif account.get("status") == "ƒê√£ ƒëƒÉng nh·∫≠p" or account.get("status") == "Live":
                status_item.setForeground(QColor("green"))
            elif account.get("status") == "Die":
                status_item.setForeground(QColor("red"))  # Th√™m m√†u ƒë·ªè cho tr·∫°ng th√°i "Die"
            else:
                status_item.setForeground(QColor("black"))  # M·∫∑c ƒë·ªãnh m√†u ƒëen
            self.account_table.setItem(row_idx, 6, status_item)

            # Proxy
            proxy_item = QTableWidgetItem(account.get("proxy", ""))
            proxy_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.account_table.setItem(row_idx, 7, proxy_item)

            # Tr·∫°ng th√°i Proxy
            proxy_status_item = QTableWidgetItem(account.get("proxy_status", "Ch∆∞a ki·ªÉm tra"))
            proxy_status_item.setTextAlignment(Qt.AlignCenter)
            if account.get("proxy_status") == "Die":
                proxy_status_item.setForeground(QColor("red"))
            elif account.get("proxy_status") == "OK":
                proxy_status_item.setForeground(QColor("green"))
            else:
                proxy_status_item.setForeground(QColor("black"))
            self.account_table.setItem(row_idx, 8, proxy_status_item)

            # H√†nh ƒë·ªông cu·ªëi
            last_action_item = QTableWidgetItem(account.get("last_action", ""))
            last_action_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.account_table.setItem(row_idx, 9, last_action_item)
        self.account_table.blockSignals(False)  # Unblock signals
        self.update_stats(accounts_to_display)

    @Slot()
    def update_stats(self, accounts_to_display=None):
        if accounts_to_display is None:
            accounts_to_display = self.accounts
        total = len(accounts_to_display)
        live = 0
        die = 0
        selected = 0
        for acc in accounts_to_display:
            status = str(acc.get("status", "")).lower()
            # üî• FIX: ƒê·∫øm ƒë√∫ng t·∫•t c·∫£ tr·∫°ng th√°i th·ª±c t·∫ø
            if status in ["ƒë√£ ƒëƒÉng nh·∫≠p", "live", "‚úÖ ƒë√£ ƒëƒÉng nh·∫≠p"]:
                live += 1
            elif status in ["t√†i kho·∫£n b·ªã kh√≥a", "die", "‚ùå t√†i kho·∫£n b·ªã kh√≥a", "checkpoint", "blocked", "locked"]:
                die += 1
            if acc.get("selected", False):
                selected += 1
        not_selected = total - selected
        
        # üîç DEBUG: In ra th·ªëng k√™ ƒë·ªÉ ki·ªÉm tra
        print(f"[DEBUG] üìä STATS UPDATE: Total={total}, Live={live}, Die={die}, Selected={selected}")
        if live + die > 0:  # Ch·ªâ debug khi c√≥ d·ªØ li·ªáu
            print(f"[DEBUG] üìä Status details:")
            for i, acc in enumerate(accounts_to_display[:5]):  # Ch·ªâ in 5 t√†i kho·∫£n ƒë·∫ßu
                username = acc.get("username", "Unknown")
                status = acc.get("status", "N/A")
                print(f"[DEBUG] üìä   {i+1}. {username}: '{status}'")
        
        stats_html = (
            f'<span style="color:black">T·ªïng: <b>{total}</b></span> | '
            f'<span style="color:green">Live: <b>{live}</b></span> | '
            f'<span style="color:red">Die: <b>{die}</b></span> | '
            f'<span style="color:#1976D2">ƒê√£ ch·ªçn: <b>{selected}</b></span> | '
            f'<span style="color:gray">Ch∆∞a ch·ªçn: <b>{not_selected}</b></span>'
        )
        self.stats_label.setText(stats_html)

    def on_checkbox_clicked(self, row, new_state):
        # H√†m n√†y ƒë∆∞·ª£c k·∫øt n·ªëi t·ª´ delegate ƒë·ªÉ x·ª≠ l√Ω khi tr·∫°ng th√°i checkbox thay ƒë·ªïi
        if row < len(self.accounts):
            self.accounts[row]["selected"] = new_state
            self.save_accounts()
            print(f"[DEBUG] Checkbox t·∫°i h√†ng {row} ƒë∆∞·ª£c chuy·ªÉn th√†nh: {new_state}. T√†i kho·∫£n: {self.accounts[row]['username']}")
        self.update_stats()

    def handle_item_changed(self, item):
        """üîí DISABLED: Ch·ªânh s·ª≠a tr·ª±c ti·∫øp ƒë√£ b·ªã kh√≥a"""
        # üîí EARLY RETURN: Kh√¥ng cho ph√©p ch·ªânh s·ª≠a tr·ª±c ti·∫øp n·ªØa
        print(f"[INFO] üîí Ch·ªânh s·ª≠a tr·ª±c ti·∫øp ƒë√£ b·ªã kh√≥a. Vui l√≤ng s·ª≠ d·ª•ng menu chu·ªôt ph·∫£i.")
        return
        
        # Code c≈© ƒë√£ ƒë∆∞·ª£c comment out
        # Ki·ªÉm tra n·∫øu t√≠n hi·ªáu b·ªã block, b·ªè qua
        # if self.account_table.signalsBlocked():
        #     return
        # ... rest of the old code ...

    def filter_accounts(self, text):
        filtered_accounts = [
            account for account in self.accounts
            if text.lower() in account.get("username", "").lower() or  # T√¨m trong username
            text.lower() in account.get("password", "").lower() or    # T√¨m trong s·ªë ƒëi·ªán tho·∫°i
            text.lower() in account.get("status", "").lower() or
            text.lower() in account.get("proxy", "").lower() or
            text.lower() in account.get("permanent_proxy", "").lower() or  # ‚≠ê Th√™m permanent proxy v√†o search
            text.lower() in account.get("proxy_status", "").lower() or
            text.lower() in account.get("last_action", "").lower()
        ]
        if self.category_combo.currentText() != "T·∫•t c·∫£":
            folder_name = self.category_combo.currentText()
            # ƒê·∫£m b·∫£o r·∫±ng get() c√≥ m·ªôt gi√° tr·ªã m·∫∑c ƒë·ªãnh cho tr∆∞·ªùng h·ª£p username kh√¥ng c√≥ trong folder_map
            filtered_accounts = [acc for acc in filtered_accounts if self.folder_map.get(acc.get("username"), "T·ªïng") == folder_name]

        self.update_account_table(filtered_accounts)
        self.update_stats(filtered_accounts)

    def get_window_positions(self, num_windows):
        # üî• OPTIMIZED POSITIONING: 4 c·ª≠a s·ªï tr·∫£i ƒë·ªÅu m√†n h√¨nh + 5px spacing
        win_h = 350  # Chi·ªÅu cao c·ªë ƒë·ªãnh
        
        # L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
        try:
            from PySide6.QtGui import QGuiApplication
            screen = QGuiApplication.primaryScreen()
            geometry = screen.geometry()
            screen_w, screen_h = geometry.width(), geometry.height()
            print(f"[DEBUG] üñ•Ô∏è Screen size: {screen_w}x{screen_h}")
        except Exception:
            screen_w, screen_h = 1920, 1080  # fallback
        
        # üîí FIXED LAYOUT: 3 c·ª≠a s·ªï/h√†ng, k√≠ch th∆∞·ªõc 500x492px, spacing 10px
        margin_x = 0    # B·∫Øt ƒë·∫ßu t·ª´ g√≥c tr√™n b√™n tr√°i (0px)
        margin_y = 0    # B·∫Øt ƒë·∫ßu t·ª´ g√≥c tr√™n b√™n tr√°i (0px)
        spacing_x = 10  # Kho·∫£ng c√°ch 10px gi·ªØa c√°c c·ª≠a s·ªï ngang
        spacing_y = 10  # Kho·∫£ng c√°ch 10px gi·ªØa c√°c h√†ng
        
        # üîí FIXED SIZE: C·ª≠a s·ªï m·∫∑c ƒë·ªãnh 500x492px
        win_w = 500  # Chi·ªÅu r·ªông c·ªë ƒë·ªãnh
        win_h = 492  # Chi·ªÅu cao c·ªë ƒë·ªãnh
        
        print(f"[DEBUG] üîí FIXED WINDOW SIZE: {win_w}x{win_h}px")
        print(f"[DEBUG] üîí Screen resolution: {screen_w}x{screen_h}px")
        
        # üîí FIXED GRID POSITIONS: V·ªã tr√≠ c·ªë ƒë·ªãnh tuy·ªát ƒë·ªëi ƒë·ªÉ tr√°nh ƒë√® l√™n nhau
        positions = []
        
        # üéØ PREDEFINED POSITIONS: Grid c·ªë ƒë·ªãnh 3 c·ª≠a s·ªï/h√†ng
        fixed_positions = [
            # H√†ng 1: Y=0 (g√≥c tr√™n b√™n tr√°i)
            (0, 0, 500, 492),       # C·ª≠a s·ªï 1: X=0
            (510, 0, 500, 492),     # C·ª≠a s·ªï 2: X=510  
            (1020, 0, 500, 492),    # C·ª≠a s·ªï 3: X=1020
            
            # H√†ng 2: Y=502 (492 + 10 spacing)
            (0, 502, 500, 492),     # C·ª≠a s·ªï 4
            (510, 502, 500, 492),   # C·ª≠a s·ªï 5
            (1020, 502, 500, 492),  # C·ª≠a s·ªï 6
            
            # H√†ng 3: Y=1004 (502 + 502 spacing)
            (0, 1004, 500, 492),    # C·ª≠a s·ªï 7
            (510, 1004, 500, 492),  # C·ª≠a s·ªï 8
            (1020, 1004, 500, 492), # C·ª≠a s·ªï 9
        ]
        
        print(f"[DEBUG] üîí Using FIXED POSITIONS for {num_windows} windows")
        
        # üîí S·ª≠ d·ª•ng v·ªã tr√≠ c·ªë ƒë·ªãnh
        for i in range(num_windows):
            if i < len(fixed_positions):
                # S·ª≠ d·ª•ng v·ªã tr√≠ t·ª´ danh s√°ch c·ªë ƒë·ªãnh
                x, y, w, h = fixed_positions[i]
                positions.append((x, y, w, h))
                
                col = i % 3 + 1  # C·ªôt 1-3
                row = i // 3 + 1  # H√†ng 1, 2, 3...
                
                print(f"[DEBUG] üîí FIXED Window {i+1}: Row {row}, Col {col} ‚Üí ({x}, {y}, {w}, {h})")
            else:
                # N·∫øu v∆∞·ª£t qu√° 9 c·ª≠a s·ªï, t·∫°o cascade pattern
                overflow_index = i - 9
                cascade_x = 0 + (overflow_index * 50)   # Cascade sang ph·∫£i
                cascade_y = (overflow_index * 50)        # Cascade xu·ªëng d∆∞·ªõi
                
                # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° m√†n h√¨nh
                if cascade_x + 500 > screen_w - 10:
                    cascade_x = 0
                if cascade_y + 492 > screen_h - 50:
                    cascade_y = 0
                
                positions.append((cascade_x, cascade_y, 500, 492))
                print(f"[DEBUG] üîí OVERFLOW Window {i+1}: CASCADE ‚Üí ({cascade_x}, {cascade_y}, 500, 492)")
        
        return positions

    def login_selected_accounts(self):
        # Ch·∫°y ƒëƒÉng nh·∫≠p cho t·ª´ng t√†i kho·∫£n trong thread ph·ª•, kh√¥ng block main thread
        import threading
        selected_accounts = [acc for acc in self.accounts if acc.get('selected')]
        if not selected_accounts:
            QMessageBox.information(self, "Th√¥ng b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 t√†i kho·∫£n ƒë·ªÉ ƒëƒÉng nh·∫≠p.")
            return
        def login_worker(account, window_position=None):
            import threading
            username = account.get('username', 'Unknown')
            thread_id = threading.get_ident()
            
            print(f"[DEBUG] Thread worker B·∫ÆT ƒê·∫¶U cho {username} - thread id: {thread_id}")
            
            # Signal b√°o thread b·∫Øt ƒë·∫ßu
            try:
                account["status"] = "Thread b·∫Øt ƒë·∫ßu..."
                self.status_updated.emit(username, account["status"])
                print(f"[DEBUG] ƒê√£ emit signal b·∫Øt ƒë·∫ßu cho {username}")
            except Exception as e:
                print(f"[ERROR] Kh√¥ng th·ªÉ emit signal b·∫Øt ƒë·∫ßu cho {username}: {e}")
            
            # Wrapping to√†n b·ªô logic trong try-catch ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n emit signal
            try:
                print(f"[DEBUG] G·ªçi login_instagram_and_get_info cho {username}")
                result = self.login_instagram_and_get_info(account, window_position)
                print(f"[DEBUG] login_instagram_and_get_info ho√†n th√†nh cho {username} v·ªõi result: {result}")
                return result
                
            except Exception as e:
                print(f"[CRITICAL][Thread] L·ªói nghi√™m tr·ªçng trong thread {username}: {type(e).__name__}: {e}")
                import traceback
                traceback.print_exc()
                
                # ƒê·∫£m b·∫£o lu√¥n emit signal c·∫≠p nh·∫≠t tr·∫°ng th√°i
                try:
                    error_status = f"L·ªói thread: {type(e).__name__}"
                    account["status"] = error_status
                    self.status_updated.emit(username, error_status)
                    print(f"[DEBUG] ƒê√£ emit signal l·ªói nghi√™m tr·ªçng cho {username}")
                except Exception as emit_error:
                    print(f"[CRITICAL] Kh√¥ng th·ªÉ emit signal cu·ªëi c√πng cho {username}: {emit_error}")
                
                return "L·ªói thread", "L·ªói", None
                
            finally:
                print(f"[DEBUG] Thread worker K·∫æT TH√öC cho {username}")
                
        # üîç GET WINDOW POSITIONS: L·∫•y v·ªã tr√≠ c·ª≠a s·ªï c·ªë ƒë·ªãnh
        window_positions = self.get_window_positions(len(selected_accounts))
        
        # üîç VERIFY POSITIONS: In ra t·∫•t c·∫£ v·ªã tr√≠ ƒë·ªÉ ki·ªÉm tra
        print(f"[DEBUG] üîç WINDOW POSITIONS VERIFICATION:")
        for i, pos in enumerate(window_positions):
            x, y, w, h = pos
            print(f"[DEBUG] ü™ü Position {i+1}: ({x}, {y}, {w}, {h})")
        
        # üé¥ CARD DEALING EFFECT: Hi·ªáu ·ª©ng chia b√†i khi m·ªü c·ª≠a s·ªï
        print(f"[DEBUG] üé¥ B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng chia b√†i cho {len(selected_accounts)} c·ª≠a s·ªï")
        
        for idx, account in enumerate(selected_accounts):
            pos = window_positions[idx] if window_positions else None
            
            # üéØ T√≠nh to√°n v·ªã tr√≠ trong grid (3 c·ª≠a s·ªï/h√†ng)
            col = idx % 3  # C·ªôt (0-2)
            row = idx // 3  # H√†ng (0, 1, 2...)
            
            print(f"[DEBUG] üé¥ Chia b√†i {idx+1}: {account.get('username')} -> H√†ng {row+1}, C·ªôt {col+1}")
            
            t = threading.Thread(target=login_worker, args=(account, pos), daemon=True)
            t.start()
            
            # üé¥ STAGGERED DELAY: Hi·ªáu ·ª©ng chia b√†i
            if idx < len(selected_accounts) - 1:
                # Delay ng·∫Øn h∆°n cho c√πng h√†ng, delay d√†i h∆°n cho h√†ng m·ªõi
                if col == 2:  # C·ª≠a s·ªï cu·ªëi h√†ng (c·ªôt th·ª© 3)
                    delay = 0.8  # Delay d√†i h∆°n tr∆∞·ªõc khi chuy·ªÉn h√†ng m·ªõi
                    print(f"[DEBUG] üé¥ K·∫øt th√∫c h√†ng {row+1}, ch·ªù {delay}s tr∆∞·ªõc khi chuy·ªÉn h√†ng")
                else:  # C·ª≠a s·ªï trong c√πng h√†ng
                    delay = 0.3  # Delay ng·∫Øn gi·ªØa c√°c c·ª≠a s·ªï c√πng h√†ng
                    print(f"[DEBUG] üé¥ Ti·∫øp t·ª•c h√†ng {row+1}, ch·ªù {delay}s")
                
                time.sleep(delay)


    def get_human_delay(self, base_time=1.0, variation=0.5):
        """‚ö° HUMAN-LIKE: T·∫°o delay ng·∫´u nhi√™n gi·ªëng con ng∆∞·ªùi"""
        # Gaussian distribution ƒë·ªÉ gi·ªëng timing con ng∆∞·ªùi
        import random
        delay = random.gauss(base_time, variation)
        return max(0.1, min(delay, base_time * 2))  # Clamp between 0.1s and 2x base
    
    def simulate_human_scroll(self, driver):
        """ü•∑ STEALTH: Gi·∫£ l·∫≠p scroll nh∆∞ con ng∆∞·ªùi"""
        try:
            # Random scroll nh·∫π ƒë·ªÉ gi·ªëng human behavior
            scroll_amount = random.randint(100, 300)
            driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
            time.sleep(self.get_human_delay(0.5, 0.2))
        except Exception as e:
            print(f"[DEBUG] Scroll simulation error: {e}")
    
    def simulate_mouse_movement(self, driver):
        """ü•∑ STEALTH: Gi·∫£ l·∫≠p di chuy·ªÉn chu·ªôt"""
        try:
            from selenium.webdriver.common.action_chains import ActionChains
            action = ActionChains(driver)
            
            # Random mouse movement trong viewport
            x_offset = random.randint(-50, 50)
            y_offset = random.randint(-30, 30)
            action.move_by_offset(x_offset, y_offset).perform()
            time.sleep(self.get_human_delay(0.2, 0.1))
        except Exception as e:
            print(f"[DEBUG] Mouse simulation error: {e}")
    
    def track_login_success(self, success=True):
        """üöÄ SMART TRACKING: Theo d√µi th√†nh c√¥ng ƒë·ªÉ adaptive optimization"""
        if not hasattr(self, '_success_streak'):
            self._success_streak = 0
        
        if success:
            self._success_streak += 1
            print(f"[DEBUG] üöÄ Success streak: {self._success_streak}")
        else:
            self._success_streak = 0
            print("[DEBUG] ‚ö†Ô∏è Success streak reset")
    
    def instant_success_report(self, account, driver, status="ƒê√£ ƒëƒÉng nh·∫≠p"):
        """üöÄ INSTANT REPORT: B√°o v·ªÅ k·∫øt qu·∫£ ngay l·∫≠p t·ª©c, kh√¥ng ch·ªù ƒë·ª£i"""
        try:
            username = account['username']
            print(f"[DEBUG] ‚úÖ INSTANT SUCCESS REPORT: {username} - {status}")
            
            # Track success for adaptive optimization
            self.track_login_success(True)
            
            # Update status immediately
            account["status"] = status
            account["last_action"] = f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng l√∫c {time.strftime('%H:%M:%S')}"
            
            # Emit signal to update UI immediately
            self.status_updated.emit(username, status)
            
            # Force UI update immediately
            from PySide6.QtCore import QCoreApplication
            QCoreApplication.processEvents()
            
            # Save accounts immediately to persist status
            self.save_accounts()
            
            # üöÄ SUPER FAST BACKGROUND TASKS: All non-critical operations
            import threading
            def background_tasks():
                try:
                    print(f"[DEBUG] üöÄ Starting background tasks for {username}")
                    
                    # Task 1: Save cookies (important but non-blocking)
                    try:
                        self.save_cookies(driver, username)
                        print(f"[DEBUG] ‚úÖ Cookies saved for {username}")
                    except Exception as e:
                        print(f"[WARN] Cookie save failed: {e}")
                    
                    # Task 2: Basic info collection (optional)
                    try:
                        current_url = driver.current_url
                        # Only collect if we're on feed/main page (don't navigate)
                        if "instagram.com" in current_url and not "login" in current_url:
                            # Quick info without navigation
                            info = {
                                "username": username,
                                "profile_url": f"https://www.instagram.com/{username}/",
                                "followers": "N/A",
                                "following": "N/A",
                                "posts": "N/A",
                                "last_updated": time.strftime("%Y-%m-%d %H:%M:%S")
                            }
                            self.update_account_info(account, info)
                            print(f"[DEBUG] ‚úÖ Basic info updated for {username}")
                    except Exception as e:
                        print(f"[DEBUG] Info collection skipped: {e}")
                    
                    # Task 3: Browser cleanup (after short delay)
                    time.sleep(2)  # Give time for any pending operations
                    try:
                        self.close_browser_safely(driver, username)
                        print(f"[DEBUG] ‚úÖ Browser closed for {username}")
                    except Exception as e:
                        print(f"[WARN] Browser close failed: {e}")
                    
                    print(f"[SUCCESS] üöÄ All background tasks completed for {username}")
                    
                except Exception as e:
                    print(f"[ERROR] Background tasks failed for {username}: {e}")
            
            # Start background tasks immediately
            threading.Thread(target=background_tasks, daemon=True).start()
            
            print(f"[SUCCESS] üöÄ INSTANT REPORT COMPLETE: {username} - UI updated, background tasks started")
            return True
            
        except Exception as e:
            print(f"[ERROR] Instant success report failed: {e}")
            return False

    def login_instagram_and_get_info(self, account, window_position=None, max_retries=3, retry_delay=5):
        """üî• SIMPLE LOGIN: Logic ƒë∆°n gi·∫£n, kh√¥ng v√≤ng l·∫∑p ph·ª©c t·∫°p"""
        username = account.get("username", "")
        password = account.get("password", "")
        
        print(f"[DEBUG] üî• SIMPLE LOGIN b·∫Øt ƒë·∫ßu cho {username}")
        
        try:
            # üî• ∆ØUTI√äN PERMANENT PROXY: Ch·ªçn proxy t·ªët nh·∫•t cho t√†i kho·∫£n
            permanent_proxy = account.get("permanent_proxy", "").strip()
            regular_proxy = account.get("proxy", "").strip()
            
            # ∆Øu ti√™n permanent proxy n·∫øu c√≥
            chosen_proxy = permanent_proxy if permanent_proxy else regular_proxy
            proxy_type = "permanent" if permanent_proxy else "regular" if regular_proxy else "none"
            
            print(f"[DEBUG] üéØ Proxy selection for {username}:")
            print(f"[DEBUG]   - Permanent proxy: {permanent_proxy or 'None'}")
            print(f"[DEBUG]   - Regular proxy: {regular_proxy or 'None'}")
            print(f"[DEBUG]   - Chosen: {chosen_proxy or 'None'} ({proxy_type})")
            
            # Kh·ªüi t·∫°o driver v·ªõi proxy ƒë√£ ch·ªçn
            driver = self.init_driver(chosen_proxy, username)
            if not driver:
                print(f"[ERROR] Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver cho {username}")
                account["status"] = "L·ªói kh·ªüi t·∫°o driver"
                self.status_updated.emit(username, account["status"])
                return "L·ªói", "Error", None
            
            # üî• TIMEOUT PROTECTION: Gi·ªëng nh∆∞ init_driver
            try:
                driver.set_page_load_timeout(30)  # 30 gi√¢y
                driver.implicitly_wait(3)         # 3 gi√¢y implicit wait
                driver.set_script_timeout(15)     # 15 gi√¢y script timeout
                print(f"[DEBUG] ‚úÖ ƒê√£ set timeout protection cho {username}")
            except Exception as timeout_error:
                print(f"[WARN] Kh√¥ng th·ªÉ set timeout: {timeout_error}")
            
            # üî• SET WINDOW POSITION: ƒê·∫∑t v·ªã tr√≠ c·ª≠a s·ªï ƒë·ªÉ tr√°nh ch·ªìng l√™n nhau
            if window_position and len(window_position) == 4:
                x, y, width, height = window_position
                print(f"[DEBUG] üéØ ƒê·∫∑t v·ªã tr√≠ c·ª≠a s·ªï cho {username}: ({x}, {y}) size ({width}, {height})")
                try:
                    driver.set_window_rect(x, y, width, height)
                    time.sleep(0.3)  # Ch·ªù c·ª≠a s·ªï ·ªïn ƒë·ªãnh
                    
                    # üîç VERIFY POSITION: Ki·ªÉm tra v·ªã tr√≠ th·ª±c t·∫ø sau khi set
                    try:
                        actual_rect = driver.get_window_rect()
                        actual_x, actual_y = actual_rect['x'], actual_rect['y']
                        actual_w, actual_h = actual_rect['width'], actual_rect['height']
                        
                        print(f"[DEBUG] ‚úÖ V·ªã tr√≠ th·ª±c t·∫ø cho {username}: ({actual_x}, {actual_y}) size ({actual_w}, {actual_h})")
                        
                        # Ki·ªÉm tra c√≥ ch√≠nh x√°c kh√¥ng
                        if abs(actual_x - x) > 10 or abs(actual_y - y) > 10:
                            print(f"[WARN] ‚ö†Ô∏è V·ªä TR√ç KH√îNG CH√çNH X√ÅC cho {username}!")
                            print(f"[WARN] Expected: ({x}, {y}) Got: ({actual_x}, {actual_y})")
                        else:
                            print(f"[DEBUG] ‚úÖ V·ªã tr√≠ ch√≠nh x√°c cho {username}")
                            
                    except Exception as verify_error:
                        print(f"[WARN] Kh√¥ng th·ªÉ verify v·ªã tr√≠: {verify_error}")
                        
                except Exception as e:
                    print(f"[ERROR] ‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t v·ªã tr√≠ c·ª≠a s·ªï cho {username}: {e}")
            else:
                # V·ªã tr√≠ m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ window_position  
                print(f"[DEBUG] ‚ö†Ô∏è Kh√¥ng c√≥ window_position cho {username}, d√πng m·∫∑c ƒë·ªãnh")
                try:
                    driver.set_window_rect(0, 0, 500, 492)  # G√≥c tr√™n b√™n tr√°i + k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh
                    print(f"[DEBUG] S·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh cho {username}: (0, 0, 500, 492)")
                except Exception as e:
                    print(f"[ERROR] ‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t v·ªã tr√≠ m·∫∑c ƒë·ªãnh: {e}")
            
            # M·ªü Instagram
            print(f"[DEBUG] M·ªü Instagram cho {username}")
            driver.get("https://www.instagram.com/")
            time.sleep(2)
            
            # Load cookies n·∫øu c√≥
            print(f"[DEBUG] üìä PROGRESS: 30% - B·∫Øt ƒë·∫ßu load cookies cho {username}")
            self.load_cookies(driver, username)
            print(f"[DEBUG] üìä PROGRESS: 35% - Ho√†n th√†nh load cookies cho {username}")
            time.sleep(1)
            
            # üî• SMART CHECK: Ki·ªÉm tra theo th·ª© t·ª± ∆∞u ti√™n ƒê√öNG
            print(f"[DEBUG] üî• SMART CHECK cho {username}")
            
            # üö® PRIORITY 1: Check Account locked/restricted TR∆Ø·ªöC TI√äN!
            try:
                print(f"[DEBUG] üö® Ki·ªÉm tra t√†i kho·∫£n b·ªã kh√≥a/restricted cho {username}")
                if self.check_account_locked(driver):
                    print(f"[ERROR] ‚ùå T√†i kho·∫£n {username} b·ªã kh√≥a/restricted")
                    account["status"] = "‚ùå T√†i kho·∫£n b·ªã kh√≥a"
                    self.status_updated.emit(username, account["status"])
                    try:
                        self.close_browser_safely(driver, username)
                    except Exception:
                        pass  # Ignore close errors
                    return "T√†i kho·∫£n b·ªã kh√≥a", "Locked", None
            except Exception as e:
                print(f"[DEBUG] Account lock check error: {e}")
            
            # ‚ö†Ô∏è PRIORITY 2: Check 2FA requirement (ch·ªâ khi kh√¥ng b·ªã kh√≥a)
            try:
                print(f"[DEBUG] ‚ö†Ô∏è Ki·ªÉm tra y√™u c·∫ßu 2FA cho {username}")
                if self.check_2fa_required(driver):
                    print(f"[WARN] ‚ö†Ô∏è Ph√°t hi·ªán y√™u c·∫ßu 2FA cho {username}")
                    account["status"] = "‚ö†Ô∏è Y√™u c·∫ßu nh·∫≠p 2FA"
                    self.status_updated.emit(username, account["status"])
                    # Gi·ªØ browser m·ªü ƒë·ªÉ user x·ª≠ l√Ω 2FA
                    return "Y√™u c·∫ßu 2FA", "2FA", driver
            except Exception as e:
                print(f"[DEBUG] 2FA check error: {e}")
            
            # ‚ö†Ô∏è PRIORITY 3: Check Captcha requirement  
            try:
                print(f"[DEBUG] ‚ö†Ô∏è Ki·ªÉm tra y√™u c·∫ßu captcha cho {username}")
                if self.check_captcha_required(driver):
                    print(f"[WARN] ‚ö†Ô∏è Ph√°t hi·ªán y√™u c·∫ßu captcha cho {username}")
                    account["status"] = "‚ö†Ô∏è Y√™u c·∫ßu gi·∫£i captcha"
                    self.status_updated.emit(username, account["status"])
                    # Gi·ªØ browser m·ªü ƒë·ªÉ user x·ª≠ l√Ω captcha
                    return "Y√™u c·∫ßu captcha", "Captcha", driver
            except Exception as e:
                print(f"[DEBUG] Captcha check error: {e}")
            
            # ‚úÖ FINAL CHECK: Login success
            try:
                print(f"[DEBUG] üìä PROGRESS: 75% - Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng cho {username}")
                print(f"[DEBUG] üî• Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng cho {username}")
                
                # üî• TIMEOUT PROTECTION: Set th·ªùi gian timeout ng·∫Øn ƒë·ªÉ tr√°nh treo
                start_time = time.time()
                login_check_timeout = 8  # 8 gi√¢y timeout
                
                login_success = False
                print(f"[DEBUG] üîÑ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p check login cho {username} v·ªõi timeout {login_check_timeout}s")
                while time.time() - start_time < login_check_timeout:
                    try:
                        elapsed = time.time() - start_time
                        print(f"[DEBUG] üîÑ Check login iteration {elapsed:.1f}s cho {username}")
                        login_success = self.check_home_and_explore_icons(driver)
                        if login_success:
                            print(f"[DEBUG] ‚úÖ Login check SUCCESS sau {elapsed:.1f}s cho {username}")
                            break
                        time.sleep(0.5)  # Wait 0.5s before retry
                    except Exception as check_error:
                        print(f"[DEBUG] Login check iteration error: {check_error}")
                        time.sleep(0.5)
                
                print(f"[DEBUG] üîÑ K·∫øt th√∫c check login: login_success={login_success} cho {username}")
                if login_success:
                    print(f"[SUCCESS] ‚úÖ ƒê√É ƒêƒÇNG NH·∫¨P: {username}")
                    account["status"] = "ƒê√£ ƒëƒÉng nh·∫≠p"
                    self.status_updated.emit(username, account["status"])
                    
                    # üî• ULTRA SAFE OPERATIONS: Timeout wrap ƒë·ªÉ tr√°nh renderer timeout
                    import threading
                    
                    def safe_save_cookies():
                        try:
                            self.save_cookies(driver, username)
                            print(f"[DEBUG] ‚úÖ ƒê√£ l∆∞u cookies cho {username}")
                        except Exception as save_error:
                            print(f"[WARN] L·ªói l∆∞u cookies: {save_error}")
                    
                    def safe_close_browser():
                        try:
                            self.close_browser_safely(driver, username)
                            print(f"[DEBUG] ‚úÖ ƒê√£ ƒë√≥ng browser cho {username}")
                        except Exception as close_error:
                            print(f"[WARN] L·ªói ƒë√≥ng browser: {close_error}")
                    
                    # Ch·∫°y save cookies v·ªõi timeout
                    save_thread = threading.Thread(target=safe_save_cookies, daemon=True)
                    save_thread.start()
                    save_thread.join(timeout=3.0)  # Max 3s ƒë·ªÉ save cookies
                    
                    # Ch·∫°y close browser v·ªõi timeout  
                    close_thread = threading.Thread(target=safe_close_browser, daemon=True)
                    close_thread.start()
                    close_thread.join(timeout=2.0)  # Max 2s ƒë·ªÉ close browser
                    
                    return "ƒê√£ ƒëƒÉng nh·∫≠p", "OK", None
                else:
                    print(f"[INFO] ‚ùå CH∆ØA ƒêƒÇNG NH·∫¨P: {username} - B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p")
                    
                    # üöÄ T·ª∞ ƒê·ªòNG ƒêƒÇNG NH·∫¨P KHI PH√ÅT HI·ªÜN FORM LOGIN
                    password = account.get("password", "")
                    if not password:
                        print(f"[ERROR] Kh√¥ng c√≥ m·∫≠t kh·∫©u cho {username}")
                        account["status"] = "Thi·∫øu m·∫≠t kh·∫©u"
                        self.status_updated.emit(username, account["status"])
                        return "Thi·∫øu m·∫≠t kh·∫©u", "Error", driver
                    
                    try:
                        # Th·ª±c hi·ªán t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p
                        login_result = self.perform_auto_login(driver, username, password)
                        if login_result:
                            print(f"[SUCCESS] ‚úÖ T·ª∞ ƒê·ªòNG ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG: {username}")
                            account["status"] = "ƒê√£ ƒëƒÉng nh·∫≠p"
                            self.status_updated.emit(username, account["status"])
                            
                            # L∆∞u cookies v√† ƒë√≥ng browser
                            import threading
                            def safe_save_cookies():
                                try:
                                    self.save_cookies(driver, username)
                                    print(f"[DEBUG] ‚úÖ ƒê√£ l∆∞u cookies cho {username}")
                                except Exception as save_error:
                                    print(f"[WARN] L·ªói l∆∞u cookies: {save_error}")
                            
                            def safe_close_browser():
                                try:
                                    self.close_browser_safely(driver, username)
                                    print(f"[DEBUG] ‚úÖ ƒê√£ ƒë√≥ng browser cho {username}")
                                except Exception as close_error:
                                    print(f"[WARN] L·ªói ƒë√≥ng browser: {close_error}")
                            
                            save_thread = threading.Thread(target=safe_save_cookies, daemon=True)
                            save_thread.start()
                            save_thread.join(timeout=3.0)
                            
                            close_thread = threading.Thread(target=safe_close_browser, daemon=True)
                            close_thread.start()
                            close_thread.join(timeout=2.0)
                            
                            return "ƒê√£ ƒëƒÉng nh·∫≠p", "OK", None
                        else:
                            print(f"[ERROR] ‚ùå T·ª∞ ƒê·ªòNG ƒêƒÇNG NH·∫¨P TH·∫§T B·∫†I: {username}")
                            account["status"] = "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i"
                            self.status_updated.emit(username, account["status"])
                            return "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i", "Failed", driver
                    except Exception as login_error:
                        print(f"[ERROR] L·ªói t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p cho {username}: {login_error}")
                        account["status"] = f"L·ªói ƒëƒÉng nh·∫≠p: {str(login_error)}"
                        self.status_updated.emit(username, account["status"])
                        return "L·ªói ƒëƒÉng nh·∫≠p", "Error", driver
            except Exception as check_error:
                print(f"[ERROR] L·ªói khi check login: {check_error}")
                account["status"] = f"L·ªói check: {str(check_error)}"
                self.status_updated.emit(username, account["status"])
                return "L·ªói check login", "Error", driver
                
        except Exception as e:
            print(f"[ERROR] L·ªói simple login: {e}")
            account["status"] = f"L·ªói: {str(e)}"
            self.status_updated.emit(username, account["status"])
            if 'driver' in locals():
                self.close_browser_safely(driver, username)
            return "L·ªói", "Error", None

    def close_all_drivers(self):
        # ƒê√≥ng t·ª´ng driver trong thread ri√™ng bi·ªát ƒë·ªÉ kh√¥ng block GUI
        import threading
        def close_driver_safe(driver):
            try:
                # ‚≠ê CHECK _messaging_busy FLAG TR∆Ø·ªöC KHI ƒê√ìNG
                if hasattr(driver, '_messaging_busy') and driver._messaging_busy:
                    print(f"[DEBUG] Skip closing driver - ƒëang busy v·ªõi messaging")
                    return
                driver.quit()
            except Exception as e:
                print(f"[WARN] L·ªói khi ƒë√≥ng tr√¨nh duy·ªát: {e}")
        
        # ‚≠ê ONLY CLOSE DRIVERS THAT ARE NOT BUSY WITH MESSAGING
        drivers_to_keep = []
        for d in self.active_drivers:
            driver = d["driver"] if isinstance(d, dict) and "driver" in d else d
            if hasattr(driver, '_messaging_busy') and driver._messaging_busy:
                print(f"[DEBUG] Keeping driver alive - ƒëang busy v·ªõi messaging")
                drivers_to_keep.append(d)
            else:
                threading.Thread(target=close_driver_safe, args=(driver,)).start()
        
        self.active_drivers = drivers_to_keep
        print(f"[INFO] ƒê√£ ƒë√≥ng {len(self.active_drivers) - len(drivers_to_keep)} tr√¨nh duy·ªát. Gi·ªØ l·∫°i {len(drivers_to_keep)} driver ƒëang busy.")

    def import_accounts(self):
        """Nh·∫≠p danh s√°ch t√†i kho·∫£n t·ª´ file (h·ªó tr·ª£ .json, .txt, .csv)."""
        file_path, _ = QFileDialog.getOpenFileName(self, "Nh·∫≠p t√†i kho·∫£n", "", "All Supported (*.json *.txt *.csv);;JSON Files (*.json);;Text Files (*.txt);;CSV Files (*.csv)")
        if not file_path:
            return
        try:
            imported_accounts = []
            if file_path.endswith('.json'):
                with open(file_path, 'r', encoding='utf-8') as f:
                    imported_accounts = json.load(f)
            elif file_path.endswith('.txt'):
                with open(file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line:
                            # H·ªó tr·ª£: username ho·∫∑c username,password ho·∫∑c username,password,proxy
                            parts = [p.strip() for p in line.split(',')]
                            if len(parts) == 1:
                                imported_accounts.append({"username": parts[0], "password": "", "proxy": ""})
                            elif len(parts) == 2:
                                imported_accounts.append({"username": parts[0], "password": parts[1], "proxy": ""})
                            elif len(parts) >= 3:
                                imported_accounts.append({"username": parts[0], "password": parts[1], "proxy": parts[2]})
            elif file_path.endswith('.csv'):
                import csv
                with open(file_path, 'r', encoding='utf-8') as f:
                    reader = csv.reader(f)
                    for row in reader:
                        if not row: continue
                        # H·ªó tr·ª£: username,password,proxy
                        username = row[0].strip() if len(row) > 0 else ""
                        password = row[1].strip() if len(row) > 1 else ""
                        proxy = row[2].strip() if len(row) > 2 else ""
                        if username:
                            imported_accounts.append({"username": username, "password": password, "proxy": proxy})
            else:
                QMessageBox.warning(self, "L·ªói", "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!")
                return

            # L·∫•y danh s√°ch username hi·ªán t·∫°i (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
            existing_usernames = set(acc.get("username", "").lower() for acc in self.accounts)
            # Lo·∫°i b·ªè t√†i kho·∫£n tr√πng username trong ch√≠nh file import
            seen = set()
            unique_imported_accounts = []
            for acc in imported_accounts:
                uname = acc.get("username", "").lower()
                if uname and uname not in seen:
                    seen.add(uname)
                    unique_imported_accounts.append(acc)
            # L·ªçc ra c√°c t√†i kho·∫£n m·ªõi ch∆∞a c√≥ trong b·∫£ng hi·ªán t·∫°i
            new_accounts = [acc for acc in unique_imported_accounts if acc.get("username", "").lower() not in existing_usernames]
            if not new_accounts:
                QMessageBox.information(self, "Th√¥ng b√°o", "Kh√¥ng c√≥ t√†i kho·∫£n m·ªõi n√†o ƒë∆∞·ª£c th√™m (t·∫•t c·∫£ ƒë·ªÅu ƒë√£ t·ªìn t·∫°i trong b·∫£ng hi·ªán t·∫°i).")
            else:
                # B·ªï sung c√°c tr∆∞·ªùng m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                for acc in new_accounts:
                    acc.setdefault("selected", False)
                    acc.setdefault("fullname", "")
                    acc.setdefault("status", "Ch∆∞a ƒëƒÉng nh·∫≠p")
                    acc.setdefault("gender", "-")
                    acc.setdefault("followers", "")
                    acc.setdefault("following", "")
                    acc.setdefault("last_action", "")
                    acc.setdefault("proxy_status", "Ch∆∞a ki·ªÉm tra")
                    acc.setdefault("permanent_proxy", "")  # ‚≠ê TH√äM: Proxy vƒ©nh vi·ªÖn cho t√†i kho·∫£n
                self.accounts.extend(new_accounts)
                self.save_accounts()
                self.update_account_table()
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ nh·∫≠p {len(new_accounts)} t√†i kho·∫£n m·ªõi th√†nh c√¥ng!")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ nh·∫≠p t√†i kho·∫£n: {str(e)}")

    def open_folder_manager(self):
        # Ki·ªÉm tra xem self.folder_map c√≥ ƒë∆∞·ª£c kh·ªüi t·∫°o kh√¥ng
        if not hasattr(self, 'folder_map'):
            self.folder_map = self.load_folder_map()
        from src.ui.folder_manager import FolderManagerDialog  # Import ·ªü ƒë√¢y ƒë·ªÉ tr√°nh l·ªói circular dependency
        dialog = FolderManagerDialog(self.accounts, self.folder_map, self)  # Truy·ªÅn self.accounts v√† self.folder_map
        dialog.folders_updated.connect(self.on_folders_updated)  # K·∫øt n·ªëi t√≠n hi·ªáu c·∫≠p nh·∫≠t th∆∞ m·ª•c
        dialog.exec()

    def load_folder_list_to_combo(self):
        self.category_combo.clear()
        self.category_combo.addItem("T·∫•t c·∫£")
        # Lu√¥n load l·∫°i folder_map t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o m·ªõi nh·∫•t
        folder_map = self.load_folder_map()
        if folder_map and "_FOLDER_SET_" in folder_map:
            for folder in folder_map["_FOLDER_SET_"]:
                if folder != "T·ªïng":
                    self.category_combo.addItem(folder)
        print(f"[DEBUG] ƒê√£ t·∫£i danh s√°ch th∆∞ m·ª•c v√†o combobox: {folder_map.get('_FOLDER_SET_', [])}")

    def on_folder_changed(self):
        selected_folder = self.category_combo.currentText()
        if selected_folder == "T·∫•t c·∫£":
            self.update_account_table(self.accounts)
        else:
            filtered_accounts = [acc for acc in self.accounts if self.folder_map.get(acc.get("username"), "T·ªïng") == selected_folder]
            self.update_account_table(filtered_accounts)
        print(f"[DEBUG] ƒê√£ l·ªçc t√†i kho·∫£n theo th∆∞ m·ª•c: {selected_folder}")

    def on_folders_updated(self):
        # Khi th∆∞ m·ª•c ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong FolderManagerDialog, c·∫≠p nh·∫≠t l·∫°i combobox v√† b·∫£ng
        print("[DEBUG] T√≠n hi·ªáu folders_updated ƒë√£ ƒë∆∞·ª£c nh·∫≠n trong AccountManagementTab.")
        self.folder_map = self.load_folder_map()  # T·∫£i l·∫°i folder_map m·ªõi nh·∫•t
        self.load_folder_list_to_combo()  # C·∫≠p nh·∫≠t combobox
        self.update_account_table()  # C·∫≠p nh·∫≠t b·∫£ng t√†i kho·∫£n ƒë·ªÉ ph·∫£n √°nh thay ƒë·ªïi th∆∞ m·ª•c
        # ‚≠ê PH√ÅT T√çN HI·ªÜU ƒê·ªÇ ƒê·ªíNG B·ªò V·ªöI C√ÅC TAB KH√ÅC
        self.folders_updated.emit()

    def show_context_menu(self, pos):
        """Hi·ªÉn th·ªã menu chu·ªôt ph·∫£i."""
        print(f"[DEBUG] show_context_menu ƒë∆∞·ª£c g·ªçi t·∫°i v·ªã tr√≠: {pos}")
        menu = AccountContextMenu(self)
        menu.exec(self.account_table.viewport().mapToGlobal(pos))

    def on_table_item_double_clicked(self, index):
        selected_account: dict = self.accounts[index.row()]
        QMessageBox.information(self, "Chi ti·∫øt t√†i kho·∫£n", 
            f"Username: {selected_account.get('username', 'N/A')}\n"
            f"S·ªë ƒëi·ªán tho·∫°i: {selected_account.get('password', 'N/A')}\n"
            f"Tr·∫°ng th√°i: {selected_account.get('status', 'N/A')}\n"
            f"Proxy: {selected_account.get('proxy', 'N/A')}\n"
            f"Proxy VV: {selected_account.get('permanent_proxy', 'N/A')}\n"
            f"Tr·∫°ng th√°i Proxy: {selected_account.get('proxy_status', 'N/A')}\n"
            f"Follower: {selected_account.get('followers', 'N/A')}\n"
            f"Following: {selected_account.get('following', 'N/A')}\n"
            f"H√†nh ƒë·ªông cu·ªëi: {selected_account.get('last_action', 'N/A')}")

    @Slot(str, str)
    def on_status_updated(self, username, status):
        """Update tr·∫°ng th√°i t·ª´ thread m·ªôt c√°ch an to√†n"""
        print(f"[DEBUG] on_status_updated ƒë∆∞·ª£c g·ªçi cho {username} v·ªõi status: {status}")
        
        # ‚≠ê CONSOLE LOG CHO ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG (Kh√¥ng hi·ªÉn th·ªã popup n·ªØa)
        if status == "ƒê√£ ƒëƒÉng nh·∫≠p" or "ƒëƒÉng nh·∫≠p th√†nh c√¥ng" in status.lower():
            print(f"[SUCCESS] üéâ {username} ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!")
            # ƒê√£ b·ªè notification popup v√¨ c·ªôt tr·∫°ng th√°i ƒë√£ hi·ªÉn th·ªã r√µ r√†ng
        
        # T√¨m v√† c·∫≠p nh·∫≠t account trong danh s√°ch
        found = False
        account_row = -1
        for i, account in enumerate(self.accounts):
            if account.get("username") == username:
                # ‚≠ê KH√îNG CHO PH√âP OVERRIDE STATUS "ƒê√£ ƒëƒÉng nh·∫≠p" 
                current_status = account.get("status", "")
                if current_status == "ƒê√£ ƒëƒÉng nh·∫≠p" and status != "ƒê√£ ƒëƒÉng nh·∫≠p":
                    # B·ªè qua n·∫øu ƒëang c·ªë override status ƒëƒÉng nh·∫≠p th√†nh c√¥ng
                    if "ƒëang" in status.lower() or "ƒë√£" not in status.lower():
                        print(f"[DEBUG] B·ªè qua override status '{status}' v√¨ t√†i kho·∫£n {username} ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng")
                        return
                
                account["status"] = status
                account["last_action"] = f"C·∫≠p nh·∫≠t: {status} l√∫c {time.strftime('%H:%M:%S')}"
                found = True
                account_row = i
                print(f"[DEBUG] T√¨m th·∫•y account {username} ·ªü row {i}, ƒë√£ c·∫≠p nh·∫≠t status")
                break
        
        if not found:
            print(f"[ERROR] Kh√¥ng t√¨m th·∫•y account {username} trong danh s√°ch accounts!")
            return
        
        # L∆∞u accounts
        self.save_accounts()
        
        # C·∫≠p nh·∫≠t ch·ªâ √¥ tr·∫°ng th√°i thay v√¨ to√†n b·ªô b·∫£ng ƒë·ªÉ tr√°nh dataChanged error
        try:
            if account_row >= 0 and account_row < self.account_table.rowCount():
                # Block signals ƒë·ªÉ tr√°nh l·ªói dataChanged
                self.account_table.blockSignals(True)
                
                # C·∫≠p nh·∫≠t ch·ªâ √¥ tr·∫°ng th√°i (c·ªôt 4)
                status_item = self.account_table.item(account_row, 4)
                if status_item:
                    status_item.setText(status)
                    
                    # ‚≠ê C·∫¢I THI·ªÜN M√ÄU S·∫ÆC V√Ä HI·ªÜU ·ª®NG CHO ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG
                    if status == "ƒê√£ ƒëƒÉng nh·∫≠p" or "ƒëƒÉng nh·∫≠p th√†nh c√¥ng" in status.lower():
                        status_item.setForeground(QColor("#4CAF50"))  # Xanh l√° ƒë·∫≠m h∆°n
                        status_item.setBackground(QColor("#E8F5E8"))  # N·ªÅn xanh nh·∫°t
                        # Th√™m icon success
                        status_item.setText(f"‚úÖ {status}")
                    elif status == "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i" or "L·ªói" in status:
                        status_item.setForeground(QColor("#F44336"))  # ƒê·ªè
                        status_item.setBackground(QColor("#FFEBEE"))  # N·ªÅn ƒë·ªè nh·∫°t
                        status_item.setText(f"‚ùå {status}")
                    elif status == "Die" or "kh√≥a" in status.lower():
                        status_item.setForeground(QColor("#FF5722"))  # ƒê·ªè cam
                        status_item.setBackground(QColor("#FFF3E0"))  # N·ªÅn cam nh·∫°t
                        status_item.setText(f"üö´ {status}")
                    elif "checkpoint" in status.lower() or "captcha" in status.lower():
                        status_item.setForeground(QColor("#FF9800"))  # Cam
                        status_item.setBackground(QColor("#FFF8E1"))  # N·ªÅn v√†ng nh·∫°t
                        status_item.setText(f"‚ö†Ô∏è {status}")
                    else:
                        status_item.setForeground(QColor("#333333"))  # X√°m ƒëen
                        status_item.setBackground(QColor("#ffffff"))  # N·ªÅn tr·∫Øng
                
                # ‚≠ê C·∫¨P NH·∫¨T C·ªòT "H√ÄNH ƒê·ªòNG CU·ªêI" C≈®NG ƒê∆Ø·ª¢C HIGHLIGHT
                last_action_item = self.account_table.item(account_row, 10)  # C·ªôt cu·ªëi c√πng
                if last_action_item:
                    last_action_text = f"C·∫≠p nh·∫≠t: {status} l√∫c {time.strftime('%H:%M:%S')}"
                    last_action_item.setText(last_action_text)
                    
                    if status == "ƒê√£ ƒëƒÉng nh·∫≠p":
                        last_action_item.setForeground(QColor("#4CAF50"))
                        last_action_item.setText(f"üéâ {last_action_text}")
                
                # Unblock signals
                self.account_table.blockSignals(False)
                
                # Force repaint
                self.account_table.viewport().update()
                
                print(f"[DEBUG] ƒê√£ c·∫≠p nh·∫≠t UI tr·ª±c ti·∫øp cho {username}: {status}")
            else:
                print(f"[ERROR] Row {account_row} kh√¥ng h·ª£p l·ªá cho b·∫£ng c√≥ {self.account_table.rowCount()} rows")
                
        except Exception as e:
            print(f"[ERROR] L·ªói khi c·∫≠p nh·∫≠t UI cho {username}: {e}")
            # ƒê·∫£m b·∫£o unblock signals
            self.account_table.blockSignals(False)
            
        # C·∫≠p nh·∫≠t th·ªëng k√™
        self.update_stats()

    def toggle_all_accounts_selection(self, checked):
        # Ch·ªâ tick/b·ªè tick c√°c d√≤ng ƒëang hi·ªÉn th·ªã (kh√¥ng b·ªã ·∫©n)
        for row_idx in range(self.account_table.rowCount()):
            if not self.account_table.isRowHidden(row_idx):
                item = self.account_table.item(row_idx, 0)
                if item:
                    model_index = self.account_table.model().index(row_idx, 0)
                    self.account_table.model().setData(model_index, checked, CheckboxDelegate.CheckboxStateRole)
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i 'selected' trong d·ªØ li·ªáu t√†i kho·∫£n g·ªëc
                    username = self.account_table.item(row_idx, 2).text()
                    for acc in self.accounts:
                        if acc.get("username", "") == username:
                            acc["selected"] = checked
        self.save_accounts()
        self.update_account_table()
        self.update_stats()

    def load_proxies(self):
        proxies = []
        proxies_file = "proxies.txt"
        if os.path.exists(proxies_file):
            with open(proxies_file, 'r', encoding='utf-8-sig') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        parts = line.split(':')
                        if len(parts) == 4:
                            ip, port, user, password = parts
                            proxies.append({"ip": ip, "port": port, "user": user, "pass": password, "status": "Ch∆∞a ki·ªÉm tra", "is_in_use": False, "usage_count": 0})
                        elif len(parts) == 2:  # No auth proxy
                            ip, port = parts
                            proxies.append({"ip": ip, "port": port, "user": "", "pass": "", "status": "Ch∆∞a ki·ªÉm tra", "is_in_use": False, "usage_count": 0})
                        else:
                            print(f"[WARN] ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá, b·ªè qua: {line}")
        print(f"[DEBUG] ƒê√£ t·∫£i {len(proxies)} proxy.")
        return proxies

    def load_folder_map(self):
        if os.path.exists(self.folder_map_file):
            try:
                with open(self.folder_map_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except json.JSONDecodeError:
                print("[ERROR] L·ªói ƒë·ªçc file folder_map.json. File c√≥ th·ªÉ b·ªã h·ªèng. T·∫°o l·∫°i map tr·ªëng.")
                return {}
        return {}

    def _assign_new_proxy(self, account):
        """T√¨m v√† g√°n m·ªôt proxy m·ªõi cho t√†i kho·∫£n n·∫øu proxy hi·ªán t·∫°i b·ªã l·ªói ho·∫∑c c·∫ßn xoay v√≤ng."""
        current_proxy = account.get("proxy", "")
        username = account.get("username", "")
        print(f"[DEBUG] ƒêang t√¨m proxy m·ªõi cho t√†i kho·∫£n {username}. Proxy hi·ªán t·∫°i: {current_proxy}")

        new_proxy_info = None

        # --- ∆Øu ti√™n 1: T√¨m m·ªôt proxy ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng (not in use) v√† c√≥ s·ªë l·∫ßn s·ª≠ d·ª•ng th·∫•p (< PROXY_USAGE_THRESHOLD) ---
        for proxy_info in self.proxies:
            if (proxy_info.get("status") == "OK" or proxy_info.get("status") == "Ch∆∞a ki·ªÉm tra") and \
               not proxy_info.get("is_in_use", False) and \
               proxy_info.get("usage_count", 0) < self.PROXY_USAGE_THRESHOLD:
                new_proxy_info = proxy_info
                print(f"[DEBUG] ƒê√£ t√¨m th·∫•y proxy ∆∞u ti√™n (th·∫•p s·ª≠ d·ª•ng): {proxy_info.get('ip')}. Usage: {proxy_info.get('usage_count')}")
                break

        # --- ∆Øu ti√™n 2: Fallback ƒë·∫øn b·∫•t k·ª≥ proxy n√†o ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† c√≥ tr·∫°ng th√°i t·ªët (b·∫•t k·ªÉ usage_count) ---
        if not new_proxy_info:
            print("[DEBUG] Kh√¥ng t√¨m th·∫•y proxy ∆∞u ti√™n, ƒëang t√¨m proxy kh·∫£ d·ª•ng b·∫•t k·ª≥.")
            for proxy_info in self.proxies:
                if (proxy_info.get("status") == "OK" or proxy_info.get("status") == "Ch∆∞a ki·ªÉm tra") and \
                   not proxy_info.get("is_in_use", False):
                    new_proxy_info = proxy_info
                    print(f"[DEBUG] ƒê√£ t√¨m th·∫•y proxy kh·∫£ d·ª•ng: {proxy_info.get('ip')}. Usage: {proxy_info.get('usage_count')}")
                    break

        if new_proxy_info:
            account["proxy"] = f"{new_proxy_info.get('ip')}:{new_proxy_info.get('port')}:{new_proxy_info.get('user')}:{new_proxy_info.get('pass')}"
            new_proxy_info["is_in_use"] = True  # ƒê√°nh d·∫•u l√† ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng khi g√°n
            new_proxy_info["status"] = "ƒêang s·ª≠ d·ª•ng"  # C·∫≠p nh·∫≠t tr·∫°ng th√°i proxy trong danh s√°ch to√†n c·∫ßu
            account["proxy_status"] = "ƒêang chuy·ªÉn ƒë·ªïi"  # ƒê√°nh d·∫•u tr·∫°ng th√°i t√†i kho·∫£n ƒëang chuy·ªÉn ƒë·ªïi proxy
            print(f"[INFO] ƒê√£ g√°n proxy m·ªõi {account['proxy']} cho t√†i kho·∫£n {username}.")
        else:
            account["proxy_status"] = "Kh√¥ng c√≥ proxy kh·∫£ d·ª•ng"  # N·∫øu kh√¥ng t√¨m th·∫•y proxy n√†o ph√π h·ª£p
            print(f"[WARN] Kh√¥ng t√¨m th·∫•y proxy kh·∫£ d·ª•ng n√†o cho t√†i kho·∫£n {username}.")

        self.save_accounts()  # L∆∞u thay ƒë·ªïi v√†o accounts.json

    def _perform_warmup(self, driver, delay_multiplier):
        # Implementation of _perform_warmup method
        driver.get("https://www.instagram.com")
        time.sleep(2 * delay_multiplier)
        # Simulate scrolling down
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2 * delay_multiplier)
        # Simulate clicking on a random post or exploring
        try:
            # Find a post link and click it (simple example)
            post_links = driver.find_elements(By.XPATH, "//a[contains(@href, '/p/')]") 
            if post_links:
                random_post = random.choice(post_links)
                random_post.click()
                time.sleep(5 * delay_multiplier)  # Spend some time on the post
                driver.back()  # Go back to home feed
                time.sleep(2 * delay_multiplier)
        except Exception as e:
            print(f"[WARN] L·ªói khi th·ª±c hi·ªán warm-up: {e}")
        print("[DEBUG] ƒê√£ ho√†n t·∫•t phi√™n warm-up.")

    def get_info_selected_accounts(self):
        QMessageBox.information(self, "Ch·ª©c nƒÉng", "L·∫•y th√¥ng tin t√†i kho·∫£n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
        print("[DEBUG] Ch·ª©c nƒÉng get_info_selected_accounts ƒë∆∞·ª£c g·ªçi.")

    def open_browser_for_selected(self):
        QMessageBox.information(self, "Ch·ª©c nƒÉng", "M·ªü tr√¨nh duy·ªát ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
        print("[DEBUG] Ch·ª©c nƒÉng open_browser_for_selected ƒë∆∞·ª£c g·ªçi.")

    def logout_selected_accounts(self):
        self.update_account_table()
        QMessageBox.information(self, "Ch·ª©c nƒÉng", "ƒêƒÉng xu·∫•t t√†i kho·∫£n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
        print("[DEBUG] Ch·ª©c nƒÉng logout_selected_accounts ƒë∆∞·ª£c g·ªçi.")

    def delete_selected_accounts(self):
        # X√≥a c√°c t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c tick ch·ªçn (checkbox)
        selected_accounts = [acc for acc in self.accounts if acc.get("selected")]
        if not selected_accounts:
            QMessageBox.warning(self, "X√≥a t√†i kho·∫£n", "Vui l√≤ng tick ch·ªçn √≠t nh·∫•t m·ªôt t√†i kho·∫£n ƒë·ªÉ x√≥a.")
            return
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a {len(selected_accounts)} t√†i kho·∫£n ƒë√£ ch·ªçn?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            self.accounts = [acc for acc in self.accounts if not acc.get("selected")]
            self.save_accounts()
            self.update_account_table()
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a c√°c t√†i kho·∫£n ƒë√£ ch·ªçn.")

    def select_selected_accounts(self):
        selected_rows = self.account_table.selectionModel().selectedRows()
        for index in selected_rows:
            row = index.row()
            if row < len(self.accounts):
                model_index = self.account_table.model().index(row, 0)
                self.account_table.model().setData(model_index, True, CheckboxDelegate.CheckboxStateRole)
                self.accounts[row]["selected"] = True
        self.save_accounts()
        self.update_account_table()
        # QMessageBox.information(self, "Ch·ªçn t√†i kho·∫£n", f"ƒê√£ ch·ªçn {len(selected_rows)} t√†i kho·∫£n ƒë∆∞·ª£c b√¥i ƒëen.")
        print(f"[DEBUG] ƒê√£ ch·ªçn {len(selected_rows)} t√†i kho·∫£n ƒë∆∞·ª£c b√¥i ƒëen.")

    def deselect_selected_accounts(self):
        # B·ªè ch·ªçn c√°c t√†i kho·∫£n ƒëang ƒë∆∞·ª£c b√¥i ƒëen (highlighted) v√† ƒëang hi·ªÉn th·ªã
        selected_rows = self.account_table.selectionModel().selectedRows()
        for index in selected_rows:
            row = index.row()
            if not self.account_table.isRowHidden(row):
                item_checkbox = self.account_table.item(row, 0)
                if item_checkbox:
                    model_index = self.account_table.model().index(row, 0)
                    self.account_table.model().setData(model_index, False, CheckboxDelegate.CheckboxStateRole)
                    username = self.account_table.item(row, 2).text()
                    for acc in self.accounts:
                        if acc.get("username", "") == username:
                            acc["selected"] = False
        self.save_accounts()
        self.update_account_table()
        print(f"[DEBUG] ƒê√£ b·ªè ch·ªçn c√°c t√†i kho·∫£n ƒë∆∞·ª£c b√¥i ƒëen v√† ƒëang hi·ªÉn th·ªã.")

    def deselect_all_accounts(self):
        # B·ªè ch·ªçn t·∫•t c·∫£ t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c tick ch·ªçn (ch·ªâ c√°c d√≤ng ƒëang hi·ªÉn th·ªã)
        for row_idx in range(self.account_table.rowCount()):
            if not self.account_table.isRowHidden(row_idx):
                item = self.account_table.item(row_idx, 0)
                if item:
                    model_index = self.account_table.model().index(row_idx, 0)
                    self.account_table.model().setData(model_index, False, CheckboxDelegate.CheckboxStateRole)
                    username = self.account_table.item(row_idx, 2).text()
                    for acc in self.accounts:
                        if acc.get("username", "") == username:
                            acc["selected"] = False
        self.save_accounts()
        self.update_account_table()
        print(f"[DEBUG] ƒê√£ b·ªè ch·ªçn t·∫•t c·∫£ t√†i kho·∫£n ƒëang hi·ªÉn th·ªã.")

    def add_selected_to_folder(self, folder_name):
        # G√°n t·∫•t c·∫£ t√†i kho·∫£n ƒëang tick ch·ªçn v√†o folder_name
        selected_accounts = [acc for acc in self.accounts if acc.get("selected")]
        if not selected_accounts:
            QMessageBox.warning(self, "G√°n th∆∞ m·ª•c", "Vui l√≤ng tick ch·ªçn √≠t nh·∫•t m·ªôt t√†i kho·∫£n ƒë·ªÉ g√°n v√†o th∆∞ m·ª•c.")
            return
        for acc in selected_accounts:
            username = acc.get("username", "")
            if username:
                self.folder_map[username] = folder_name
        self.save_folder_map()
        self.update_account_table()
        QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ g√°n {len(selected_accounts)} t√†i kho·∫£n v√†o th∆∞ m·ª•c '{folder_name}'.")

    def remove_selected_from_folder(self):
        # ƒê∆∞a t·∫•t c·∫£ t√†i kho·∫£n ƒëang tick ch·ªçn v·ªÅ th∆∞ m·ª•c 'T·ªïng' n·∫øu ƒëang ·ªü th∆∞ m·ª•c kh√°c
        selected_accounts = [acc for acc in self.accounts if acc.get("selected")]
        if not selected_accounts:
            QMessageBox.warning(self, "B·ªè g√°n th∆∞ m·ª•c", "Vui l√≤ng tick ch·ªçn √≠t nh·∫•t m·ªôt t√†i kho·∫£n ƒë·ªÉ b·ªè g√°n.")
            return
        count = 0
        for acc in selected_accounts:
            username = acc.get("username", "")
            if username and self.folder_map.get(username) != "T·ªïng":
                self.folder_map[username] = "T·ªïng"
                count += 1
        self.save_folder_map()
        self.update_account_table()
        QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ b·ªè g√°n {count} t√†i kho·∫£n kh·ªèi c√°c th∆∞ m·ª•c.")

    def delete_selected_folder(self):
        QMessageBox.information(self, "Ch·ª©c nƒÉng", "X√≥a th∆∞ m·ª•c ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
        print("[DEBUG] Ch·ª©c nƒÉng delete_selected_folder ƒë∆∞·ª£c g·ªçi.")

    def set_account_status_selected(self, status):
        selected_accounts = [acc for acc in self.accounts if acc.get("selected")]
        if not selected_accounts:
            QMessageBox.warning(self, "Chuy·ªÉn tr·∫°ng th√°i", "Vui l√≤ng tick ch·ªçn √≠t nh·∫•t m·ªôt t√†i kho·∫£n.")
            return
        for acc in selected_accounts:
            acc["status"] = status
        self.save_accounts()
        self.update_account_table()
        QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ chuy·ªÉn tr·∫°ng th√°i {len(selected_accounts)} t√†i kho·∫£n sang '{status}'.")

    def update_selected_proxy_info(self):
        import re
        selected_accounts = [acc for acc in self.accounts if acc.get("selected")]
        if not selected_accounts:
            QMessageBox.warning(self, "C·∫≠p nh·∫≠t Proxy", "Vui l√≤ng tick ch·ªçn √≠t nh·∫•t m·ªôt t√†i kho·∫£n.")
            return
        proxy, ok = QInputDialog.getText(self, "Nh·∫≠p Proxy", "Nh·∫≠p proxy (ip:port ho·∫∑c ip:port:user:pass):")
        if not ok or not proxy.strip():
            return
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng proxy
        pattern = r'^(\d{1,3}\.){3}\d{1,3}:\d{2,5}(:\w+:\w+)?$'
        if not re.match(pattern, proxy.strip()):
            QMessageBox.warning(self, "L·ªói", "Proxy kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!\nƒê·ªãnh d·∫°ng h·ª£p l·ªá: ip:port ho·∫∑c ip:port:user:pass")
            return
        for acc in selected_accounts:
            acc["proxy"] = proxy.strip()
        self.save_accounts()
        self.update_account_table()
        QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t proxy cho {len(selected_accounts)} t√†i kho·∫£n.")

    def open_selected_user_data_folder(self):
        QMessageBox.information(self, "Ch·ª©c nƒÉng", "M·ªü th∆∞ m·ª•c UserData ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
        print("[DEBUG] Ch·ª©c nƒÉng open_selected_user_data_folder ƒë∆∞·ª£c g·ªçi.")

    def export_accounts(self):
        """Xu·∫•t danh s√°ch t√†i kho·∫£n ra file."""
        file_path, _ = QFileDialog.getSaveFileName(self, "Xu·∫•t t√†i kho·∫£n", "", "JSON Files (*.json)")
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(self.accounts, f, ensure_ascii=False, indent=4)
                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ xu·∫•t t√†i kho·∫£n th√†nh c√¥ng!")
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t t√†i kho·∫£n: {str(e)}")

    def toggle_stealth_mode(self):
        """B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô ·∫©n danh."""
        self.stealth_mode_enabled = not self.stealth_mode_enabled
        status = "b·∫≠t" if self.stealth_mode_enabled else "t·∫Øt"
        QMessageBox.information(self, "Th√¥ng b√°o", f"ƒê√£ {status} ch·∫ø ƒë·ªô ·∫©n danh!")

    def delete_all_accounts(self):
        """X√≥a t·∫•t c·∫£ t√†i kho·∫£n."""
        reply = QMessageBox.question(self, "X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ t√†i kho·∫£n?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.accounts.clear()
            self.save_accounts()
            self.update_account_table()
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a t·∫•t c·∫£ t√†i kho·∫£n!")

    def close_popups(self, driver):
        # import time  # X√ìA D√íNG N√ÄY
        from selenium.webdriver.common.by import By
        close_selectors = [
            # Banner "Chrome controlled"
            "//div[contains(@class, 'controlled-indicator')]//button",
            "//div[contains(text(),'Ëá™Âä®ÊµãËØïËΩØ‰ª∂')]/following-sibling::button",
            "//div[contains(text(),'is being controlled')]/following-sibling::button",
            # Cookie/terms
            "//button[contains(@aria-label, 'Schlie√üen')]",
            "//button[contains(@aria-label, 'Close')]",
            "//button[contains(@aria-label, 'ÂÖ≥Èó≠')]",
            "//button[contains(text(), '√ó')]",
            "//button[text()='OK']",
            "//button[text()='Accept']",
            "//button[text()='Allow all cookies']",
            "//button[text()='Cho ph√©p t·∫•t c·∫£ cookie']",
            "//button[contains(text(), 'Akzeptieren')]",
        ]
        for _ in range(3):  # L·∫∑p l·∫°i 3 l·∫ßn ƒë·ªÉ ch·∫Øc ch·∫Øn t·∫Øt h·∫øt
            for sel in close_selectors:
                try:
                    btn = driver.find_element(By.XPATH, sel)
                    btn.click()
                    print(f"[DEBUG] ƒê√£ t·∫Øt popup v·ªõi selector: {sel}")
                    # time.sleep(0.2)  # X√ìA D√íNG N√ÄY
                except Exception:
                    continue
        # Inject CSS ·∫©n
                    # Inject CSS ·∫©n banner "Chrome controlled" n·∫øu c√≤n s√≥t
                try:
                    driver.execute_script("""
                    var el = document.querySelector('div.controlled-indicator');
                    if (el) { el.style.display = 'none'; }
                    """)
                except Exception:
                    pass

    def save_folder_map(self):
        if hasattr(self, 'folder_map_file'):
            try:
                with open(self.folder_map_file, "w", encoding="utf-8") as f:
                    json.dump(self.folder_map, f, ensure_ascii=False, indent=2)
            except Exception as e:
                print(f"[ERROR] L·ªói khi l∆∞u folder_map: {e}")

    def on_proxy_switch_changed(self, value):
        self.use_proxy = bool(value)
        self.update_proxy_switch_label()
        # L∆∞u tr·∫°ng th√°i v√†o file
        try:
            with open(self.settings_file, "w", encoding="utf-8") as f:
                json.dump({"use_proxy": self.use_proxy}, f)
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ l∆∞u tr·∫°ng th√°i s·ª≠ d·ª•ng proxy: {e}")
        print(f"[DEBUG] Tr·∫°ng th√°i s·ª≠ d·ª•ng proxy: {self.use_proxy}")

    def update_proxy_switch_label(self):
        if self.use_proxy:
            self.proxy_switch_label.setText("Proxy: ON")
            self.proxy_switch_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
        else:
            self.proxy_switch_label.setText("Proxy: OFF")
            self.proxy_switch_label.setStyleSheet("color: #888; font-weight: bold;")

    def closeEvent(self, event):
        # L∆∞u tr·∫°ng th√°i s·ª≠ d·ª•ng proxy khi ƒë√≥ng ·ª©ng d·ª•ng
        try:
            with open(self.settings_file, "w", encoding="utf-8") as f:
                json.dump({"use_proxy": self.use_proxy}, f)
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ l∆∞u tr·∫°ng th√°i s·ª≠ d·ª•ng proxy khi ƒë√≥ng ·ª©ng d·ª•ng: {e}")
        super().closeEvent(event)

    def save_cookies(self, driver, username):
        """‚ö° ULTRA SAFE COOKIES: Save cookies v·ªõi timeout protection"""
        try:
            import signal
            import os
            import json
            
            print(f"[DEBUG] ‚ö° Saving cookies for {username}...")
            
            # üî• TIMEOUT PROTECTION: Max 3 seconds for get_cookies
            def timeout_handler(signum, frame):
                raise TimeoutError("Cookies save timeout")
            
            try:
                # Set timeout for Windows (alternative approach)
                from selenium.webdriver.support.ui import WebDriverWait
                from selenium.webdriver.support import expected_conditions as EC
                
                # Quick check if driver is still responsive (NO WebDriverWait)
                try:
                    # Simple check without WebDriverWait to avoid renderer timeout
                    current_url = driver.current_url  # Basic connectivity test
                    if not current_url:
                        print(f"[WARN] Driver not responsive, skipping cookies save for {username}")
                        return False
                except Exception as connectivity_error:
                    print(f"[WARN] Driver connectivity failed: {connectivity_error}")
                    return False
                
                # üî• SAFE COOKIES EXTRACTION with timeout
                os.makedirs('sessions', exist_ok=True)
                
                # Use threading for timeout on Windows
                import threading
                cookies = None
                exception_holder = [None]
                
                def get_cookies_with_timeout():
                    try:
                        nonlocal cookies
                        cookies = driver.get_cookies()
                    except Exception as e:
                        exception_holder[0] = e
                
                thread = threading.Thread(target=get_cookies_with_timeout, daemon=True)
                thread.start()
                thread.join(timeout=2.0)  # Max 2 seconds
                
                if thread.is_alive():
                    print(f"[WARN] ‚è∞ Cookies extraction timeout for {username}")
                    return False
                
                if exception_holder[0]:
                    raise exception_holder[0]
                
                if cookies is None:
                    print(f"[WARN] No cookies extracted for {username}")
                    return False
                
                # üî• SAFE FILE WRITE
                cookies_file = f'sessions/{username}_cookies.json'
                with open(cookies_file, 'w', encoding='utf-8') as f:
                    json.dump(cookies, f, indent=2)
                
                print(f"[DEBUG] ‚úÖ Cookies saved successfully for {username} ({len(cookies)} cookies)")
                return True
                
            except Exception as e:
                print(f"[WARN] Cookies save failed for {username}: {e}")
                return False
                
        except Exception as e:
            print(f"[ERROR] Cookies save error for {username}: {e}")
            return False

    def load_cookies(self, driver, username):
        """Load cookies v·ªõi debug tracking ƒë·ªÉ tr√°nh treo"""
        try:
            print(f"[DEBUG] üç™ B·∫Øt ƒë·∫ßu load cookies cho {username}")
            cookies_path = f'sessions/{username}_cookies.json'
            
            if not os.path.exists(cookies_path):
                print(f"[DEBUG] üç™ Kh√¥ng c√≥ file cookies cho {username}")
                return False
                
            print(f"[DEBUG] üç™ ƒê·ªçc file cookies: {cookies_path}")
            with open(cookies_path, 'r', encoding='utf-8') as f:
                cookies = json.load(f)
            
            print(f"[DEBUG] üç™ C√≥ {len(cookies)} cookies cho {username}")
            
            # Add t·ª´ng cookie m·ªôt v·ªõi error handling
            added_count = 0
            for i, cookie in enumerate(cookies):
                try:
                    # Selenium y√™u c·∫ßu ph·∫£i ·ªü ƒë√∫ng domain m·ªõi add ƒë∆∞·ª£c cookie
                    driver.add_cookie(cookie)
                    added_count += 1
                except Exception as cookie_error:
                    print(f"[DEBUG] üç™ L·ªói add cookie {i+1}: {cookie_error}")
                    continue
            
            print(f"[DEBUG] üç™ ƒê√£ add {added_count}/{len(cookies)} cookies cho {username}")
            return True
            
        except Exception as e:
            print(f"[DEBUG] üç™ L·ªói load cookies cho {username}: {e}")
            return False

    def show_captcha_dialog_safe(self, driver, username, dialog_type="captcha"):
        """Hi·ªÉn th·ªã dialog captcha/checkpoint m·ªôt c√°ch an to√†n"""
        try:
            from PySide6.QtWidgets import QMessageBox
            
            # Ch·ªâ hi·ªÉn th·ªã dialog n·∫øu ch∆∞a c√≥ dialog n√†o ƒëang m·ªü
            if hasattr(self, '_captcha_dialog_active') and self._captcha_dialog_active:
                print("[DEBUG] Captcha dialog ƒë√£ ƒëang m·ªü, b·ªè qua")
                return True
                
            self._captcha_dialog_active = True
            
            try:
                msg_box = QMessageBox(self)
                msg_box.setWindowTitle("Captcha/X√°c minh")
                
                if dialog_type == "captcha":
                    msg_box.setText(f"Ph√°t hi·ªán captcha/checkpoint cho t√†i kho·∫£n {username}.\n\n"
                                   "Vui l√≤ng:\n"
                                   "1. Chuy·ªÉn sang c·ª≠a s·ªï tr√¨nh duy·ªát\n"
                                   "2. Gi·∫£i captcha ho·∫∑c x√°c minh\n"
                                   "3. Nh·∫•n 'Ti·∫øp t·ª•c' khi ho√†n t·∫•t\n\n"
                                   "KH√îNG ƒë√≥ng tr√¨nh duy·ªát!")
                else:  # 2FA
                    msg_box.setText(f"Ph√°t hi·ªán y√™u c·∫ßu 2FA cho t√†i kho·∫£n {username}.\n\n"
                                   "Vui l√≤ng:\n"
                                   "1. Chuy·ªÉn sang c·ª≠a s·ªï tr√¨nh duy·ªát\n"
                                   "2. Nh·∫≠p m√£ x√°c minh 2FA\n"
                                   "3. Nh·∫•n 'Ti·∫øp t·ª•c' khi ho√†n t·∫•t\n\n"
                                   "KH√îNG ƒë√≥ng tr√¨nh duy·ªát!")
                
                msg_box.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                msg_box.button(QMessageBox.Ok).setText("Ti·∫øp t·ª•c")
                msg_box.button(QMessageBox.Cancel).setText("B·ªè qua")
                
                # ƒê·∫£m b·∫£o dialog lu√¥n ·ªü tr√™n c√πng
                msg_box.setWindowFlag(msg_box.windowFlags() | 0x00000008)  # WindowStaysOnTopHint
                
                # Hi·ªÉn th·ªã dialog
                result = msg_box.exec()
                
                self._captcha_dialog_active = False
                
                if result == QMessageBox.Ok:
                    print(f"[DEBUG] User ch·ªçn ti·∫øp t·ª•c x·ª≠ l√Ω {dialog_type} cho {username}")
                    return True
                else:
                    print(f"[DEBUG] User ch·ªçn b·ªè qua {dialog_type} cho {username}")
                    return False
                    
            except Exception as e:
                print(f"[ERROR] L·ªói khi hi·ªÉn th·ªã dialog: {e}")
                self._captcha_dialog_active = False
                return False
            
        except Exception as e:
            print(f"[ERROR] L·ªói trong show_captcha_dialog_safe: {e}")
            return False
    
    def check_login_success_after_captcha(self, driver, username):
        """Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng sau khi x·ª≠ l√Ω captcha"""
        try:
            print(f"[INFO] Ki·ªÉm tra ƒëƒÉng nh·∫≠p sau x·ª≠ l√Ω captcha cho {username}")
            
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ trang t·∫£i
            time.sleep(2)
            
            # S·ª≠ d·ª•ng h√†m ki·ªÉm tra nhanh
            return self.quick_login_check(driver)
            
        except Exception as e:
            print(f"[ERROR] L·ªói khi ki·ªÉm tra ƒëƒÉng nh·∫≠p sau captcha: {e}")
            return False

    def verify_login_and_collect_info_fast(self, driver, username, account):
        """X√°c minh ƒëƒÉng nh·∫≠p v√† thu th·∫≠p th√¥ng tin nhanh ch√≥ng"""
        try:
            print(f"[INFO] B·∫Øt ƒë·∫ßu x√°c minh ƒëƒÉng nh·∫≠p nhanh cho {username}")
            
            # B∆∞·ªõc 1: Ki·ªÉm tra nhanh ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
            login_verified = self.quick_login_check(driver)
            if not login_verified:
                print(f"[WARN] Ch∆∞a ƒëƒÉng nh·∫≠p th√†nh c√¥ng cho {username}")
                return False
            
            # B∆∞·ªõc 2: Thu th·∫≠p th√¥ng tin c∆° b·∫£n nhanh
            info = self.collect_basic_info_fast(driver, username)
            
            # B∆∞·ªõc 3: C·∫≠p nh·∫≠t th√¥ng tin v√†o account
            self.update_account_info(account, info)
            
            # B∆∞·ªõc 4: L∆∞u cookies ƒë·ªÉ l·∫ßn sau ƒëƒÉng nh·∫≠p nhanh h∆°n
            self.save_cookies(driver, username)
            
            # B∆∞·ªõc 5: C·∫≠p nh·∫≠t UI
            account["status"] = "ƒê√£ ƒëƒÉng nh·∫≠p"
            account["last_action"] = f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng l√∫c {time.strftime('%H:%M:%S')}"
            from PySide6.QtCore import QMetaObject, Qt
            self.status_updated.emit(username, account["status"])
            
            print(f"[SUCCESS] X√°c minh ƒëƒÉng nh·∫≠p th√†nh c√¥ng cho {username}")
            return True
            
        except Exception as e:
            print(f"[ERROR] L·ªói khi x√°c minh ƒëƒÉng nh·∫≠p cho {username}: {e}")
            return False
    
    def quick_login_check(self, driver):
        """üî• ZERO DOM LOGIN CHECK: Ch·ªâ URL + title, KH√îNG find_element"""
        try:
            # üöÄ STEP 1: URL check (FASTEST)
            current_url = driver.current_url.lower()
            print(f"[DEBUG] Quick check URL: {current_url}")
            
            # ‚ùå Definitely NOT logged in
            if any(x in current_url for x in ["login", "challenge", "checkpoint", "accounts/signup"]):
                print(f"[DEBUG] ‚ùå Not logged in - URL contains login/challenge")
                return False
            
            # ‚úÖ Likely logged in if on Instagram domain
            if "instagram.com" in current_url:
                print(f"[DEBUG] ‚úÖ Likely logged in - On Instagram domain")
                
                # üöÄ STEP 2: Title check for extra confidence
                try:
                    title = driver.title.lower()
                    if "login" in title:
                        print(f"[DEBUG] ‚ùå Login title detected")
                        return False
                    else:
                        print(f"[DEBUG] ‚úÖ Non-login title: {title}")
                        return True
                except Exception as title_error:
                    print(f"[DEBUG] Title check failed: {title_error}")
                    return True  # Default to success if on Instagram domain
            
            print(f"[DEBUG] ‚ùå Not on Instagram domain")
            return False
            
        except Exception as e:
            print(f"[ERROR] Quick login check error: {e}")
            # Default to True to avoid hanging
            return True
    
    def collect_basic_info_fast(self, driver, username):
        """Thu th·∫≠p th√¥ng tin c∆° b·∫£n nhanh ch√≥ng"""
        info = {
            "username": username,
            "profile_url": "",
            "followers": "N/A",
            "following": "N/A", 
            "posts": "N/A",
            "bio": "",
            "verified": False,
            "private": False
        }
        
        try:
            # L·∫•y URL hi·ªán t·∫°i
            current_url = driver.current_url
            if "instagram.com" in current_url:
                info["profile_url"] = current_url
            
            # Th·ª≠ truy c·∫≠p profile nhanh (n·∫øu ch∆∞a ·ªü profile)
            if f"instagram.com/{username}" not in current_url.lower():
                try:
                    driver.get(f"https://www.instagram.com/{username}/")
                    time.sleep(2)  # ƒê·ª£i trang t·∫£i
                except Exception:
                    pass
            
            # Thu th·∫≠p th√¥ng tin t·ª´ profile (v·ªõi timeout ng·∫Øn)
            try:
                # Followers, Following, Posts
                stats_selectors = [
                    "main section ul li a span",
                    "header section ul li a span",
                    "article header div span"
                ]
                
                for selector in stats_selectors:
                    try:
                        stats = driver.find_elements(By.CSS_SELECTOR, selector)
                        if len(stats) >= 3:
                            info["posts"] = stats[0].text.strip()
                            info["followers"] = stats[1].text.strip() 
                            info["following"] = stats[2].text.strip()
                            break
                    except Exception:
                        continue
                
                # Bio
                try:
                    bio_element = driver.find_element(By.CSS_SELECTOR, "header section div span")
                    info["bio"] = bio_element.text.strip()[:100]  # Gi·ªõi h·∫°n 100 k√Ω t·ª±
                except Exception:
                    pass
                
                # Verified badge
                try:
                    verified = driver.find_elements(By.CSS_SELECTOR, "svg[aria-label*='Verified']")
                    info["verified"] = len(verified) > 0
                except Exception:
                    pass
                
                # Private account
                try:
                    private_text = driver.page_source.lower()
                    info["private"] = "this account is private" in private_text
                except Exception:
                    pass
                    
            except Exception as e:
                print(f"[DEBUG] Kh√¥ng thu th·∫≠p ƒë∆∞·ª£c th√¥ng tin chi ti·∫øt: {e}")
            
            print(f"[DEBUG] Thu th·∫≠p info: {info}")
            return info
            
        except Exception as e:
            print(f"[ERROR] L·ªói khi thu th·∫≠p th√¥ng tin: {e}")
            return info
    
    def update_account_info(self, account, info):
        """C·∫≠p nh·∫≠t th√¥ng tin v√†o account"""
        try:
            account["profile_url"] = info.get("profile_url", "")
            account["followers"] = info.get("followers", "N/A")
            account["following"] = info.get("following", "N/A")
            account["posts"] = info.get("posts", "N/A")
            account["bio"] = info.get("bio", "")
            account["verified"] = info.get("verified", False)
            account["private"] = info.get("private", False)
            account["last_updated"] = time.strftime("%Y-%m-%d %H:%M:%S")
            
            print(f"[DEBUG] ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin cho {account.get('username')}")
            
        except Exception as e:
            print(f"[ERROR] L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin account: {e}")
    
    def debug_instagram_dom(self, driver, username):
        """Debug DOM structure c·ªßa Instagram ƒë·ªÉ hi·ªÉu layout"""
        try:
            print(f"[DEBUG] ===== DEBUG DOM STRUCTURE CHO {username} =====")
            
            # T√¨m t·∫•t c·∫£ c√°c link href="/"
            home_links = driver.find_elements(By.CSS_SELECTOR, "a[href='/']")
            print(f"[DEBUG] T√¨m th·∫•y {len(home_links)} link href='/'")
            for i, link in enumerate(home_links[:5]):  # Ch·ªâ log 5 link ƒë·∫ßu
                try:
                    location = link.location
                    size = link.size
                    is_displayed = link.is_displayed()
                    print(f"[DEBUG] Home link {i+1}: X={location['x']}, Y={location['y']}, W={size['width']}, H={size['height']}, Visible={is_displayed}")
                    print(f"[DEBUG] HTML: {link.get_attribute('outerHTML')[:300]}...")
                except Exception as e:
                    print(f"[DEBUG] L·ªói khi debug home link {i+1}: {e}")
            
            # T√¨m t·∫•t c·∫£ c√°c link explore
            explore_links = driver.find_elements(By.CSS_SELECTOR, "a[href*='explore']")
            print(f"[DEBUG] T√¨m th·∫•y {len(explore_links)} link explore")
            for i, link in enumerate(explore_links[:5]):  # Ch·ªâ log 5 link ƒë·∫ßu
                try:
                    location = link.location
                    size = link.size
                    is_displayed = link.is_displayed()
                    print(f"[DEBUG] Explore link {i+1}: X={location['x']}, Y={location['y']}, W={size['width']}, H={size['height']}, Visible={is_displayed}")
                    print(f"[DEBUG] HTML: {link.get_attribute('outerHTML')[:300]}...")
                except Exception as e:
                    print(f"[DEBUG] L·ªói khi debug explore link {i+1}: {e}")
            
            # T√¨m t·∫•t c·∫£ SVG icons
            svg_icons = driver.find_elements(By.CSS_SELECTOR, "svg")
            print(f"[DEBUG] T√¨m th·∫•y {len(svg_icons)} SVG icons")
            home_svg_count = 0
            explore_svg_count = 0
            for i, svg in enumerate(svg_icons[:20]):  # Ch·ªâ log 20 SVG ƒë·∫ßu
                try:
                    aria_label = svg.get_attribute('aria-label') or ""
                    location = svg.location
                    is_displayed = svg.is_displayed()
                    if is_displayed and location['y'] > 0:  # Ch·ªâ log SVG hi·ªÉn th·ªã
                        if any(keyword in aria_label.lower() for keyword in ['home', 'trang ch·ªß']):
                            home_svg_count += 1
                            print(f"[DEBUG] HOME SVG {home_svg_count}: aria-label='{aria_label}', X={location['x']}, Y={location['y']}")
                        elif any(keyword in aria_label.lower() for keyword in ['search', 'explore', 't√¨m ki·∫øm', 'kh√°m ph√°']):
                            explore_svg_count += 1
                            print(f"[DEBUG] EXPLORE SVG {explore_svg_count}: aria-label='{aria_label}', X={location['x']}, Y={location['y']}")
                except Exception as e:
                    continue
                    
            print(f"[DEBUG] T·ªïng: {home_svg_count} Home SVG, {explore_svg_count} Explore SVG")
            print(f"[DEBUG] ===== K·∫æT TH√öC DEBUG DOM =====")
            
        except Exception as e:
            print(f"[DEBUG] L·ªói khi debug DOM: {e}")

    def check_home_and_explore_icons(self, driver):
        """‚ö° ULTRA FAST LOGIN DETECTION: URL-first approach v·ªõi 99% accuracy"""
        return self.ultra_fast_login_detection(driver)
    
    def ultra_fast_login_detection(self, driver):
        """‚ö° SI√äU NHANH - CH√çNH X√ÅC 99%: Nh·∫≠n di·ªán tr·∫°ng th√°i trong <1 gi√¢y"""
        try:
            print("[DEBUG] ‚ö° ULTRA FAST LOGIN DETECTION - URL FIRST...")
            
            # üöÄ STEP 1: URL-BASED DETECTION (FASTEST - 0.1s)
            try:
                current_url = driver.current_url.lower()
                print(f"[DEBUG] üîç URL: {current_url}")
                
                # ‚ùå CH·∫ÆC CH·∫ÆN CH∆ØA ƒêƒÇNG NH·∫¨P - URL patterns
                login_fail_patterns = [
                    "accounts/login", "/login/", "/login?", "accounts/emaillogin",
                    "accounts/signup", "accounts/onetap", "accounts/password/reset"
                ]
                
                for pattern in login_fail_patterns:
                    if pattern in current_url:
                        print(f"[RESULT] ‚ùå CH∆ØA ƒêƒÇNG NH·∫¨P - URL: {pattern}")
                        return False
                
                # üîê 2FA DETECTION - URL patterns
                twofa_patterns = ["accounts/login/two_factor", "/challenge/", "two_factor"]
                for pattern in twofa_patterns:
                    if pattern in current_url:
                        print(f"[RESULT] üîê 2FA REQUIRED - URL: {pattern}")
                        return "2FA_REQUIRED"
                
                # ü§ñ CAPTCHA DETECTION - URL patterns  
                captcha_patterns = ["challenge", "checkpoint", "captcha", "recaptcha"]
                for pattern in captcha_patterns:
                    if pattern in current_url:
                        print(f"[RESULT] ü§ñ CAPTCHA REQUIRED - URL: {pattern}")
                        return "CAPTCHA_REQUIRED"
                
                # üö® ACCOUNT LOCKED - URL patterns
                locked_patterns = ["accounts/suspended", "accounts/locked", "accounts/disabled"]
                for pattern in locked_patterns:
                    if pattern in current_url:
                        print(f"[RESULT] üö® ACCOUNT LOCKED - URL: {pattern}")
                        return "ACCOUNT_LOCKED"
                
                # ‚úÖ LIKELY LOGGED IN - Instagram main domain without bad patterns
                if "instagram.com" in current_url and not any(bad in current_url for bad in 
                    ["login", "challenge", "checkpoint", "signup", "accounts/", "recover"]):
                    print(f"[RESULT] ‚úÖ LIKELY LOGGED IN - Clean Instagram URL")
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] URL check error: {e}")
            
            # üöÄ STEP 2: TITLE-BASED DETECTION (FAST - 0.2s)
            try:
                title = driver.title.lower()
                print(f"[DEBUG] üîç TITLE: '{title}'")
                
                # ‚ùå Login page titles
                if any(word in title for word in ["login", "sign up", "create account"]):
                    print(f"[RESULT] ‚ùå CH∆ØA ƒêƒÇNG NH·∫¨P - Title: {title}")
                    return False
                
                # üîê 2FA titles
                if any(word in title for word in ["verification", "2fa", "security code"]):
                    print(f"[RESULT] üîê 2FA REQUIRED - Title: {title}")
                    return "2FA_REQUIRED"
                
                # ü§ñ Captcha titles
                if any(word in title for word in ["captcha", "challenge", "security", "robot"]):
                    print(f"[RESULT] ü§ñ CAPTCHA REQUIRED - Title: {title}")
                    return "CAPTCHA_REQUIRED"
                
                # üö® Account locked titles
                if any(word in title for word in ["suspended", "disabled", "restricted", "locked"]):
                    print(f"[RESULT] üö® ACCOUNT LOCKED - Title: {title}")
                    return "ACCOUNT_LOCKED"
                
                # ‚úÖ Success titles
                if title == "instagram" or "instagram" in title and len(title) < 15:
                    print(f"[RESULT] ‚úÖ LIKELY LOGGED IN - Instagram title")
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] Title check error: {e}")
            
            # üéØ STEP 3: POPUP SAVE LOGIN INFO CHECK (MEDIUM - 0.3s)
            try:
                print("[DEBUG] üéØ Quick popup check...")
                import threading
                import time
                
                popup_found = False
                popup_check_done = False
                
                def check_popup():
                    nonlocal popup_found, popup_check_done
                    try:
                        page_source = driver.page_source
                        if any(text in page_source for text in [
                            "Save your login info", "save your login info",
                            "We can save your login info"
                        ]):
                            popup_found = True
                    except:
                        pass
                    finally:
                        popup_check_done = True
                
                # Timeout sau 0.5s v·ªõi proper cleanup
                thread = threading.Thread(target=check_popup, daemon=True)
                thread.start()
                thread.join(timeout=0.5)
                
                # Force cleanup n·∫øu thread ch∆∞a done
                if not popup_check_done:
                    print("[DEBUG] Popup check timeout - continuing...")
                
                if popup_found:
                    print(f"[RESULT] üéâ SAVE LOGIN POPUP -> ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG!")
                    self.handle_save_login_popup_quick(driver)
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] Popup check error: {e}")
            
            # üî• STEP 4: SIMPLE DOM CHECK (NO THREADING) - (0.5s max)
            try:
                print("[DEBUG] üî• Simple DOM check (no threading)...")
                
                # Set timeout for implicit wait temporarily
                original_timeout = driver.implicitly_wait(0.5)  # Very short timeout
                
                try:
                    # Ch·ªâ check 1 element ƒë∆°n gi·∫£n nh·∫•t - login form
                    login_inputs = driver.find_elements(By.CSS_SELECTOR, "input[name='username']")
                    if login_inputs and any(inp.is_displayed() for inp in login_inputs):
                        print(f"[RESULT] ‚ùå LOGIN FORM FOUND -> NOT LOGGED IN")
                        return False
                        
                    # Check navigation - ƒë∆°n gi·∫£n h∆°n
                    nav_links = driver.find_elements(By.CSS_SELECTOR, "a[href='/']")
                    if nav_links and len(nav_links) > 0:
                        print(f"[RESULT] ‚úÖ NAVIGATION FOUND -> LOGGED IN")
                        return True
                        
                except Exception as dom_error:
                    print(f"[DEBUG] DOM elements check failed: {dom_error}")
                finally:
                    # Restore original timeout
                    try:
                        driver.implicitly_wait(3)  # Restore to 3s
                    except:
                        pass
                        
            except Exception as e:
                print(f"[DEBUG] DOM check error: {e}")
            
            # üõ°Ô∏è FINAL FALLBACK: D·ª±a v√†o URL cu·ªëi c√πng
            try:
                current_url = driver.current_url.lower()
                if "instagram.com" in current_url:
                    # N·∫øu URL c√≥ d·∫•u hi·ªáu x·∫•u -> ch∆∞a ƒëƒÉng nh·∫≠p
                    if any(bad in current_url for bad in ["login", "challenge", "checkpoint", "signup"]):
                        print(f"[RESULT] ‚ùå FALLBACK: Bad URL patterns detected")
                        return False
                    else:
                        print(f"[RESULT] ‚úÖ FALLBACK: Clean Instagram URL assumed logged in")
                        return True
                        
                print(f"[RESULT] ‚ùå FALLBACK: Non-Instagram URL")
                return False
                
            except Exception as e:
                print(f"[ERROR] Fallback error: {e}")
                return False
            
        except Exception as e:
            print(f"[ERROR] ULTRA FAST DETECTION ERROR: {e}")
            return False
    def check_captcha_required(self, driver):
        """‚ö° ULTRA SIMPLE CAPTCHA CHECK: Ch·ªâ check URL v√† iframe"""
        try:
            print(f"[DEBUG] ‚ö° Quick captcha check...")
            
            # üî• STEP 1: Quick URL check (FASTEST) 
            try:
                current_url = driver.current_url.lower()
                print(f"[DEBUG] URL: {current_url}")
                
                # Check for captcha URL patterns
                captcha_url_patterns = [
                    "challenge", "checkpoint", "captcha", "recaptcha", "hcaptcha"
                ]
                
                for pattern in captcha_url_patterns:
                    if pattern in current_url:
                        print(f"[DEBUG] ‚úÖ CAPTCHA DETECTED - URL Pattern: {pattern}")
                        return True
                        
            except Exception as e:
                print(f"[DEBUG] URL check error: {e}")
            
            # üî• STEP 2: Quick iframe check (FAST)
            try:
                captcha_frames = driver.find_elements(By.CSS_SELECTOR, "iframe[src*='recaptcha'], iframe[src*='hcaptcha']")
                if captcha_frames:
                    print("[DEBUG] ‚úÖ CAPTCHA DETECTED - iframe captcha")
                    return True
            except Exception as e:
                print(f"[DEBUG] Iframe check error: {e}")
            
            # üî• STEP 3: Quick title check (FAST)
            try:
                title = driver.title.lower()
                captcha_title_words = ["captcha", "challenge", "security", "robot", "verify"]
                
                if any(word in title for word in captcha_title_words):
                    print(f"[DEBUG] ‚úÖ CAPTCHA DETECTED - Title: {title}")
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] Title check error: {e}")
            
            print(f"[DEBUG] ‚ùå No captcha detected")
            return False
            
        except Exception as e:
            print(f"[DEBUG] L·ªói khi ki·ªÉm tra captcha: {e}")
            return False
    
    def check_2fa_required(self, driver):
        """‚ö° ULTRA SIMPLE 2FA CHECK: Ch·ªâ check URL v√† title"""
        try:
            print(f"[DEBUG] ‚ö° Quick 2FA check...")
            
            # üî• STEP 1: Quick URL check (FASTEST)
            try:
                current_url = driver.current_url.lower()
                print(f"[DEBUG] URL: {current_url}")
                
                # Check for 2FA URL patterns
                twofa_url_patterns = [
                    "accounts/login/two_factor", "challenge/", "two_factor", "2fa", "verify"
                ]
                
                for pattern in twofa_url_patterns:
                    if pattern in current_url:
                        print(f"[DEBUG] ‚úÖ 2FA DETECTED - URL Pattern: {pattern}")
                        return True
                        
            except Exception as e:
                print(f"[DEBUG] URL check error: {e}")
            
            # üî• STEP 2: Quick title check (FAST)
            try:
                title = driver.title.lower()
                twofa_title_words = ["verification", "2fa", "security", "code", "authenticate"]
                
                if any(word in title for word in twofa_title_words):
                    print(f"[DEBUG] ‚úÖ 2FA DETECTED - Title: {title}")
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] Title check error: {e}")
            
            print(f"[DEBUG] ‚ùå No 2FA detected")
            return False

            
        except Exception as e:
            print(f"[ERROR] L·ªói khi ki·ªÉm tra 2FA: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def check_identity_verification_required(self, driver):
        """‚ö° ULTRA SIMPLE IDENTITY CHECK: Ch·ªâ check URL v√† title"""
        try:
            print(f"[DEBUG] ‚ö° Quick identity verification check...")
            
            # üî• STEP 1: Check login success first (URL-based, NO DOM)
            try:
                current_url = driver.current_url.lower()
                if "instagram.com" in current_url and not any(x in current_url for x in ["challenge", "checkpoint", "login"]):
                    print(f"[DEBUG] ‚úÖ Already logged in - Skip identity verification")
                    return False
            except:
                pass
            
            # üî• STEP 2: Quick URL check (FASTEST)
            try:
                current_url = driver.current_url.lower()
                print(f"[DEBUG] URL: {current_url}")
                
                # Check for identity verification URL patterns
                identity_url_patterns = [
                    "challenge", "checkpoint", "verify", "confirm", "identity"
                ]
                
                for pattern in identity_url_patterns:
                    if pattern in current_url:
                        print(f"[DEBUG] ‚úÖ IDENTITY VERIFICATION DETECTED - URL Pattern: {pattern}")
                        return True
                        
            except Exception as e:
                print(f"[DEBUG] URL check error: {e}")
            
            # üî• STEP 3: Quick title check (FAST)
            try:
                title = driver.title.lower()
                identity_title_words = ["verification", "identity", "confirm", "verify", "security"]
                
                if any(word in title for word in identity_title_words):
                    print(f"[DEBUG] ‚úÖ IDENTITY VERIFICATION DETECTED - Title: {title}")
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] Title check error: {e}")
            
            print(f"[DEBUG] ‚ùå No identity verification detected")
            return False
            
        except Exception as e:
            print(f"[DEBUG] L·ªói khi ki·ªÉm tra identity verification: {e}")
            return False

    def check_account_locked(self, driver):
        """‚ö° ULTRA SIMPLE ACCOUNT LOCK CHECK: Ch·ªâ check URL v√† title"""
        try:
            print(f"[DEBUG] ‚ö° Quick account lock check...")
            
            # üî• STEP 1: Quick URL check (FASTEST)
            try:
                current_url = driver.current_url.lower()
                print(f"[DEBUG] URL: {current_url}")
                
                # Check for account restriction URL patterns
                lock_url_patterns = [
                    "accounts/suspended", "accounts/locked", "accounts/disabled",
                    "challenge/", "checkpoint/", "restricted"
                ]
                
                for pattern in lock_url_patterns:
                    if pattern in current_url:
                        print(f"[ERROR] üö® ACCOUNT LOCKED - URL Pattern: {pattern}")
                        return True
                        
            except Exception as e:
                print(f"[DEBUG] URL check error: {e}")
            
            # üî• STEP 2: Quick title check (FAST)
            try:
                title = driver.title.lower()
                lock_title_words = ["suspended", "disabled", "restricted", "locked", "automated"]
                
                if any(word in title for word in lock_title_words):
                    print(f"[ERROR] üö® ACCOUNT LOCKED - Title: {title}")
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] Title check error: {e}")
            
            # üî• STEP 3: EMERGENCY TEXT CHECK (only if URL looks suspicious)
            try:
                if any(x in current_url for x in ["challenge", "checkpoint"]):
                    print(f"[DEBUG] üîç Emergency text check for challenge page...")
                    
                    # Quick page source check with timeout
                    import threading
                    page_text = None
                    
                    def get_page_source():
                        nonlocal page_text
                        try:
                            page_text = driver.page_source.lower()
                        except:
                            pass
                    
                    thread = threading.Thread(target=get_page_source, daemon=True)
                    thread.start()
                    thread.join(timeout=1.0)  # Max 1 second
                    
                    if page_text and thread.is_alive() == False:
                        # Only check critical keywords
                        critical_lock_keywords = [
                            "we suspect automated behavior",
                            "account has been disabled",
                            "account suspended"
                        ]
                        
                        for keyword in critical_lock_keywords:
                            if keyword in page_text:
                                print(f"[ERROR] üö® ACCOUNT LOCKED - Keyword: {keyword}")
                                return True
                    else:
                        print(f"[DEBUG] Page source check timeout/failed")
                        
            except Exception as e:
                print(f"[DEBUG] Text check error: {e}")
            
            print(f"[DEBUG] ‚úÖ Account not locked")
            return False
            
        except Exception as e:
            print(f"[DEBUG] L·ªói khi ki·ªÉm tra account locked: {e}")
            return False

    def check_save_login_info(self, driver):
        """‚ö° ULTRA SIMPLE SAVE LOGIN CHECK: Ch·ªâ check button elements"""
        try:
            print(f"[DEBUG] ‚ö° Quick save login info check...")
            
            # üî• STEP 1: Quick button element check (FASTEST)
            try:
                # T√¨m button "Informationen speichern" ho·∫∑c "Save Info"
                save_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'Informationen speichern') or contains(text(), 'Save Info') or contains(text(), 'Jetzt nicht') or contains(text(), 'Not Now')]")
                if save_buttons:
                    print("[DEBUG] ‚úÖ SAVE LOGIN DIALOG DETECTED - Button found")
                    return True
                
                # Ki·ªÉm tra c√°c selector kh√°c
                save_selectors = [
                    "button[type='button'][class*='_acan']",  # Instagram save button class
                    "div[role='button'][tabindex='0']",  # Instagram dialog buttons
                ]
                
                for selector in save_selectors:
                    try:
                        elements = driver.find_elements(By.CSS_SELECTOR, selector)
                        if elements:
                            # Ki·ªÉm tra text c·ªßa button
                            for element in elements:
                                text = element.text.lower()
                                if any(word in text for word in ["speichern", "save", "nicht", "not", "jetzt"]):
                                    print(f"[DEBUG] ‚úÖ SAVE LOGIN DIALOG DETECTED - Button: {text}")
                                    return True
                    except:
                        continue
                        
            except Exception as e:
                print(f"[DEBUG] Button check error: {e}")
            
            # üî• STEP 2: Quick title check (FAST)
            try:
                title = driver.title.lower()
                save_title_words = ["save", "speichern", "login", "information"]
                
                if any(word in title for word in save_title_words):
                    print(f"[DEBUG] ‚úÖ SAVE LOGIN DIALOG DETECTED - Title: {title}")
                    return True
                    
            except Exception as e:
                print(f"[DEBUG] Title check error: {e}")
            
            print(f"[DEBUG] ‚ùå No save login dialog detected")
            return False
            
        except Exception as e:
            print(f"[DEBUG] L·ªói khi ki·ªÉm tra save login info: {e}")
            return False

    def handle_save_login_popup_quick(self, driver):
        """üöÄ X·ª¨ L√ù NHANH POPUP SAVE LOGIN INFO - Kh√¥ng c·∫ßn username parameter"""
        try:
            print("[DEBUG] üöÄ X·ª≠ l√Ω nhanh popup Save Login Info...")
            
            # Danh s√°ch c√°c button "Not Now" c√≥ th·ªÉ c√≥
            not_now_buttons = [
                "//button[contains(text(), 'Not now')]",
                "//button[contains(text(), 'Not Now')]", 
                "//button[contains(text(), 'not now')]",
                "//div[@role='button' and contains(text(), 'Not now')]",
                "//div[@role='button' and contains(text(), 'Not Now')]"
            ]
            
            # Th·ª≠ click button "Not Now"
            for xpath in not_now_buttons:
                try:
                    button = driver.find_element(By.XPATH, xpath)
                    if button.is_displayed() and button.is_enabled():
                        button.click()
                        print("[SUCCESS] ‚úÖ ƒê√£ click 'Not Now' cho popup Save Login Info")
                        time.sleep(1)  # Ch·ªù popup ƒë√≥ng
                        return True
                except:
                    continue
            
            # Fallback: T√¨m b·∫•t k·ª≥ button n√†o c√≥ text li√™n quan "not"
            try:
                all_buttons = driver.find_elements(By.TAG_NAME, "button")
                for button in all_buttons:
                    if button.is_displayed() and button.is_enabled():
                        text = button.text.lower().strip()
                        if text and any(word in text for word in ["not", "skip", "later", "dismiss"]):
                            button.click()
                            print(f"[SUCCESS] ‚úÖ ƒê√£ click button '{button.text}' ƒë·ªÉ ƒë√≥ng popup")
                            time.sleep(1)
                            return True
            except:
                pass
            
            print("[WARN] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y button ƒë·ªÉ ƒë√≥ng popup Save Login Info")
            return False
            
        except Exception as e:
            print(f"[ERROR] L·ªói x·ª≠ l√Ω popup Save Login Info: {e}")
            return False

    def handle_save_login_info(self, driver, username):
        """X·ª≠ l√Ω form l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p - ch·ªçn 'Kh√¥ng l∆∞u' ƒë·ªÉ ti·∫øp t·ª•c"""
        try:
            print(f"[INFO] X·ª≠ l√Ω form l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p cho {username}")
            
            # T√¨m v√† click button "Jetzt nicht" (Not Now) ho·∫∑c "Nicht speichern"
            not_now_buttons = [
                "//button[contains(text(), 'Jetzt nicht')]",  # German "Not Now"
                "//button[contains(text(), 'Not Now')]",  # English "Not Now"
                "//button[contains(text(), 'Nicht speichern')]",  # German "Don't Save"
                "//button[contains(text(), \"Don't Save\")]",  # English "Don't Save"
                "//button[contains(text(), 'Skip')]",  # English "Skip"
                "//div[@role='button' and contains(text(), 'Jetzt nicht')]",  # German div button
                "//div[@role='button' and contains(text(), 'Not Now')]"  # English div button
            ]
            
            for xpath in not_now_buttons:
                try:
                    button = driver.find_element(By.XPATH, xpath)
                    if button.is_displayed() and button.is_enabled():
                        button.click()
                        print(f"[SUCCESS] ƒê√£ click 'Not Now' cho form l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p")
                        time.sleep(2)  # Ch·ªù form ƒë√≥ng
                        return True
                except:
                    continue
            
            # N·∫øu kh√¥ng t√¨m th·∫•y button "Not Now", th·ª≠ t√¨m button ƒë·∫ßu ti√™n c√≥ text ph√π h·ª£p
            try:
                all_buttons = driver.find_elements(By.TAG_NAME, "button")
                for button in all_buttons:
                    text = button.text.lower()
                    if any(word in text for word in ["nicht", "not", "skip", "later", "nein"]):
                        if button.is_displayed() and button.is_enabled():
                            button.click()
                            print(f"[SUCCESS] ƒê√£ click button '{button.text}' ƒë·ªÉ b·ªè qua l∆∞u th√¥ng tin")
                            time.sleep(2)
                            return True
            except:
                pass
            
            # N·∫øu v·∫´n kh√¥ng ƒë∆∞·ª£c, th·ª≠ nh·∫•n ESC ƒë·ªÉ ƒë√≥ng dialog
            try:
                driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
                print(f"[INFO] ƒê√£ nh·∫•n ESC ƒë·ªÉ ƒë√≥ng form l∆∞u th√¥ng tin")
                time.sleep(2)
                return True
            except:
                pass
            
            print(f"[WARN] Kh√¥ng th·ªÉ x·ª≠ l√Ω form l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p cho {username}")
            return False
            
        except Exception as e:
            print(f"[ERROR] L·ªói khi x·ª≠ l√Ω form l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p: {e}")
            return False

    def perform_auto_login(self, driver, username, password):
        """üöÄ T·ª∞ ƒê·ªòNG ƒêƒÇNG NH·∫¨P INSTAGRAM"""
        try:
            print(f"[DEBUG] üöÄ B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p cho {username}")
            
            # ƒê·∫£m b·∫£o ƒëang ·ªü trang Instagram
            current_url = driver.current_url
            if "instagram.com" not in current_url:
                driver.get("https://www.instagram.com/")
                time.sleep(3)
            
            # T√¨m v√† ƒëi·ªÅn username
            try:
                username_input = driver.find_element(By.CSS_SELECTOR, "input[name='username']")
                username_input.clear()
                time.sleep(0.5)
                
                # Nh·∫≠p t·ª´ng k√Ω t·ª± nh∆∞ con ng∆∞·ªùi  
                for char in username:
                    username_input.send_keys(char)
                    time.sleep(random.uniform(0.05, 0.15))
                    
                print(f"[DEBUG] ‚úÖ ƒê√£ nh·∫≠p username cho {username}")
            except Exception as e:
                print(f"[ERROR] Kh√¥ng t√¨m th·∫•y √¥ username: {e}")
                return False
            
            # T√¨m v√† ƒëi·ªÅn password
            try:
                password_input = driver.find_element(By.CSS_SELECTOR, "input[name='password']")
                password_input.clear()
                time.sleep(0.5)
                
                # Nh·∫≠p t·ª´ng k√Ω t·ª± nh∆∞ con ng∆∞·ªùi
                for char in password:
                    password_input.send_keys(char)
                    time.sleep(random.uniform(0.05, 0.15))
                    
                print(f"[DEBUG] ‚úÖ ƒê√£ nh·∫≠p password cho {username}")
            except Exception as e:
                print(f"[ERROR] Kh√¥ng t√¨m th·∫•y √¥ password: {e}")
                return False
            
            # T√¨m v√† click n√∫t ƒëƒÉng nh·∫≠p
            try:
                # Th·ª≠ nhi·ªÅu selector cho n√∫t login
                login_selectors = [
                    "button[type='submit']",
                    "button:contains('Log in')", 
                    "button:contains('Log In')",
                    "div[role='button']:contains('Log in')",
                    "//button[contains(text(),'Log in') or contains(text(),'Log In') or contains(text(),'ƒêƒÉng nh·∫≠p')]"
                ]
                
                login_button = None
                for selector in login_selectors:
                    try:
                        if selector.startswith("//"):
                            login_button = driver.find_element(By.XPATH, selector)
                        else:
                            login_button = driver.find_element(By.CSS_SELECTOR, selector)
                        break
                    except:
                        continue
                
                if login_button:
                    # Scroll ƒë·∫øn button v√† click
                    driver.execute_script("arguments[0].scrollIntoView(true);", login_button)
                    time.sleep(0.5)
                    login_button.click()
                    print(f"[DEBUG] ‚úÖ ƒê√£ click n√∫t ƒëƒÉng nh·∫≠p cho {username}")
                else:
                    print(f"[ERROR] Kh√¥ng t√¨m th·∫•y n√∫t ƒëƒÉng nh·∫≠p cho {username}")
                    return False
                    
            except Exception as e:
                print(f"[ERROR] L·ªói khi click n√∫t ƒëƒÉng nh·∫≠p: {e}")
                return False
            
            # Ch·ªù ƒëƒÉng nh·∫≠p v√† ki·ªÉm tra k·∫øt qu·∫£
            print(f"[DEBUG] ‚è≥ Ch·ªù x·ª≠ l√Ω ƒëƒÉng nh·∫≠p cho {username}...")
            time.sleep(5)
            
            # Ki·ªÉm tra c√≥ c·∫£nh b√°o l·ªói kh√¥ng
            try:
                error_elements = driver.find_elements(By.CSS_SELECTOR, 
                    "div[id*='error'], div[class*='error'], p[class*='error'], span[class*='error']")
                for error_elem in error_elements:
                    error_text = error_elem.text.lower()
                    if any(keyword in error_text for keyword in ['incorrect', 'wrong', 'invalid', 'sai', 'kh√¥ng ƒë√∫ng']):
                        print(f"[ERROR] Ph√°t hi·ªán l·ªói ƒëƒÉng nh·∫≠p: {error_text}")
                        return False
            except:
                pass
            
            # X·ª≠ l√Ω popup "Save Login Info" n·∫øu c√≥
            try:
                save_info_buttons = driver.find_elements(By.XPATH, 
                    "//button[contains(text(),'Not Now') or contains(text(),'Kh√¥ng ph·∫£i b√¢y gi·ªù') or contains(text(),'Save Info')]")
                for btn in save_info_buttons:
                    if btn.is_displayed():
                        btn.click()
                        print(f"[DEBUG] ‚úÖ ƒê√£ x·ª≠ l√Ω popup Save Login Info")
                        time.sleep(2)
                        break
            except:
                pass
            
            # X·ª≠ l√Ω popup "Turn on Notifications" n·∫øu c√≥  
            try:
                notification_buttons = driver.find_elements(By.XPATH,
                    "//button[contains(text(),'Not Now') or contains(text(),'Kh√¥ng ph·∫£i b√¢y gi·ªù')]")
                for btn in notification_buttons:
                    if btn.is_displayed():
                        btn.click()
                        print(f"[DEBUG] ‚úÖ ƒê√£ x·ª≠ l√Ω popup notification")
                        time.sleep(2)
                        break
            except:
                pass
            
            # Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng c√°ch ki·ªÉm tra URL v√† elements
            time.sleep(3)
            
            # Ki·ªÉm tra b·∫±ng h√†m ƒë√£ c√≥
            if self.check_home_and_explore_icons(driver):
                print(f"[SUCCESS] üéâ T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p th√†nh c√¥ng cho {username}")
                return True
            else:
                print(f"[ERROR] ‚ùå T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p th·∫•t b·∫°i cho {username}")
                return False
                
        except Exception as e:
            print(f"[ERROR] L·ªói trong qu√° tr√¨nh t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p cho {username}: {e}")
            return False

    def close_browser_safely(self, driver, username):
        """‚≠ê T·ªêI ∆ØU: ƒê√≥ng tr√¨nh duy·ªát m·ªôt c√°ch an to√†n v√† nhanh ch√≥ng"""
        import threading
        
        def close_with_timeout():
            try:
                print(f"[INFO] üîÑ B·∫Øt ƒë·∫ßu ƒë√≥ng tr√¨nh duy·ªát cho {username}")
                
                # B∆∞·ªõc 1: ƒê√≥ng t·∫•t c·∫£ tabs ngo·∫°i tr·ª´ tab ch√≠nh
                try:
                    handles = driver.window_handles
                    if len(handles) > 1:
                        for handle in handles[1:]:
                            try:
                                driver.switch_to.window(handle)
                                driver.close()
                            except:
                                continue
                        try:
                            driver.switch_to.window(handles[0])
                        except:
                            pass
                except Exception:
                    pass
                
                # B∆∞·ªõc 2: Cleanup kh√¥ng c·∫ßn thi·∫øt - kh√¥ng x√≥a cookies (ƒë√£ l∆∞u r·ªìi)
                try:
                    # Ch·ªâ clear local storage ƒë·ªÉ tr√°nh conflict
                    driver.execute_script("localStorage.clear();")
                except Exception:
                    pass
                
                # B∆∞·ªõc 3: Quit driver ch√≠nh
                try:
                    driver.quit()
                    print(f"[INFO] ‚úÖ ƒê√£ ƒë√≥ng tr√¨nh duy·ªát th√†nh c√¥ng cho {username}")
                    return True
                except Exception as e:
                    print(f"[WARN] L·ªói khi quit driver: {e}")
                
                # B∆∞·ªõc 4: Force terminate n·∫øu quit th·∫•t b·∫°i
                try:
                    if hasattr(driver, 'service') and hasattr(driver.service, 'process'):
                        process = driver.service.process
                        if process and process.poll() is None:  # Process v·∫´n ƒëang ch·∫°y
                            process.terminate()
                            # Ch·ªù t·ªëi ƒëa 2 gi√¢y ƒë·ªÉ process t·ª± terminate
                            for i in range(20):
                                if process.poll() is not None:
                                    break
                                time.sleep(0.1)
                            
                            # N·∫øu v·∫´n ch∆∞a terminate, kill force
                            if process.poll() is None:
                                process.kill()
                                print(f"[INFO] üî• ƒê√£ force kill browser process cho {username}")
                            else:
                                print(f"[INFO] ‚ö° ƒê√£ terminate browser process cho {username}")
                except Exception as e2:
                    print(f"[WARN] L·ªói khi terminate/kill process: {e2}")
                
                return True
                
            except Exception as e:
                print(f"[ERROR] L·ªói kh√¥ng mong mu·ªën khi ƒë√≥ng tr√¨nh duy·ªát: {e}")
                return False
        
        # ‚≠ê T·ªêI ∆ØU: Ch·∫°y trong thread ri√™ng v·ªõi timeout ng·∫Øn
        close_thread = threading.Thread(target=close_with_timeout, daemon=True)
        close_thread.start()
        
        # ‚ö° T·ªêI ∆ØU: Ch·ªù t·ªëi ƒëa 2 gi√¢y ƒë·ªÉ ƒë√≥ng browser (gi·∫£m t·ª´ 3 gi√¢y)
        close_thread.join(timeout=2.0)
        
        if close_thread.is_alive():
            print(f"[WARN] ‚è∞ Timeout khi ƒë√≥ng tr√¨nh duy·ªát cho {username} - ti·∫øp t·ª•c ch·∫°y")
        else:
            print(f"[INFO] ‚ú® Ho√†n t·∫•t ƒë√≥ng tr√¨nh duy·ªát cho {username}")

# H√†m helper b·ªï sung

def detect_checkpoint_or_captcha(driver):
    """Ph√°t hi·ªán captcha/checkpoint m·ªôt c√°ch ch√≠nh x√°c"""
    try:
        current_url = driver.current_url.lower()
        
        # 1. Ki·ªÉm tra URL c√≥ ch·ª©a challenge/checkpoint kh√¥ng
        if "challenge" in current_url or "checkpoint" in current_url:
            print("[DEBUG] Ph√°t hi·ªán challenge/checkpoint t·ª´ URL")
            return True
            
        # 2. Ki·ªÉm tra iframe captcha th·ª±c s·ª±
        try:
            recaptcha_frames = driver.find_elements(By.CSS_SELECTOR, "iframe[src*='recaptcha']")
            hcaptcha_frames = driver.find_elements(By.CSS_SELECTOR, "iframe[src*='hcaptcha']")
            
            if recaptcha_frames or hcaptcha_frames:
                print("[DEBUG] Ph√°t hi·ªán iframe captcha th·ª±c s·ª±")
                return True
        except Exception:
            pass
            
        # 3. Ki·ªÉm tra c√°c text c·ª• th·ªÉ v·ªÅ captcha/checkpoint (ch·ªâ khi ch∆∞a ƒëƒÉng nh·∫≠p)
        try:
            page_source = driver.page_source.lower()
            
            # N·∫øu ƒë√£ c√≥ home icon => ƒë√£ ƒëƒÉng nh·∫≠p => kh√¥ng c·∫ßn ki·ªÉm tra captcha
            if "svg[aria-label='home']" in page_source or "aria-label=\"home\"" in page_source:
                return False
                
            # Ch·ªâ ki·ªÉm tra captcha/checkpoint khi ch∆∞a ƒëƒÉng nh·∫≠p
            specific_captcha_keywords = [
                "we need to make sure you're a real person",
                "help us confirm you're human", 
                "confirm that you're human",
                "are you a robot",
                "verify that you're human",
                "security check",
                "suspicious login attempt",
                "unusual activity",
                "checkpoint required",
                "account temporarily locked"
            ]
            
            for keyword in specific_captcha_keywords:
                if keyword in page_source:
                    print(f"[DEBUG] Ph√°t hi·ªán captcha/checkpoint t·ª´ keyword: {keyword}")
                    return True
                    
        except Exception as e:
            print(f"[DEBUG] L·ªói khi ki·ªÉm tra page source: {e}")
            
        # 4. Ki·ªÉm tra c√°c element captcha c·ª• th·ªÉ
        captcha_selectors = [
            "div[class*='captcha']",
            "div[class*='recaptcha']", 
            "div[class*='hcaptcha']",
            "div[id*='captcha']",
            "form[class*='checkpoint']",
            "div[class*='checkpoint']"
        ]
        
        for selector in captcha_selectors:
            try:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                if elements and any(el.is_displayed() for el in elements):
                    print(f"[DEBUG] Ph√°t hi·ªán element captcha: {selector}")
                    return True
            except Exception:
                continue
                
    except Exception as e:
        print(f"[DEBUG] L·ªói trong detect_checkpoint_or_captcha: {e}")
        
    return False

def is_logged_in_desktop(driver):
    """Ki·ªÉm tra ƒëƒÉng nh·∫≠p desktop"""
    try:
        nav_divs = driver.find_elements(By.CLASS_NAME, "PolarisNavigationIcons")
        for nav in nav_divs:
            svgs = nav.find_elements(By.TAG_NAME, "svg")
            print(f"[DEBUG] S·ªë l∆∞·ª£ng SVG trong PolarisNavigationIcons: {len(svgs)}")
            if len(svgs) >= 3:
                print("[DEBUG] ƒê√£ nh·∫≠n di·ªán ƒë·ªß 3 icon SVG ƒë·∫ßu ti√™n trong PolarisNavigationIcons (Home, Explore, Reels)")
                return True
        print("[DEBUG] Kh√¥ng t√¨m th·∫•y ƒë·ªß 3 icon SVG trong PolarisNavigationIcons.")
    except Exception as e:
        print(f"[DEBUG] L·ªói khi ki·ªÉm tra icon SVG menu: {e}")
    return False