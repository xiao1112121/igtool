from PySide6.QtWidgets import QMenu, QMessageBox, QInputDialog
from PySide6.QtGui import QAction
from PySide6.QtCore import Qt
from functools import partial  # Th√™m d√≤ng n√†y
import json
import os
class AccountContextMenu(QMenu):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent # parent ·ªü ƒë√¢y l√† AccountManagementTab instance
        self.setup_menu()

    def setup_menu(self):
        # Debug: In ra folder_map khi m·ªü menu
        print("[DEBUG] folder_map khi m·ªü menu:", self.parent.folder_map)
        # Menu ch√≠nh
        self.add_action("ƒêƒÉng nh·∫≠p", self.parent.login_selected_accounts)
        
        # Menu con: Ch·ªçn/B·ªè ch·ªçn
        select_deselect_menu = self.addMenu("Ch·ªçn/B·ªè ch·ªçn")
        select_deselect_menu.addAction(self.create_action("Ch·ªçn t√†i kho·∫£n ƒëang ch·ªçn", self.parent.select_selected_accounts))
        select_deselect_menu.addAction(self.create_action("B·ªè ch·ªçn t√†i kho·∫£n ƒëang ch·ªçn", self.parent.deselect_selected_accounts))
        select_deselect_menu.addAction(self.create_action("Ch·ªçn t·∫•t c·∫£", lambda: self.parent.toggle_all_accounts_selection(True)))
        select_deselect_menu.addAction(self.create_action("B·ªè ch·ªçn t·∫•t c·∫£ t√†i kho·∫£n", self.parent.deselect_all_accounts))

        # Menu con: Qu·∫£n l√Ω th∆∞ m·ª•c
        folder_management_menu = self.addMenu("Th∆∞ m·ª•c")
        
        # Reload folder_map t·ª´ file n·∫øu c√≥ h√†m load_folder_map
        if hasattr(self.parent, 'load_folder_map'):
            self.parent.folder_map = self.parent.load_folder_map()
            print("[DEBUG] folder_map sau khi reload:", self.parent.folder_map)
        
        # L·∫•y danh s√°ch c√°c th∆∞ m·ª•c hi·ªán c√≥ t·ª´ folder_map c·ªßa AccountManagementTab
        folders = []
        if '_FOLDER_SET_' in self.parent.folder_map:
            folders = self.parent.folder_map['_FOLDER_SET_']
            if isinstance(folders, str):
                import json
                try:
                    folders = json.loads(folders)
                except Exception:
                    folders = []
        # Lo·∫°i b·ªè c√°c gi√° tr·ªã kh√¥ng ph·∫£i t√™n th∆∞ m·ª•c th·ª±c t·∫ø
        folders = [f for f in folders if isinstance(f, str) and f not in ("T·ªïng", "_FOLDER_SET_")]
        folders = sorted(folders)
        print("[DEBUG] folders l·∫•y ƒë∆∞·ª£c:", folders)
        # Add to folder submenu
        # Add to folder submenu
        add_to_folder_menu = folder_management_menu.addMenu("Th√™m v√†o th∆∞ m·ª•c")
        if folders:
            for folder_name in folders:
                # S·ª≠ d·ª•ng partial thay v√¨ lambda ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ v·ªõi bi·∫øn v√≤ng l·∫∑p
                action = QAction(folder_name, self)
                action.triggered.connect(partial(self.parent.add_selected_to_folder, folder_name))
                add_to_folder_menu.addAction(action)
        else:
            no_folder_action = QAction("Ch∆∞a c√≥ th∆∞ m·ª•c n√†o", self)
            no_folder_action.setEnabled(False)
            add_to_folder_menu.addAction(no_folder_action)
        
        # Remove from folder submenu: ch·ªâ c√≤n 1 action duy nh·∫•t
        folder_management_menu.addAction(self.create_action("X√≥a kh·ªèi th∆∞ m·ª•c", self.parent.remove_selected_from_folder))
        # ƒê√£ x√≥a action 'X√≥a th∆∞ m·ª•c ƒëang ch·ªçn' kh·ªèi menu 'Th∆∞ m·ª•c'. Kh√¥ng th√™m action n√†y v√†o menu n·ªØa.
        # (Kh√¥ng c√≥ d√≤ng n√†o th√™m action n√†y v√†o folder_management_menu)

        folder_management_menu.addSeparator()
        folder_management_menu.addAction(self.create_action("X√≥a th∆∞ m·ª•c ƒëang ch·ªçn", self.parent.delete_selected_folder)) # N·∫øu mu·ªën x√≥a m·ªôt th∆∞ m·ª•c c·ª• th·ªÉ

        # Menu con: Tr·∫°ng th√°i t√†i kho·∫£n
        set_status_menu = self.addMenu("Chuy·ªÉn tr·∫°ng th√°i")
        set_status_menu.addAction(self.create_action("Live", lambda: self.parent.set_account_status_selected("Live")))
        set_status_menu.addAction(self.create_action("Die", lambda: self.parent.set_account_status_selected("Die")))
        set_status_menu.addAction(self.create_action("Ch∆∞a ƒëƒÉng nh·∫≠p", lambda: self.parent.set_account_status_selected("Ch∆∞a ƒëƒÉng nh·∫≠p")))
        set_status_menu.addAction(self.create_action("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i", lambda: self.parent.set_account_status_selected("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")))

        self.addSeparator() # ƒê∆∞·ªùng ph√¢n c√°ch

        # ‚≠ê MENU QU·∫¢N L√ù PROXY Vƒ®NH VI·ªÑN
        permanent_proxy_menu = self.addMenu("Proxy vƒ©nh vi·ªÖn")
        permanent_proxy_menu.addAction(self.create_action("G√°n proxy vƒ©nh vi·ªÖn", self.assign_permanent_proxy))
        permanent_proxy_menu.addAction(self.create_action("X√≥a proxy vƒ©nh vi·ªÖn", self.remove_permanent_proxy))
        permanent_proxy_menu.addAction(self.create_action("Xem proxy vƒ©nh vi·ªÖn", self.view_permanent_proxy))

        self.addSeparator() # ƒê∆∞·ªùng ph√¢n c√°ch cho proxy management

        # ‚≠ê MENU ƒê·ªíNG B·ªò PROXY
        self.add_action("üîÑ ƒê·ªìng b·ªô Proxy t·ª´ tab Proxy", self.sync_proxy_from_proxy_tab)
        self.add_action("üéØ T·ª± ƒë·ªông g√°n Proxy kh·∫£ d·ª•ng", self.auto_assign_available_proxies)
        self.add_action("C·∫≠p nh·∫≠t th√¥ng tin Proxy", self.parent.update_selected_proxy_info)
        self.add_action("M·ªü th∆∞ m·ª•c UserData", self.parent.open_selected_user_data_folder)
        
        self.addSeparator()

        self.add_action("Xu·∫•t t√†i kho·∫£n", self.parent.export_accounts)
        self.add_action("Nh·∫≠p t√†i kho·∫£n", self.parent.import_accounts)
        self.add_action("B·∫≠t/T·∫Øt ch·∫ø ƒë·ªô ·∫©n danh", self.parent.toggle_stealth_mode)
        self.add_action("X√≥a t√†i kho·∫£n", self.parent.delete_selected_accounts)
        self.add_action("X√≥a t·∫•t c·∫£ t√†i kho·∫£n", self.parent.delete_all_accounts)


    def create_action(self, text, slot):
        action = QAction(text, self)
        if slot: # Only connect if slot is provided
            action.triggered.connect(slot)
        return action

    def add_action(self, text, slot): # Keep this for top-level menu items if preferred
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action) # Use QMenu's addAction for adding directly to this menu

    # ‚≠ê PERMANENT PROXY MANAGEMENT FUNCTIONS
    def assign_permanent_proxy(self):
        """G√°n proxy vƒ©nh vi·ªÖn cho c√°c t√†i kho·∫£n ƒë√£ ch·ªçn"""
        selected_accounts = [acc for acc in self.parent.accounts if acc.get('selected')]
        if not selected_accounts:
            QMessageBox.warning(self.parent, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 t√†i kho·∫£n!")
            return
        
        proxy_text, ok = QInputDialog.getText(
            self.parent, 
            "G√°n proxy vƒ©nh vi·ªÖn", 
            f"Nh·∫≠p proxy vƒ©nh vi·ªÖn cho {len(selected_accounts)} t√†i kho·∫£n:\n(Format: ip:port:user:pass ho·∫∑c ip:port)"
        )
        
        if ok and proxy_text.strip():
            proxy_text = proxy_text.strip()
            # Assign permanent proxy to selected accounts
            for account in selected_accounts:
                account["permanent_proxy"] = proxy_text
                print(f"[INFO] G√°n permanent proxy cho {account.get('username')}: {proxy_text}")
            
            # Save and update UI
            self.parent.save_accounts()
            self.parent.update_account_table()
            
            QMessageBox.information(
                self.parent, 
                "Th√†nh c√¥ng", 
                f"ƒê√£ g√°n proxy vƒ©nh vi·ªÖn cho {len(selected_accounts)} t√†i kho·∫£n:\n{proxy_text}"
            )

    def remove_permanent_proxy(self):
        """X√≥a proxy vƒ©nh vi·ªÖn c·ªßa c√°c t√†i kho·∫£n ƒë√£ ch·ªçn"""
        selected_accounts = [acc for acc in self.parent.accounts if acc.get('selected')]
        if not selected_accounts:
            QMessageBox.warning(self.parent, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 t√†i kho·∫£n!")
            return
        
        # Count accounts with permanent proxy
        accounts_with_permanent = [acc for acc in selected_accounts if acc.get("permanent_proxy", "").strip()]
        
        if not accounts_with_permanent:
            QMessageBox.information(self.parent, "Th√¥ng b√°o", "Kh√¥ng c√≥ t√†i kho·∫£n n√†o c√≥ proxy vƒ©nh vi·ªÖn!")
            return
        
        reply = QMessageBox.question(
            self.parent,
            "X√°c nh·∫≠n",
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a proxy vƒ©nh vi·ªÖn c·ªßa {len(accounts_with_permanent)} t√†i kho·∫£n?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            for account in selected_accounts:
                if account.get("permanent_proxy", "").strip():
                    print(f"[INFO] X√≥a permanent proxy c·ªßa {account.get('username')}: {account.get('permanent_proxy')}")
                    account["permanent_proxy"] = ""
            
            # Save and update UI
            self.parent.save_accounts()
            self.parent.update_account_table()
            
            QMessageBox.information(
                self.parent,
                "Th√†nh c√¥ng", 
                f"ƒê√£ x√≥a proxy vƒ©nh vi·ªÖn c·ªßa {len(accounts_with_permanent)} t√†i kho·∫£n!"
            )

    def view_permanent_proxy(self):
        """Xem th√¥ng tin proxy vƒ©nh vi·ªÖn c·ªßa c√°c t√†i kho·∫£n ƒë√£ ch·ªçn"""
        selected_accounts = [acc for acc in self.parent.accounts if acc.get('selected')]
        if not selected_accounts:
            QMessageBox.warning(self.parent, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 t√†i kho·∫£n!")
            return
        
        # Build info message
        info_lines = []
        accounts_with_permanent = 0
        
        for account in selected_accounts:
            username = account.get("username", "Unknown")
            permanent_proxy = account.get("permanent_proxy", "").strip()
            
            if permanent_proxy:
                info_lines.append(f"‚úÖ {username}: {permanent_proxy}")
                accounts_with_permanent += 1
            else:
                info_lines.append(f"‚ùå {username}: Kh√¥ng c√≥ proxy vƒ©nh vi·ªÖn")
        
        message = f"TH√îNG TIN PROXY Vƒ®NH VI·ªÑN ({accounts_with_permanent}/{len(selected_accounts)} c√≥ proxy):\n\n"
        message += "\n".join(info_lines)
        
        QMessageBox.information(self.parent, "Proxy vƒ©nh vi·ªÖn", message)

    def sync_proxy_from_proxy_tab(self):
        """ƒê·ªìng b·ªô proxy t·ª´ tab Proxy Management"""
        try:
            if hasattr(self.parent, 'sync_proxy_data'):
                print("[DEBUG] ‚≠ê Calling sync_proxy_data from context menu...")
                self.parent.sync_proxy_data()
            else:
                QMessageBox.warning(
                    self.parent, 
                    "L·ªói", 
                    "‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô proxy.\nMethod sync_proxy_data kh√¥ng t·ªìn t·∫°i."
                )
        except Exception as e:
            print(f"[ERROR] L·ªói khi sync proxy t·ª´ context menu: {e}")
            QMessageBox.critical(
                self.parent, 
                "L·ªói ƒë·ªìng b·ªô", 
                f"‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·ªìng b·ªô proxy:\n\n{str(e)}"
            )

    def auto_assign_available_proxies(self):
        """T·ª± ƒë·ªông g√°n proxy kh·∫£ d·ª•ng cho c√°c t√†i kho·∫£n ƒë√£ ch·ªçn"""
        try:
            selected_accounts = [acc for acc in self.parent.accounts if acc.get('selected')]
            if not selected_accounts:
                QMessageBox.warning(self.parent, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 t√†i kho·∫£n!")
                return
            
            # Load proxy data t·ª´ proxy_status.json  
            proxy_file = 'proxy_status.json'
            if not os.path.exists(proxy_file):
                QMessageBox.warning(
                    self.parent, 
                    "L·ªói", 
                    f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {proxy_file}\n\nVui l√≤ng import proxy t·ª´ tab 'Qu·∫£n l√Ω Proxy' tr∆∞·ªõc!"
                )
                return
            
            with open(proxy_file, 'r', encoding='utf-8') as f:
                proxy_data = json.load(f)
            
            # L·∫•y c√°c proxy kh·∫£ d·ª•ng (status OK v√† ch∆∞a ƒë∆∞·ª£c g√°n)
            available_proxies = []
            for proxy_info in proxy_data:
                proxy_string = proxy_info.get('proxy', '')
                assigned_account = proxy_info.get('assigned_account', '').strip()
                proxy_status = proxy_info.get('status', '').lower()
                
                # Proxy kh·∫£ d·ª•ng: status OK v√† ch∆∞a g√°n cho ai
                if proxy_status in ['ok', 'ho·∫°t ƒë·ªông'] and not assigned_account:
                    available_proxies.append(proxy_string)
            
            if not available_proxies:
                QMessageBox.information(
                    self.parent,
                    "Th√¥ng b√°o", 
                    "üì≠ Kh√¥ng c√≥ proxy kh·∫£ d·ª•ng!\n\n"
                    "üí° T·∫•t c·∫£ proxy ho·∫°t ƒë·ªông ƒë√£ ƒë∆∞·ª£c g√°n ho·∫∑c kh√¥ng c√≥ proxy n√†o c√≥ status 'OK'."
                )
                return
            
            # L·ªçc c√°c t√†i kho·∫£n ch∆∞a c√≥ proxy ho·∫∑c mu·ªën thay ƒë·ªïi
            accounts_needing_proxy = []
            for account in selected_accounts:
                username = account.get('username', '')
                regular_proxy = account.get('proxy', '').strip()
                permanent_proxy = account.get('permanent_proxy', '').strip()
                
                # T√†i kho·∫£n c·∫ßn proxy n·∫øu kh√¥ng c√≥ permanent proxy v√† (kh√¥ng c√≥ regular proxy ho·∫∑c mu·ªën override)
                if not permanent_proxy:
                    accounts_needing_proxy.append(account)
            
            if not accounts_needing_proxy:
                QMessageBox.information(
                    self.parent,
                    "Th√¥ng b√°o",
                    "üí° T·∫•t c·∫£ t√†i kho·∫£n ƒë√£ ch·ªçn ƒë·ªÅu c√≥ permanent proxy!\n\n"
                    "üîß S·ª≠ d·ª•ng 'X√≥a proxy vƒ©nh vi·ªÖn' n·∫øu mu·ªën g√°n proxy kh·∫£ d·ª•ng."
                )
                return
            
            # Assign proxy
            assigned_count = 0
            proxy_index = 0
            
            for account in accounts_needing_proxy:
                if proxy_index >= len(available_proxies):
                    break  # H·∫øt proxy kh·∫£ d·ª•ng
                
                username = account.get('username', '')
                old_proxy = account.get('proxy', '')
                new_proxy = available_proxies[proxy_index]
                
                account['proxy'] = new_proxy
                account['proxy_status'] = 'OK'
                
                print(f"[INFO] üéØ Auto-assigned proxy for {username}: {new_proxy}")
                assigned_count += 1
                proxy_index += 1
            
            # L∆∞u v√† c·∫≠p nh·∫≠t UI
            if assigned_count > 0:
                self.parent.save_accounts()
                self.parent.update_account_table()
                
                remaining_accounts = len(accounts_needing_proxy) - assigned_count
                remaining_proxies = len(available_proxies) - assigned_count
                
                QMessageBox.information(
                    self.parent,
                    "G√°n proxy th√†nh c√¥ng",
                    f"‚úÖ ƒê√£ t·ª± ƒë·ªông g√°n proxy cho {assigned_count} t√†i kho·∫£n!\n\n"
                    f"üìä C√≤n l·∫°i:\n"
                    f"  ‚Ä¢ {remaining_accounts} t√†i kho·∫£n ch∆∞a c√≥ proxy\n"
                    f"  ‚Ä¢ {remaining_proxies} proxy kh·∫£ d·ª•ng\n\n"
                    f"üí° Tip: S·ª≠ d·ª•ng 'G√°n proxy vƒ©nh vi·ªÖn' ƒë·ªÉ c·ªë ƒë·ªãnh proxy cho t√†i kho·∫£n quan tr·ªçng."
                )
            
        except Exception as e:
            print(f"[ERROR] L·ªói auto assign proxy: {e}")
            QMessageBox.critical(
                self.parent,
                "L·ªói g√°n proxy",
                f"‚ùå C√≥ l·ªói x·∫£y ra khi g√°n proxy t·ª± ƒë·ªông:\n\n{str(e)}"
            )

class ProxyContextMenu(QMenu):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.setup_menu()

    def setup_menu(self):
        # Menu cho Proxy Management Tab
        self.add_action("Th√™m proxy", self.parent.add_proxy)
        self.add_action("X√≥a proxy", self.parent.delete_proxy)
        self.add_action("Ki·ªÉm tra proxy", self.parent.check_proxy)
        self.add_action("Xu·∫•t proxy", self.parent.export_proxies)
        self.add_action("Nh·∫≠p proxy", self.parent.import_proxies)
        self.add_action("X√≥a t·∫•t c·∫£ proxy", self.parent.delete_all_proxies)

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)

class MessagingContextMenu(QMenu):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.setup_menu()

    def setup_menu(self):
        # Menu cho Messaging Tab
        self.add_action("G·ª≠i tin nh·∫Øn", self.parent.send_message)
        self.addSeparator()
        self.add_action("Ch·ªçn", self.select_rows)
        self.add_action("Ch·ªçn t·∫•t c·∫£", self.select_all)
        self.add_action("B·ªè ch·ªçn", self.deselect_rows)
        self.add_action("B·ªè ch·ªçn t·∫•t c·∫£", self.deselect_all)
        self.addSeparator()
        self.add_action("Copy th√¥ng tin", self.copy_info)
        self.add_action("Xem log g·ª≠i chi ti·∫øt", self.show_log)
        self.addSeparator()
        self.add_action("T·∫£i danh s√°ch ng∆∞·ªùi nh·∫≠n", self.parent.load_recipients)
        self.add_action("Xu·∫•t danh s√°ch ng∆∞·ªùi nh·∫≠n", self.parent.export_recipients)
        self.add_action("X√≥a danh s√°ch ng∆∞·ªùi nh·∫≠n", self.parent.clear_recipients)

    def get_selected_rows(self, context_row=None):
        selection = self.parent.account_table.selectionModel().selectedRows()
        if selection:
            return [idx.row() for idx in selection]
        elif context_row is not None:
            return [context_row]
        return []

    def select_rows(self):
        self.parent.select_selected_accounts()

    def select_all(self):
        for acc in self.parent.accounts:
            acc["selected"] = True
        self.parent.update_account_table()

    def deselect_rows(self):
        self.parent.deselect_selected_accounts()

    def deselect_all(self):
        for acc in self.parent.accounts:
            acc["selected"] = False
        self.parent.update_account_table()

    def copy_info(self):
        rows = self.get_selected_rows(getattr(self, 'context_row', None))
        if not rows:
            return
        lines = []
        for row in rows:
            acc = self.parent.accounts[row]
            stt = str(row+1)
            username = acc.get("username", "")
            status = acc.get("status", "")
            success = str(acc.get("success", ""))
            state = acc.get("state", "")
            lines.append(f"{stt}\t{username}\t{status}\t{success}\t{state}")
        QApplication.clipboard().setText("\n".join(lines))

    def show_log(self):
        rows = self.get_selected_rows(getattr(self, 'context_row', None))
        if not rows:
            return
        acc = self.parent.accounts[rows[0]]
        logs = acc.get("send_log", [])
        if not logs:
            QMessageBox.information(self.parent, "Log g·ª≠i chi ti·∫øt", "Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ g·ª≠i.")
            return
        msg = ""
        for log in logs:
            msg += f"Th·ªùi gian: {log.get('time', '')}\nK·∫øt qu·∫£: {log.get('result', '')}\nN·ªôi dung/L·ªói: {log.get('content', '')}\n---\n"
        QMessageBox.information(self.parent, f"Log g·ª≠i: {acc.get('username', '')}", msg)

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)

class DataScannerContextMenu(QMenu):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.setup_menu()

    def setup_menu(self):
        # ‚≠ê MENU T·ªêI ∆ØU CHO DATA SCANNER TAB
        
        # Scan controls
        self.add_action("üöÄ B·∫Øt ƒë·∫ßu qu√©t", self.parent.start_scan)
        self.add_action("‚èπÔ∏è D·ª´ng qu√©t", self.parent.stop_scan)
        
        self.addSeparator()
        
        # Selection controls 
        self.add_action("‚úÖ Ch·ªçn t·∫•t c·∫£ k·∫øt qu·∫£", self.select_all_results)
        self.add_action("‚ùå B·ªè ch·ªçn t·∫•t c·∫£", self.deselect_all_results)
        
        self.addSeparator()
        
        # Export controls
        export_menu = self.addMenu("üì§ Xu·∫•t d·ªØ li·ªáu")
        export_menu.addAction(self.create_action("üìÑ Xu·∫•t TXT (ch·ªâ username)", self.export_txt_only))
        export_menu.addAction(self.create_action("üìä Xu·∫•t CSV (ƒë·∫ßy ƒë·ªß)", self.parent.export_results))
        export_menu.addAction(self.create_action("üìã Copy username ƒë√£ ch·ªçn", self.copy_selected_usernames))
        
        self.addSeparator()
        
        # Clear controls
        self.add_action("üóëÔ∏è X√≥a k·∫øt qu·∫£ ƒë√£ ch·ªçn", self.delete_selected_results)
        self.add_action("üóëÔ∏è X√≥a t·∫•t c·∫£ k·∫øt qu·∫£", self.parent.clear_results)
        
        self.addSeparator()
        
        # Stats
        self.add_action("üìä Th·ªëng k√™ chi ti·∫øt", self.show_detailed_stats)

    def create_action(self, text, slot):
        action = QAction(text, self)
        if slot:
            action.triggered.connect(slot)
        return action

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)
    
    def select_all_results(self):
        """Ch·ªçn t·∫•t c·∫£ k·∫øt qu·∫£"""
        for i in range(self.parent.result_table.rowCount()):
            checkbox_item = self.parent.result_table.item(i, 0)
            if checkbox_item:
                checkbox_item.setCheckState(Qt.CheckState.Checked)
    
    def deselect_all_results(self):
        """B·ªè ch·ªçn t·∫•t c·∫£ k·∫øt qu·∫£"""
        for i in range(self.parent.result_table.rowCount()):
            checkbox_item = self.parent.result_table.item(i, 0)
            if checkbox_item:
                checkbox_item.setCheckState(Qt.CheckState.Unchecked)
    
    def export_txt_only(self):
        """Xu·∫•t ch·ªâ username ra file TXT"""
        if not self.parent.result_data:
            QMessageBox.warning(self.parent, "C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!")
            return
        
        file_path, _ = QFileDialog.getSaveFileName(
            self.parent,
            "Xu·∫•t username",
            f"usernames_{self.parent.get_current_timestamp().replace(':', '')}.txt",
            "Text Files (*.txt)"
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    for res in self.parent.result_data:
                        username = res.get('found_username', res.get('username', ''))
                        f.write(f"{username}\n")
                
                QMessageBox.information(
                    self.parent, 
                    "Xu·∫•t th√†nh c√¥ng", 
                    f"‚úÖ ƒê√£ xu·∫•t {len(self.parent.result_data)} username ra:\n{file_path}"
                )
            except Exception as e:
                QMessageBox.critical(self.parent, "L·ªói", f"‚ùå L·ªói xu·∫•t file: {str(e)}")
    
    def copy_selected_usernames(self):
        """Copy username ƒë√£ ch·ªçn v√†o clipboard"""
        selected_usernames = self.parent.get_selected_result_usernames()
        if not selected_usernames:
            QMessageBox.warning(self.parent, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 username!")
            return
        
        # Copy to clipboard
        QApplication.clipboard().setText('\n'.join(selected_usernames))
        
        QMessageBox.information(
            self.parent,
            "Copy th√†nh c√¥ng",
            f"‚úÖ ƒê√£ copy {len(selected_usernames)} username v√†o clipboard!"
        )
    
    def delete_selected_results(self):
        """X√≥a k·∫øt qu·∫£ ƒë√£ ch·ªçn"""
        selected_indices = []
        for i in range(self.parent.result_table.rowCount()):
            checkbox_item = self.parent.result_table.item(i, 0)
            if checkbox_item and checkbox_item.checkState() == Qt.CheckState.Checked:
                selected_indices.append(i)
        
        if not selected_indices:
            QMessageBox.warning(self.parent, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 k·∫øt qu·∫£ ƒë·ªÉ x√≥a!")
            return
        
        reply = QMessageBox.question(
            self.parent,
            "X√°c nh·∫≠n x√≥a",
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a {len(selected_indices)} k·∫øt qu·∫£ ƒë√£ ch·ªçn?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            # X√≥a t·ª´ cu·ªëi l√™n ƒë·∫ßu ƒë·ªÉ tr√°nh thay ƒë·ªïi index
            for i in reversed(selected_indices):
                if i < len(self.parent.result_data):
                    del self.parent.result_data[i]
            
            # C·∫≠p nh·∫≠t UI
            self.parent.update_result_table()
            self.parent.stats_label.setText(f"T·ªïng s·ªë username qu√©t ƒë∆∞·ª£c: {len(self.parent.result_data)}")
            
            QMessageBox.information(
                self.parent,
                "X√≥a th√†nh c√¥ng",
                f"‚úÖ ƒê√£ x√≥a {len(selected_indices)} k·∫øt qu·∫£!"
            )
    
    def show_detailed_stats(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ chi ti·∫øt"""
        if not self.parent.result_data:
            QMessageBox.information(self.parent, "Th·ªëng k√™", "Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™!")
            return
        
        # T√≠nh to√°n stats
        total = len(self.parent.result_data)
        scanners = set()
        targets = set()
        scan_types = {}
        
        for res in self.parent.result_data:
            scanner = res.get('scanner_account', res.get('account', ''))
            target = res.get('target_account', res.get('target', ''))
            scan_type = res.get('scan_type', 'Unknown')
            
            if scanner:
                scanners.add(scanner)
            if target:
                targets.add(target)
            
            scan_types[scan_type] = scan_types.get(scan_type, 0) + 1
        
        # T·∫°o message th·ªëng k√™
        stats_msg = f"üìä TH·ªêNG K√ä CHI TI·∫æT\n\n"
        stats_msg += f"üîç T·ªïng username t√¨m ƒë∆∞·ª£c: {total}\n"
        stats_msg += f"üë§ S·ªë t√†i kho·∫£n qu√©t: {len(scanners)}\n"
        stats_msg += f"üéØ S·ªë target ƒë∆∞·ª£c qu√©t: {len(targets)}\n\n"
        
        stats_msg += f"üìã PH√ÇN LO·∫†I THEO KI·ªÇU QU√âT:\n"
        for scan_type, count in scan_types.items():
            percentage = (count / total * 100) if total > 0 else 0
            stats_msg += f"  ‚Ä¢ {scan_type}: {count} ({percentage:.1f}%)\n"
        
        QMessageBox.information(self.parent, "Th·ªëng k√™ chi ti·∫øt", stats_msg)

class HistoryLogContextMenu(QMenu):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.setup_menu()

    def setup_menu(self):
        # Menu cho History Log Tab
        self.add_action("Xu·∫•t l·ªãch s·ª≠", self.parent.export_history)
        self.add_action("X√≥a l·ªãch s·ª≠", self.parent.clear_history)
        self.add_action("L·ªçc l·ªãch s·ª≠", self.parent.filter_history)

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)
