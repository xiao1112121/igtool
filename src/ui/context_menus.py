"""
Context Menu classes cho c√°c tab trong ·ª©ng d·ª•ng
"""

from PySide6.QtWidgets import QMenu, QMessageBox, QInputDialog, QTableWidgetSelectionRange
from PySide6.QtCore import Qt
from PySide6.QtGui import QAction, QGuiApplication
from functools import partial


class AccountContextMenu(QMenu):
    """Context menu ƒë∆°n gi·∫£n cho Account Management Tab"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent

    def show_account_context_menu(self, pos):
        """Hi·ªÉn th·ªã context menu cho t√†i kho·∫£n"""
        index = self.parent.account_table.indexAt(pos)
        if not index.isValid():
            return

        row = index.row()
        menu = QMenu(self.parent)

        # --- Nh√≥m: Ch·ªçn / B·ªè ch·ªçn ---
        action_select = QAction("‚úÖ Ch·ªçn d√≤ng n√†y", self.parent)
        action_deselect = QAction("‚ùé B·ªè ch·ªçn d√≤ng n√†y", self.parent)
        action_select_all = QAction("üîò Ch·ªçn t·∫•t c·∫£", self.parent)
        action_deselect_all = QAction("üö´ B·ªè ch·ªçn t·∫•t c·∫£", self.parent)

        action_select.triggered.connect(lambda: self.select_account_row(row))
        action_deselect.triggered.connect(lambda: self.deselect_account_row(row))
        action_select_all.triggered.connect(self.select_all_account_rows)
        action_deselect_all.triggered.connect(self.deselect_all_account_rows)

        # --- Nh√≥m: T√°c v·ª• t√†i kho·∫£n ---
        action_login = QAction("üîÅ ƒêƒÉng nh·∫≠p l·∫°i", self.parent)
        action_browser = QAction("üöÄ M·ªü tr√¨nh duy·ªát", self.parent)
        action_proxy = QAction("üõ†Ô∏è S·ª≠a Proxy", self.parent)
        action_delete_session = QAction("üßº X√≥a Session", self.parent)
        action_delete = QAction("‚ùå X√≥a t√†i kho·∫£n", self.parent)
        action_export = QAction("üì§ Xu·∫•t th√¥ng tin", self.parent)
        action_copy = QAction("üìã Sao ch√©p s·ªë ƒëi·ªán tho·∫°i", self.parent)
        action_check = QAction("üß™ Ki·ªÉm tra ho·∫°t ƒë·ªông", self.parent)
        action_start = QAction("ü§ñ Ch·∫°y t∆∞∆°ng t√°c", self.parent)
        action_pause = QAction("‚è∏Ô∏è T·∫°m d·ª´ng t∆∞∆°ng t√°c", self.parent)

        # G√°n h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng
        action_login.triggered.connect(lambda: self.login_account(row))
        action_browser.triggered.connect(lambda: self.open_browser(row))
        action_proxy.triggered.connect(lambda: self.edit_proxy(row))
        action_delete_session.triggered.connect(lambda: self.delete_session(row))
        action_delete.triggered.connect(lambda: self.delete_account(row))
        action_export.triggered.connect(self.export_selected_accounts)
        action_copy.triggered.connect(lambda: self.copy_phone_number(row))
        action_check.triggered.connect(lambda: self.check_status(row))
        action_start.triggered.connect(lambda: self.start_interaction(row))
        action_pause.triggered.connect(lambda: self.pause_interaction(row))

        # --- Th√™m c√°c action v√†o menu ---
        menu.addActions([action_select, action_deselect, action_select_all, action_deselect_all])
        menu.addSeparator()
        menu.addActions([
            action_login, action_browser, action_proxy,
            action_delete_session, action_delete,
            action_export, action_copy, action_check,
            action_start, action_pause
        ])

        menu.exec_(self.parent.account_table.viewport().mapToGlobal(pos))

    # --- C√°c h√†m x·ª≠ l√Ω selection ---
    def select_account_row(self, row):
        """Tick checkbox cho t·∫•t c·∫£ d√≤ng ƒë∆∞·ª£c b√¥i ƒëen"""
        from src.ui.account_management import CheckboxDelegate
        
        # L·∫•y t·∫•t c·∫£ d√≤ng ƒë∆∞·ª£c b√¥i ƒëen
        selected_ranges = self.parent.account_table.selectionModel().selectedRows()
        selected_rows = [index.row() for index in selected_ranges]
        
        # N·∫øu kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c b√¥i ƒëen, ch·ªâ tick d√≤ng hi·ªán t·∫°i
        if not selected_rows:
            selected_rows = [row]
        
        # Tick checkbox cho t·∫•t c·∫£ d√≤ng ƒë∆∞·ª£c ch·ªçn
        for selected_row in selected_rows:
            if selected_row < self.parent.account_table.rowCount():
                checkbox_item = self.parent.account_table.item(selected_row, 0)
                if checkbox_item:
                    checkbox_item.setData(CheckboxDelegate.CheckboxStateRole, True)
        
        self.parent.account_table.viewport().update()
        print(f"[DEBUG] ƒê√£ tick checkbox cho {len(selected_rows)} d√≤ng: {selected_rows}")

    def deselect_account_row(self, row):
        """B·ªè tick checkbox cho t·∫•t c·∫£ d√≤ng ƒë∆∞·ª£c b√¥i ƒëen"""
        from src.ui.account_management import CheckboxDelegate
        
        # L·∫•y t·∫•t c·∫£ d√≤ng ƒë∆∞·ª£c b√¥i ƒëen
        selected_ranges = self.parent.account_table.selectionModel().selectedRows()
        selected_rows = [index.row() for index in selected_ranges]
        
        # N·∫øu kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c b√¥i ƒëen, ch·ªâ b·ªè tick d√≤ng hi·ªán t·∫°i
        if not selected_rows:
            selected_rows = [row]
        
        # B·ªè tick checkbox cho t·∫•t c·∫£ d√≤ng ƒë∆∞·ª£c ch·ªçn
        for selected_row in selected_rows:
            if selected_row < self.parent.account_table.rowCount():
                checkbox_item = self.parent.account_table.item(selected_row, 0)
                if checkbox_item:
                    checkbox_item.setData(CheckboxDelegate.CheckboxStateRole, False)
        
        self.parent.account_table.viewport().update()
        print(f"[DEBUG] ƒê√£ b·ªè tick checkbox cho {len(selected_rows)} d√≤ng: {selected_rows}")

    def select_all_account_rows(self):
        """Tick checkbox cho t·∫•t c·∫£ d√≤ng"""
        from src.ui.account_management import CheckboxDelegate
        for row in range(self.parent.account_table.rowCount()):
            checkbox_item = self.parent.account_table.item(row, 0)
            if checkbox_item:
                checkbox_item.setData(CheckboxDelegate.CheckboxStateRole, True)
        self.parent.account_table.viewport().update()
        print(f"[DEBUG] ƒê√£ tick checkbox cho t·∫•t c·∫£ {self.parent.account_table.rowCount()} d√≤ng")

    def deselect_all_account_rows(self):
        """B·ªè tick checkbox cho t·∫•t c·∫£ d√≤ng"""
        from src.ui.account_management import CheckboxDelegate
        for row in range(self.parent.account_table.rowCount()):
            checkbox_item = self.parent.account_table.item(row, 0)
            if checkbox_item:
                checkbox_item.setData(CheckboxDelegate.CheckboxStateRole, False)
        self.parent.account_table.viewport().update()
        print(f"[DEBUG] ƒê√£ b·ªè tick checkbox cho t·∫•t c·∫£ {self.parent.account_table.rowCount()} d√≤ng")

    # --- C√°c h√†m x·ª≠ l√Ω t√°c v·ª• t√†i kho·∫£n ---
    def login_account(self, row):
        """ƒêƒÉng nh·∫≠p l·∫°i t√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn"""
        try:
            # L·∫•y th√¥ng tin t√†i kho·∫£n
            phone_item = self.parent.account_table.item(row, 1)  # C·ªôt 1 l√† phone
            if not phone_item:
                print(f"[ERROR] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n ·ªü d√≤ng {row}")
                return
                
            phone = phone_item.text()
            print(f"[LOGIN] B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p l·∫°i: {phone}")
            
            # T√¨m t√†i kho·∫£n trong danh s√°ch accounts
            if row < len(self.parent.accounts):
                account = self.parent.accounts[row]
                username = account.get('username', phone)
                password = account.get('password', '')
                proxy = account.get('proxy', None)
                
                print(f"[LOGIN] ƒêƒÉng nh·∫≠p username: {username}")
                
                # G·ªçi h√†m ƒëƒÉng nh·∫≠p th·ª±c t·∫ø
                if hasattr(self.parent, 'perform_real_login'):
                    self.parent.perform_real_login(username, password, proxy)
                else:
                    print(f"[ERROR] Ph∆∞∆°ng th·ª©c perform_real_login kh√¥ng t·ªìn t·∫°i")
                    
            else:
                print(f"[ERROR] D√≤ng {row} v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t√†i kho·∫£n")
                
        except Exception as e:
            print(f"[ERROR] L·ªói khi ƒëƒÉng nh·∫≠p t√†i kho·∫£n: {str(e)}")

    def open_browser(self, row):
        """M·ªü tr√¨nh duy·ªát cho t√†i kho·∫£n"""
        try:
            if row < len(self.parent.accounts):
                account = self.parent.accounts[row]
                phone = account.get('phone', 'Unknown')
                print(f"[Browser] M·ªü tr√¨nh duy·ªát cho t√†i kho·∫£n: {phone}")
                
                # G·ªçi h√†m m·ªü browser n·∫øu c√≥
                if hasattr(self.parent, 'open_browser_for_account'):
                    self.parent.open_browser_for_account(account)
                else:
                    QMessageBox.information(self.parent, "Th√¥ng b√°o", 
                                          f"Ch·ª©c nƒÉng m·ªü tr√¨nh duy·ªát ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn\nT√†i kho·∫£n: {phone}")
            else:
                print(f"[ERROR] D√≤ng {row} kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            print(f"[ERROR] L·ªói khi m·ªü tr√¨nh duy·ªát: {str(e)}")

    def edit_proxy(self, row):
        """S·ª≠a proxy cho t√†i kho·∫£n"""
        try:
            if row < len(self.parent.accounts):
                account = self.parent.accounts[row]
                current_proxy = account.get('proxy', '')
                phone = account.get('phone', 'Unknown')
                
                # Hi·ªÉn th·ªã dialog ƒë·ªÉ nh·∫≠p proxy m·ªõi
                new_proxy, ok = QInputDialog.getText(
                    self.parent, 
                    "S·ª≠a Proxy", 
                    f"Nh·∫≠p proxy m·ªõi cho {phone}:\n(Format: ip:port:username:password)", 
                    text=current_proxy
                )
                
                if ok:
                    account['proxy'] = new_proxy.strip()
                    print(f"[Proxy] ƒê√£ c·∫≠p nh·∫≠t proxy cho {phone}: {new_proxy}")
                    
                    # C·∫≠p nh·∫≠t hi·ªÉn th·ªã trong b·∫£ng
                    proxy_item = self.parent.account_table.item(row, 6)  # C·ªôt proxy
                    if proxy_item:
                        proxy_item.setText(new_proxy.strip())
                        
                    # L∆∞u thay ƒë·ªïi
                    if hasattr(self.parent, 'save_accounts'):
                        self.parent.save_accounts()
            else:
                print(f"[ERROR] D√≤ng {row} kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            print(f"[ERROR] L·ªói khi s·ª≠a proxy: {str(e)}")

    def delete_session(self, row):
        """X√≥a session c·ªßa t√†i kho·∫£n"""
        try:
            if row < len(self.parent.accounts):
                account = self.parent.accounts[row]
                phone = account.get('phone', 'Unknown')
                
                reply = QMessageBox.question(
                    self.parent, 
                    "X√°c nh·∫≠n x√≥a session",
                    f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a session c·ªßa t√†i kho·∫£n {phone}?",
                    QMessageBox.Yes | QMessageBox.No
                )
                
                if reply == QMessageBox.Yes:
                    # X√≥a session file n·∫øu c√≥
                    username = account.get('username', phone)
                    session_file = f"sessions/{username}.session"
                    
                    import os
                    if os.path.exists(session_file):
                        os.remove(session_file)
                        print(f"[Session] ƒê√£ x√≥a session file: {session_file}")
                    
                    print(f"[Session] ƒê√£ x√≥a session cho t√†i kho·∫£n: {phone}")
                    QMessageBox.information(self.parent, "Th√†nh c√¥ng", f"ƒê√£ x√≥a session cho {phone}")
            else:
                print(f"[ERROR] D√≤ng {row} kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            print(f"[ERROR] L·ªói khi x√≥a session: {str(e)}")

    def delete_account(self, row):
        """X√≥a t√†i kho·∫£n"""
        try:
            if row < len(self.parent.accounts):
                account = self.parent.accounts[row]
                phone = account.get('phone', 'Unknown')
                
                reply = QMessageBox.question(
                    self.parent, 
                    "X√°c nh·∫≠n x√≥a t√†i kho·∫£n",
                    f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n {phone}?\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
                    QMessageBox.Yes | QMessageBox.No
                )
                
                if reply == QMessageBox.Yes:
                    # X√≥a kh·ªèi danh s√°ch accounts
                    del self.parent.accounts[row]
                    
                    # X√≥a d√≤ng kh·ªèi b·∫£ng
                    self.parent.account_table.removeRow(row)
                    
                    # L∆∞u thay ƒë·ªïi
                    if hasattr(self.parent, 'save_accounts'):
                        self.parent.save_accounts()
                        
                    print(f"[DELETE] ƒê√£ x√≥a t√†i kho·∫£n: {phone}")
                    QMessageBox.information(self.parent, "Th√†nh c√¥ng", f"ƒê√£ x√≥a t√†i kho·∫£n {phone}")
            else:
                print(f"[ERROR] D√≤ng {row} kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            print(f"[ERROR] L·ªói khi x√≥a t√†i kho·∫£n: {str(e)}")

    def export_selected_accounts(self):
        print("[EXPORT] Xu·∫•t d·ªØ li·ªáu...")

    def copy_phone_number(self, row):
        phone = self.parent.account_table.item(row, 1).text()  # C·ªôt 1 l√† phone
        from PySide6.QtGui import QGuiApplication
        QGuiApplication.clipboard().setText(phone)
        print(f"[COPY] {phone} ƒë√£ ƒë∆∞·ª£c copy!")

    def check_status(self, row):
        print("[STATUS] Ki·ªÉm tra ho·∫°t ƒë·ªông")

    def start_interaction(self, row):
        print("[START] B·∫Øt ƒë·∫ßu t∆∞∆°ng t√°c")

    def pause_interaction(self, row):
        print("[PAUSE] T·∫°m d·ª´ng t∆∞∆°ng t√°c")


# --- C√°c context menu kh√°c gi·ªØ nguy√™n ---
class ProxyContextMenu(QMenu):
    """Context menu cho Proxy Management Tab"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent

    def setup_menu(self):
        self.add_action("üîÑ Refresh Proxy List", lambda: print("Refresh proxy list"))
        self.add_action("üìä Check Proxy Status", lambda: print("Check proxy status"))

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)


class MessagingContextMenu(QMenu):
    """Context menu cho Messaging Tab"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent

    def setup_menu(self):
        self.add_action("üì® Send Message", lambda: print("Send message"))
        self.add_action("üìã Copy Info", lambda: print("Copy info"))

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)


class DataScannerContextMenu(QMenu):
    """Context menu cho Data Scanner Tab"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent

    def setup_menu(self):
        self.add_action("üîç Scan Data", lambda: print("Scan data"))
        self.add_action("üìä Show Stats", lambda: print("Show stats"))

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)


class HistoryLogContextMenu(QMenu):
    """Context menu cho History Log Tab"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent

    def setup_menu(self):
        self.add_action("üìú View Log", lambda: print("View log"))
        self.add_action("üóëÔ∏è Clear Log", lambda: print("Clear log"))

    def add_action(self, text, slot):
        action = QAction(text, self)
        action.triggered.connect(slot)
        self.addAction(action)
