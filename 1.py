import os
import subprocess
import requests
from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QMessageBox, QTextEdit, QInputDialog, QLabel, QComboBox, QFileDialog, QListWidget, QListWidgetItem, QCheckBox, QSplitter, QTabWidget, QLineEdit
)
from PySide6.QtGui import QClipboard, QColor, QFont
from PySide6.QtCore import Qt

# Helper function for network check
def check_github_online():
    try:
        requests.get("https://github.com", timeout=3)
        return True
    except Exception:
        return False

class ProjectInfo:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(path)
        self.remotes = self.get_remotes()

    def get_remotes(self):
        try:
            out = subprocess.run(["git", "remote", "-v"], cwd=self.path, capture_output=True, text=True)
            remotes = set()
            for line in out.stdout.splitlines():
                if line:
                    parts = line.split()
                    if len(parts) >= 2:
                        remotes.add(parts[0])
            return sorted(remotes)
        except Exception:
            return []

    def get_current_branch(self):
        try:
            out = subprocess.run(["git", "rev-parse", "--abbrev-ref", "HEAD"], cwd=self.path, capture_output=True, text=True)
            return out.stdout.strip()
        except Exception:
            return ""

    def get_remote_url(self, remote):
        try:
            out = subprocess.run(["git", "remote", "get-url", remote], cwd=self.path, capture_output=True, text=True)
            return out.stdout.strip()
        except Exception:
            return ""

    def get_default_remote_branch(self, remote):
        try:
            out = subprocess.run(["git", "remote", "show", remote], cwd=self.path, capture_output=True, text=True)
            for line in out.stdout.splitlines():
                if "HEAD branch" in line:
                    return line.split(":")[-1].strip()
            return ""
        except Exception:
            return ""

class GitUploader(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("GitHub Multi-Project Sync Tool (Pro)")
        self.setMinimumWidth(900)
        self.projects = []
        self.current_project = None
        self.language = 'vi'  # vi/en
        self.dark_mode = False
        self.init_ui()
        self.set_ui_enabled(False)
        self.check_network_status()

    def init_ui(self):
        main_layout = QVBoxLayout()
        self.tabs = QTabWidget()
        self.tabs.setTabPosition(QTabWidget.North)
        # --- Tab 1: Git ---
        git_tab = QWidget()
        layout = QVBoxLayout()

        # D·ª± √°n
        proj_layout = QHBoxLayout()
        self.project_list = QComboBox()
        self.project_list.setMinimumWidth(200)
        self.project_list.currentIndexChanged.connect(self.on_project_changed)
        proj_layout.addWidget(QLabel(self.tr("D·ª± √°n:")))
        proj_layout.addWidget(self.project_list)
        self.add_proj_btn = QPushButton(self.tr("‚ûï Th√™m d·ª± √°n"))
        self.add_proj_btn.clicked.connect(self.add_project)
        proj_layout.addWidget(self.add_proj_btn)
        # N√∫t k·∫øt n·ªëi & push l√™n GitHub
        self.push_github_btn = QPushButton(self.tr("üåê K·∫øt n·ªëi & Push l√™n GitHub"))
        self.push_github_btn.clicked.connect(self.connect_and_push_github)
        proj_layout.addWidget(self.push_github_btn)
        layout.addLayout(proj_layout)

        # Remote
        remote_layout = QHBoxLayout()
        self.remote_box = QComboBox()
        self.remote_box.setMinimumWidth(120)
        self.remote_box.currentIndexChanged.connect(self.update_remote_info)
        remote_layout.addWidget(QLabel(self.tr("Remote:")))
        remote_layout.addWidget(self.remote_box)
        self.refresh_remotes_btn = QPushButton(self.tr("üîÑ L√†m m·ªõi remote"))
        self.refresh_remotes_btn.clicked.connect(self.refresh_remotes)
        remote_layout.addWidget(self.refresh_remotes_btn)
        self.add_remote_btn = QPushButton(self.tr("‚ûï Th√™m remote"))
        self.add_remote_btn.clicked.connect(self.add_remote)
        remote_layout.addWidget(self.add_remote_btn)
        self.remote_url_label = QLabel("")
        remote_layout.addWidget(self.remote_url_label)
        layout.addLayout(remote_layout)

        # Branch info
        branchinfo_layout = QHBoxLayout()
        self.branch_label = QLabel(self.tr("Branch hi·ªán t·∫°i: "))
        branchinfo_layout.addWidget(self.branch_label)
        self.default_branch_label = QLabel(self.tr("Branch m·∫∑c ƒë·ªãnh remote: "))
        branchinfo_layout.addWidget(self.default_branch_label)
        layout.addLayout(branchinfo_layout)

        self.status_label = QLabel(self.tr("Tr·∫°ng th√°i: S·∫µn s√†ng"))
        layout.addWidget(self.status_label)

        self.log_box = QTextEdit()
        self.log_box.setReadOnly(True)
        layout.addWidget(self.log_box)

        git_tab.setLayout(layout)
        self.tabs.addTab(git_tab, self.tr("Git"))
        self.setLayout(QVBoxLayout())
        self.layout().addWidget(self.tabs)

    def on_project_changed(self, idx):
        if not hasattr(self, 'projects') or idx < 0 or idx >= len(self.projects):
            self.current_project = None
            self.set_ui_enabled(False)
            self.status_label.setText(self.tr("Tr·∫°ng th√°i: Ch∆∞a ch·ªçn d·ª± √°n"))
            return
        self.current_project = self.projects[idx]
        self.set_ui_enabled(True)
        self.status_label.setText(self.tr(f"Tr·∫°ng th√°i: ƒê√£ ch·ªçn d·ª± √°n {self.current_project.name}"))
        # C√≥ th·ªÉ g·ªçi c√°c h√†m c·∫≠p nh·∫≠t giao di·ªán kh√°c ·ªü ƒë√¢y n·∫øu c·∫ßn

    def set_ui_enabled(self, enabled):
        for w in [self.add_proj_btn, self.remote_box, self.refresh_remotes_btn, self.add_remote_btn]:
            w.setEnabled(enabled)

    def add_project(self):
        try:
            # T·∫°o dialog ch·ªçn th∆∞ m·ª•c v·ªõi c√°c t√πy ch·ªçn
            dialog = QFileDialog(self)
            dialog.setWindowTitle("Ch·ªçn th∆∞ m·ª•c d·ª± √°n")
            dialog.setFileMode(QFileDialog.Directory)
            dialog.setOption(QFileDialog.ShowDirsOnly, True)
            
            # ƒê·∫∑t th∆∞ m·ª•c m·∫∑c ƒë·ªãnh l√† Desktop ho·∫∑c Documents
            default_paths = [
                os.path.expanduser("~/Desktop"),
                os.path.expanduser("~/Documents"),
                os.path.expanduser("~")
            ]
            
            # T√¨m th∆∞ m·ª•c m·∫∑c ƒë·ªãnh ƒë·∫ßu ti√™n t·ªìn t·∫°i
            for path in default_paths:
                if os.path.exists(path):
                    dialog.setDirectory(path)
                    break
            
            # Hi·ªÉn th·ªã dialog
            if dialog.exec_():
                selected_paths = dialog.selectedFiles()
                if not selected_paths:
                    self.log_box.append("[INFO] Kh√¥ng c√≥ th∆∞ m·ª•c n√†o ƒë∆∞·ª£c ch·ªçn")
                    return
                    
                path = selected_paths[0]
                
                # Ki·ªÉm tra xem th∆∞ m·ª•c c√≥ ph·∫£i l√† git repository kh√¥ng
                git_dir = os.path.join(path, ".git")
                if not os.path.exists(git_dir):
                    # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën kh·ªüi t·∫°o git repository kh√¥ng
                    reply = QMessageBox.question(self, 
                        "Kh·ªüi t·∫°o Git", 
                        "Th∆∞ m·ª•c n√†y ch∆∞a ph·∫£i l√† Git repository.\nB·∫°n c√≥ mu·ªën kh·ªüi t·∫°o Git repository kh√¥ng?",
                        QMessageBox.Yes | QMessageBox.No)
                        
                    if reply == QMessageBox.Yes:
                        try:
                            # Kh·ªüi t·∫°o git repository
                            subprocess.run(["git", "init"], cwd=path, check=True)
                            self.log_box.append(f"[INFO] ƒê√£ kh·ªüi t·∫°o Git repository t·∫°i: {path}")
                        except subprocess.CalledProcessError as e:
                            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o Git repository:\n{str(e)}")
                            self.log_box.append(f"[ERROR] L·ªói kh·ªüi t·∫°o Git repo: {str(e)}")
                            return
                    else:
                        self.log_box.append("[INFO] Ng∆∞·ªùi d√πng ƒë√£ h·ªßy kh·ªüi t·∫°o Git repository")
                        return

                # Ki·ªÉm tra tr√πng l·∫∑p
                for proj in self.projects:
                    if proj.path == path:
                        QMessageBox.information(self, "ƒê√£ t·ªìn t·∫°i", "D·ª± √°n n√†y ƒë√£ c√≥ trong danh s√°ch.")
                        self.log_box.append(f"[INFO] D·ª± √°n ƒë√£ t·ªìn t·∫°i: {path}")
                        return

                # Th√™m d·ª± √°n m·ªõi
                proj = ProjectInfo(path)
                self.projects.append(proj)
                self.project_list.addItem(f"{proj.name} ({proj.path})")
                self.project_list.setCurrentIndex(len(self.projects)-1)
                self.log_box.append(f"[INFO] ƒê√£ th√™m d·ª± √°n th√†nh c√¥ng: {proj.path}")
            else:
                self.log_box.append("[INFO] Ng∆∞·ªùi d√πng ƒë√£ h·ªßy ch·ªçn th∆∞ m·ª•c")
                
        except Exception as e:
            error_msg = str(e)
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m d·ª± √°n:\n{error_msg}")
            self.log_box.append(f"[ERROR] L·ªói khi th√™m d·ª± √°n: {error_msg}")
            self.log_box.append(f"[DEBUG] Chi ti·∫øt l·ªói: {type(e).__name__}")

    def check_network_status(self):
        if not check_github_online():
            self.status_label.setText(self.tr("‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c GitHub!"))
        else:
            self.status_label.setText(self.tr("Tr·∫°ng th√°i: S·∫µn s√†ng"))

    def tr(self, text):
        if self.language == 'vi':
            return text
        mapping = {
            "D·ª± √°n:": "Project:",
            "‚ûï Th√™m d·ª± √°n": "‚ûï Add Project",
            "üåê K·∫øt n·ªëi & Push l√™n GitHub": "üåê Connect & Push to GitHub",
            "Remote:": "Remote:",
            "üîÑ L√†m m·ªõi remote": "üîÑ Refresh remote",
            "‚ûï Th√™m remote": "‚ûï Add remote",
            "Branch hi·ªán t·∫°i: ": "Current branch: ",
            "Branch m·∫∑c ƒë·ªãnh remote: ": "Remote default branch: ",
            "Tr·∫°ng th√°i: S·∫µn s√†ng": "Status: Ready",
            "Tr·∫°ng th√°i: Ch∆∞a ch·ªçn d·ª± √°n": "Status: No project selected",
            "‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c GitHub!": "‚ö†Ô∏è No network or cannot access GitHub!",
            "Ch∆∞a ch·ªçn d·ª± √°n": "No project selected",
            "Vui l√≤ng ch·ªçn d·ª± √°n tr∆∞·ªõc!": "Please select a project first!",
            "ƒê√£ t·ªìn t·∫°i": "Already exists",
            "D·ª± √°n n√†y ƒë√£ c√≥ trong danh s√°ch.": "This project is already in the list.",
            "T√™n remote": "Remote name",
            "Nh·∫≠p t√™n remote (v√≠ d·ª•: origin):": "Enter remote name (e.g. origin):",
            "URL remote": "Remote URL",
            "Nh·∫≠p URL remote (v√≠ d·ª•: https://github.com/xxx/yyy.git):": "Enter remote URL (e.g. https://github.com/xxx/yyy.git):",
            "Th√†nh c√¥ng": "Success",
            "ƒê√£ th√™m remote": "Remote added",
            "L·ªói": "Error",
            "Kh√¥ng th·ªÉ th√™m remote:": "Cannot add remote:",
            "URL GitHub": "GitHub URL",
            "Nh·∫≠p URL repo GitHub (https://github.com/xxx/yyy.git):": "Enter GitHub repo URL (https://github.com/xxx/yyy.git):",
            "ƒê√£ push d·ª± √°n l√™n GitHub:": "Project pushed to GitHub:",
            "Push th·∫•t b·∫°i:": "Push failed:",
            "Git": "Git"
        }
        return mapping.get(text, text)

    def update_remote_info(self):
        # ƒê·∫£m b·∫£o h√†m n√†y t·ªìn t·∫°i ƒë·ªÉ tr√°nh l·ªói AttributeError
        # C√≥ th·ªÉ c·∫≠p nh·∫≠t label remote_url_label n·∫øu mu·ªën
        if hasattr(self, 'remote_url_label'):
            remote = self.remote_box.currentText() if hasattr(self, 'remote_box') else ''
            self.remote_url_label.setText(f"Remote: {remote}")

    def refresh_remotes(self):
        # C·∫≠p nh·∫≠t l·∫°i danh s√°ch remote th·ª±c t·∫ø t·ª´ git
        if not self.current_project:
            return
        self.remote_box.clear()
        remotes = self.get_remotes_for_current_project()
        for r in remotes:
            self.remote_box.addItem(r)
        if remotes:
            self.remote_box.setCurrentIndex(0)
        self.update_remote_info()

    def get_remotes_for_current_project(self):
        if not self.current_project:
            return []
        try:
            out = subprocess.run(["git", "remote"], cwd=self.current_project.path, capture_output=True, text=True)
            return [r.strip() for r in out.stdout.splitlines() if r.strip()]
        except Exception:
            return []

    def add_remote(self):
        if not self.current_project:
            QMessageBox.warning(self, "Ch∆∞a ch·ªçn d·ª± √°n", "Vui l√≤ng ch·ªçn d·ª± √°n tr∆∞·ªõc!")
            return
        name, ok1 = QInputDialog.getText(self, "T√™n remote", "Nh·∫≠p t√™n remote (v√≠ d·ª•: origin):")
        if not ok1 or not name.strip():
            return
        url, ok2 = QInputDialog.getText(self, "URL remote", "Nh·∫≠p URL remote (v√≠ d·ª•: https://github.com/xxx/yyy.git):")
        if not ok2 or not url.strip():
            return
        # Th√™m remote qua git
        try:
            out = subprocess.run(["git", "remote", "add", name.strip(), url.strip()], cwd=self.current_project.path, capture_output=True, text=True)
            if out.returncode == 0:
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m remote '{name.strip()}' cho d·ª± √°n.")
            else:
                QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m remote: {out.stderr}")
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", str(e))
        self.refresh_remotes()

    def connect_and_push_github(self):
        if not self.current_project:
            QMessageBox.warning(self, "Ch∆∞a ch·ªçn d·ª± √°n", "Vui l√≤ng ch·ªçn d·ª± √°n tr∆∞·ªõc!")
            return
        url, ok = QInputDialog.getText(self, "URL GitHub", "Nh·∫≠p URL repo GitHub (https://github.com/xxx/yyy.git):")
        if not ok or not url.strip():
            return
        # Th√™m ho·∫∑c c·∫≠p nh·∫≠t remote origin
        remotes = self.get_remotes_for_current_project()
        if "origin" in remotes:
            subprocess.run(["git", "remote", "set-url", "origin", url.strip()], cwd=self.current_project.path)
        else:
            subprocess.run(["git", "remote", "add", "origin", url.strip()], cwd=self.current_project.path)
        # Ki·ªÉm tra c√≥ commit ch∆∞a, n·∫øu ch∆∞a th√¨ t·∫°o commit ƒë·∫ßu ti√™n
        out = subprocess.run(["git", "rev-parse", "--verify", "HEAD"], cwd=self.current_project.path, capture_output=True, text=True)
        if out.returncode != 0:
            # Ch∆∞a c√≥ commit, t·∫°o file README.md n·∫øu ch∆∞a c√≥
            readme_path = os.path.join(self.current_project.path, "README.md")
            if not os.path.exists(readme_path):
                with open(readme_path, "w", encoding="utf-8") as f:
                    f.write(f"# {self.current_project.name}\n")
            
            subprocess.run(["git", "add", "."], cwd=self.current_project.path)
            subprocess.run(["git", "commit", "-m", "Initial commit"], cwd=self.current_project.path)
        # Push l·∫ßn ƒë·∫ßu
        branch = "main"
        # N·∫øu kh√¥ng c√≥ branch main, th·ª≠ master
        out = subprocess.run(["git", "branch"], cwd=self.current_project.path, capture_output=True, text=True)
        branches = [b.strip().replace("* ", "") for b in out.stdout.splitlines()]
        if "main" not in branches and "master" in branches:
            branch = "master"
        push_out = subprocess.run(["git", "push", "-u", "origin", branch], cwd=self.current_project.path, capture_output=True, text=True)
        if push_out.returncode == 0:
            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ push d·ª± √°n l√™n GitHub: {url.strip()} (branch: {branch})")
        else:
            QMessageBox.warning(self, "L·ªói", f"Push th·∫•t b·∫°i: {push_out.stderr}")

if __name__ == "__main__":
    app = QApplication([])
    window = GitUploader()
    window.show()
    app.exec()
